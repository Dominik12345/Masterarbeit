%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: Masterarbeit.dvi
%%CreationDate: Wed Aug 24 15:38:52 2016
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMSans10-Bold TeXGyrePagella-Regular
%%+ TeXGyrePagella-Bold
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o Masterarbeit.ps Masterarbeit.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.08.24:1538
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: q-ec.enc 0 0
% This file belongs to the TeX Gyre collection of fonts. The work
% is released under the GUST Font License. See the respective
% MANIFEST*.txt and README*.txt files for the details.
% For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% 
% NOTE: all fonts of the TeX Gyre family share EXACTLY THE SAME
%       *.enc files.
/encqec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pi 3.141592 def /ed{exch def}def /gs{gsave dup scale}def /gsw{ gs
/width ed width setlinewidth }def /p1{/y1 ed /x1 ed}def /p2{/y2 ed
/x2 ed}def /p3{/y3 ed /x3 ed}def /p4{/y4 ed /x4 ed}def /garrow{/arrowpos
ed /arrowspec ed}def /setabs{ dup load abs def }def /normalizearc {
translate exch dup rotate sub 3 2 roll { neg 1 -1 scale } if dup abs
360 ge { pop 360 } { dup dup 0 lt { 360 sub } if 360 div truncate 360
mul sub dup 0.1 lt { pop 360 } if }ifelse } def /normalizeline { 3
index 3 index translate 2 index sub exch 3 index sub 2 copy atan rotate
dup mul exch dup mul add sqrt 3 1 roll pop pop } def /abox{ newpath
x1 y1 moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto closepath }def
/atriangle{ newpath x1 y1 moveto x2 y2 lineto x3 y3 lineto closepath
}def /abezier{ newpath x1 y1 moveto x2 y2 x3 y3 x4 y4 curveto }def
/distance{ dup 3 index sub dup mul 2 index 5 index sub dup mul add
sqrt } def

 /arrowVTriangle { /arrowinset ed /arrowlength ed /arrowwidth ed /arrowstroke
ed newpath 0 arrowlength -0.5 mul moveto arrowwidth arrowlength rlineto
arrowwidth -1 mul arrowlength arrowinset mul -1 mul rlineto arrowwidth
-1 mul arrowlength arrowinset mul rlineto closepath arrowstroke 0 ne
{ gsave arrowstroke setlinewidth stroke grestore } if fill } def /arrow1
{ gsave rotate exec grestore } def

 /fixdash{ 2 copy gt 1 index 0 ne and { 2 copy 2 mul div 0.5 sub round
dup 0 le { pop 0 } if 2 mul 1 add exch pop div dup 2 array astore 0
setdash } { pop pop [] 0 setdash } ifelse } def

 /dashline{ gsave distance dsize fixdash newpath moveto lineto stroke
grestore } def

 /dasharc{ gsave 3 copy sub abs pi mul 180 div mul 3 index angdsize
mul fixdash newpath arc stroke grestore } def

 /doublegluon{ gsw /linesep ed /num ed /ampi ed normalizeline /dr ed
linesep 0 eq { 0 0 dr 0 ampi num gluon1 } { 0 linesep 2 div dup dr
exch ampi num gluon1 0 linesep -2 div dup dr exch ampi num gluon1 }
ifelse grestore } def

 /gluon1{ gsave /num ed /ampi ed normalizeline /dr ed /num num 0.5
sub round def /inc dr num 2 mul 2 add div def /amp8 ampi 0.9 mul def
amp8 0 lt {/amp8 amp8 neg def} if /x1 inc 2 mul def newpath 0 0 moveto
inc 0.1 mul ampi 0.5 mul inc 0.5 mul ampi inc 1.4 mul ampi curveto
x1 amp8 add dup ampi exch ampi neg dup x1 exch curveto 2 1 num { pop
x1 amp8 sub dup ampi neg exch ampi dup x1 inc add exch curveto /x1
x1 inc dup add add def x1 amp8 add dup ampi exch ampi neg dup x1 exch
curveto } for x1 amp8 sub dup ampi neg exch ampi dup x1 inc 0.6 mul
add exch curveto x1 inc 1.5 mul add ampi dr inc 0.1 mul sub ampi 0.5
mul dr 0 curveto stroke grestore } def

 /doublephoton{ gsw /linesep ed /num ed /ampi ed normalizeline /dr
ed linesep 0 eq { 0 0 dr 0 ampi num photon1 } { 0 linesep 2 div dup
dr exch ampi num photon1 0 linesep -2 div dup dr exch ampi num photon1
} ifelse grestore } def

 /photon1{ gsave /num1 ed /ampi1 ed normalizeline /dr ed /num1 num1
2 mul 0.5 sub round def /x2 dr num1 div def /sign 1 def 1 1 num1 {
pop newpath 0 0 moveto 4 3 div x2 mul pi div dup neg x2 add 4 3 div
ampi1 sign mul mul dup 3 1 roll x2 0 curveto stroke /sign sign neg
def x2 0 translate } for grestore } def

 /zigzag{ gsw /num ed /ampi ed normalizeline /dr ed /num num 2 mul
0.5 sub round def /x2 dr num div def /sign 1 def 1 1 num { pop newpath
0 0 moveto x2 2 div ampi sign mul lineto x2 0 lineto stroke /sign sign
neg def x2 0 translate } for grestore } def

 /doublephotonarc{ gsw normalizearc /darc ed /radius ed /linesep ed
/num ed /ampli ed /num num 2 mul round def /darc1 darc num div def
/cp darc1 cos def /sp darc1 sin def darc1 2 div dup /cp2 exch cos def
/sp2 exch sin def linesep 0 eq { radius photonarc1 } { linesep 2 div
radius add photonarc1 linesep -2 div radius add photonarc1 } ifelse
grestore } def

 /photonarc1{ gsave /radius1 ed /ampli1 ampli def newpath 1 1 num {
pop radius1 0 moveto /beta radius1 darc1 mul 180 ampli1 mul div def
/tt sp cp beta mul sub cp sp beta mul add div def /amp1 radius1 ampli1
add 8 mul beta cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul 3 mul
sp 4 mul sub add radius1 mul sub beta tt sub 3 mul div def radius1
ampli1 add 8 mul cp2 mul 1 cp add radius1 mul sub 3 div amp1 sub dup
radius1 sub beta mul amp1 dup radius1 cp mul sub tt mul radius1 sp
mul add radius1 cp mul radius1 sp mul curveto /ampli1 ampli1 neg def
darc1 rotate } for stroke grestore } def

 /doublegluearc{ gsw normalizearc /darc ed /radius ed /linesep ed /num
ed /ampi ed /num num 0.5 sub round def linesep 0 eq { radius gluearc1
} { linesep 2 div radius add gluearc1 linesep -2 div radius add gluearc1
} ifelse grestore } def

 /gluearc1{ gsave /radius1 ed /dr radius1 darc mul pi mul 180 div def
/const darc dr div def darc 360 lt { /inc dr num 2 mul 2 add div def
} { /inc dr num 2 mul div def } ifelse /amp8 ampi 0.9 mul def /amp1
radius1 ampi add def /amp2 radius1 ampi sub def /amp3 radius1 ampi
2 div add def /amp4 amp1 inc amp8 add const mul cos div def /amp5 amp2
amp8 const mul cos div def /amp6 amp1 inc 0.6 mul amp8 add const mul
cos div def /amp7 amp1 inc 0.9 mul const mul cos div def amp8 0 lt
{/amp8 amp8 neg def} if newpath darc 360 lt { /x1 inc 2 mul def radius1
0 moveto inc 0.1 mul const mul dup cos amp3 mul exch sin amp3 mul inc
0.5 mul const mul dup cos amp7 mul exch sin amp7 mul inc 1.4 mul const
mul dup cos amp1 mul exch sin amp1 mul curveto x1 amp8 add const mul
dup cos amp6 mul exch sin amp6 mul x1 amp8 add const mul dup cos amp5
mul exch sin amp5 mul x1 const mul dup cos amp2 mul exch sin amp2 mul
curveto 2 1 num } { /x1 0 def amp2 0 moveto 1 1 num } ifelse { pop
x1 amp8 sub const mul dup cos amp5 mul exch sin amp5 mul x1 amp8 sub
const mul dup cos amp4 mul exch sin amp4 mul x1 inc add const mul dup
cos amp1 mul exch sin amp1 mul curveto /x1 x1 inc dup add add def x1
amp8 add const mul dup cos amp4 mul exch sin amp4 mul x1 amp8 add const
mul dup cos amp5 mul exch sin amp5 mul x1 const mul dup cos amp2 mul
exch sin amp2 mul curveto } for darc 360 lt { x1 amp8 sub const mul
dup cos amp5 mul exch sin amp5 mul x1 amp8 sub const mul dup cos amp6
mul exch sin amp6 mul x1 inc 0.6 mul add const mul dup cos amp1 mul
exch sin amp1 mul curveto x1 inc 1.5 mul add const mul dup cos amp7
mul exch sin amp7 mul dr inc 0.1 mul sub const mul dup cos amp3 mul
exch sin amp3 mul dr const mul dup cos radius1 mul exch sin radius1
mul curveto } if stroke grestore } def

 /dasharrowdoubleline{ gsw normalizeline /dr ed /dsize ed /linesep
ed /flip ed garrow /linesep setabs /linewidth width def /y11 linesep
0.5 mul def /y22 linesep -0.5 mul def 0 y11 dr arrowpos mul y11 dashline
linesep 0 ne { 0 y22 dr arrowpos mul y22 dashline } if dr arrowpos
mul 0 translate /arrowspec load flip { -90 }{ 90 } ifelse arrow1 0
y11 dr 1 arrowpos sub mul y11 dashline linesep 0 ne { 0 y22 dr 1 arrowpos
sub mul y22 dashline } if grestore } def

 /arc2{ gsw normalizearc /darc ed /radius ed /dsize ed /linesep ed
/angdsize dsize radius div def /flip ed garrow /arcmid darc arrowpos
mul def dsize 0 eq { linesep 0 eq { 0 0 radius 0 darc dasharc } { 0
0 radius linesep 2 div add 0 darc dasharc 0 0 radius linesep -2 div
add 0 darc dasharc } ifelse } { linesep 0 eq { 0 0 radius 0 arcmid
dasharc 0 0 radius arcmid darc dasharc } { 0 0 radius linesep 2 div
add 0 arcmid dasharc 0 0 radius linesep -2 div add 0 arcmid dasharc
0 0 radius linesep 2 div add arcmid darc dasharc 0 0 radius linesep
-2 div add arcmid darc dasharc } ifelse } ifelse arcmid rotate radius
0 translate /arrowspec load flip { 0 } { 180 } ifelse arrow1 grestore
} def

 /vertex{ gs /dotsize ed translate newpath 0 0 dotsize 0 360 arc fill
stroke grestore } def

 /bcirc{ gsw /radius ed translate gsave 1 setgray newpath 0 0 radius
0 360 arc fill grestore newpath 0 0 radius 0 360 arc stroke grestore
} def

 /gcirc{ gsw /gcolor ed /radius ed translate 1 setgray newpath 0 0
radius 0 360 arc fill gcolor setgray newpath 0 0 radius 0 360 arc fill
0 setgray newpath 0 0 radius 0 360 arc stroke grestore } def

 /ccirc1{ gsw /radius ed translate newpath 0 0 radius 0 360 arc fill
grestore } def

 /ccirc2{ gsw /radius ed translate newpath 0 0 radius 0 360 arc stroke
grestore } def

 /box{ gsw p2 p1 abox stroke grestore } def

 /bbox{ gsw p2 p1 gsave 1 setgray abox fill grestore abox stroke grestore
} def

 /gbox{ gsw /gcolor ed p2 p1 1 setgray abox fill gcolor setgray abox
fill 0 setgray abox stroke grestore } def

 /cbox1{ gsw p2 p1 abox fill grestore } def

 /cbox2{ gsw p2 p1 abox stroke grestore } def

 /triangle{ gsw p3 p2 p1 atriangle stroke grestore } def

 /btriangle{ gsw p3 p2 p1 gsave 1 setgray atriangle fill grestore atriangle
stroke grestore } def

 /gtriangle{ gsw /gcolor ed p3 p2 p1 1 setgray atriangle fill gcolor
setgray atriangle fill 0 setgray atriangle stroke grestore } def

 /ctriangle1{ gsw p3 p2 p1 atriangle fill grestore } def

 /ctriangle2{ gsw p3 p2 p1 atriangle stroke grestore } def

 /btext{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def gsave 1 setgray abox fill grestore
abox stroke hsize 2 div neg fsize 3 div neg moveto thetext show grestore
} def

 /b2text{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def gsave 1 setgray abox fill grestore abox stroke hsize1 2
div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /gtext{ gsw /fsize ed /thetext ed /graysc ed translate /hsize thetext
stringwidth pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul
3 div neg def /x2 x1 neg def /y2 y1 neg def graysc setgray abox fill
0 setgray abox stroke hsize 2 div neg fsize 3 div neg moveto thetext
show grestore } def

 /ctext1{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox fill grestore } def

 /ctext2{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox stroke hsize 2 div neg fsize
3 div neg moveto thetext show grestore } def

 /g2text{ gsw /fsize ed /text2 ed /text1 ed /graysc ed translate /hsize1
text1 stringwidth pop def /hsize2 text2 stringwidth pop def hsize1
hsize2 lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize
fsize add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def
/y2 y1 neg def graysc setgray abox fill 0 setgray abox stroke hsize1
2 div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /c2text1{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox fill grestore } def

 /c2text2{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox stroke hsize1 2 div neg fsize 6 div moveto text1 show
hsize2 2 div neg fsize 5 mul 6 div neg moveto text2 show grestore }
def

 /ptext{ gs /text ed /fsize ed /mode ed 3 1 roll translate rotate mode
3 lt { 0 fsize neg translate } { mode 6 lt { /mode mode 3 sub def 0
fsize 2 div neg translate } { /mode mode 6 sub def } ifelse } ifelse
/fsize text stringwidth pop def mode 1 eq { fsize 2 div neg 0 translate
} { mode 2 eq { fsize neg 0 translate } if } ifelse 0 0 moveto text
show grestore } def

 /goval{ gsw /gcolor ed /x1 ed /x2 ed /radius ed translate x1 rotate
x2 radius div 1.0 scale 1 setgray newpath 0 0 radius 0 360 arc fill
gcolor setgray newpath 0 0 radius 0 360 arc fill 0 setgray newpath
0 0 radius 0 360 arc stroke grestore } def

 /coval1{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc fill grestore } def

 /coval2{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /oval{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /docurve{ x1 2 mul x2 add 3 div y1 y0 sub x1 x0 sub div x2 x0 sub
mul y2 y0 sub x2 x0 sub div x1 x0 sub mul add y1 add y0 2 mul add 3
div x1 x2 2 mul add 3 div y2 y3 sub x2 x3 sub div x1 x3 sub mul y1
y3 sub x1 x3 sub div x2 x3 sub mul add y2 add y3 2 mul add 3 div x2
y2 curveto } def

 /makecurve{ gsw /points ed /ss points length 2 idiv 2 mul def newpath
ss 4 gt { /x1 points 0 get def /y1 points 1 get def /x2 points 2 get
def /y2 points 3 get def /x3 points 4 get def /y3 points 5 get def
/x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div y2 y1 sub x2 x1
sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul y1 2 mul add
y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed /x0 points ii
get def /y0 points ii 1 add get def /x1 points ii 2 add get def /y1
points ii 3 add get def /x2 points ii 4 add get def /y2 points ii 5
add get def /x3 points ii 6 add get def /y3 points ii 7 add get def
docurve } for /x0 points ss 6 sub get def /y0 points ss 5 sub get def
/x1 points ss 4 sub get def /y1 points ss 3 sub get def /x2 points
ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul x1 sub def
/y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub 2 mul x2 x1
sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve } { ss
4 eq { points 0 get points 1 get moveto points 2 get points 3 get lineto
} if } ifelse stroke grestore } def

 /makedashcurve{ gsw /dsize ed /points ed /ss points length 2 idiv
2 mul def newpath ss 4 gt { /x1 points 0 get def /y1 points 1 get def
/x2 points 2 get def /y2 points 3 get def /x3 points 4 get def /y3
points 5 get def /x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div
y2 y1 sub x2 x1 sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul
y1 2 mul add y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed
/x0 points ii get def /y0 points ii 1 add get def /x1 points ii 2 add
get def /y1 points ii 3 add get def /x2 points ii 4 add get def /y2
points ii 5 add get def /x3 points ii 6 add get def /y3 points ii 7
add get def docurve } for /x0 points ss 6 sub get def /y0 points ss
5 sub get def /x1 points ss 4 sub get def /y1 points ss 3 sub get def
/x2 points ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul
x1 sub def /y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub
2 mul x2 x1 sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve
} { ss 4 eq { points 0 get points 1 get moveto points 2 get points
3 get lineto } if } ifelse centerdash stroke grestore } def

 /pathlength{ flattenpath /dist 0 def { /yfirst ed /xfirst ed /ymoveto
yfirst def /xmoveto xfirst def } { /ynext ed /xnext ed /dist dist ynext
yfirst sub dup mul xnext xfirst sub dup mul add sqrt add def /yfirst
ynext def /xfirst xnext def } {} {/ynext ymoveto def /xnext xmoveto
def /dist ynext yfirst sub dup mul xnext xfirst sub dup mul add sqrt
add def /yfirst ynext def /xfirst xnext def } pathforall dist } def

 /centerdash{ /pathlen pathlength def /jj pathlen dsize div 2.0 div
cvi def /ddsize pathlen jj 2.0 mul div def [ddsize] ddsize 2 div setdash
} def

 /logaxis{ gsw /offset ed /hashsize ed /nlogs ed normalizeline /rr
ed offset 0 ne { /offset offset ln 10 ln div def } if /offset offset
dup cvi sub def newpath 0 0 moveto rr 0 lineto /lsize rr nlogs div
def 0 1 nlogs { /x2 ed x2 offset ge { /y2 x2 offset sub lsize mul def
y2 rr le { y2 0 moveto y2 hashsize 1.2 mul lineto } if } if } for stroke
width 0.6 mul setlinewidth newpath 0 1 nlogs { /x2 ed 2 1 9 { ln 10
ln div x2 add /xx2 ed xx2 offset ge { /y2 xx2 offset sub lsize mul
def y2 rr le { y2 0 moveto y2 hashsize 0.8 mul lineto } if } if } for
} for stroke grestore } def

 /linaxis{ gsw /offset ed /hashsize ed /perdec ed /numdec ed normalizeline
/rr ed newpath 0 0 moveto rr 0 lineto /x1 rr numdec perdec mul div
def /y1 rr numdec div def /offset offset x1 mul def 0 1 numdec { y1
mul offset sub dup 0 ge { dup rr le { dup 0 moveto hashsize 1.2 mul
lineto } if } if } for stroke width 0.6 mul setlinewidth newpath offset
cvi 1 numdec perdec mul offset add { x1 mul offset sub dup 0 ge { dup
rr le { dup 0 moveto hashsize 0.8 mul lineto } if } if } for stroke
grestore } def

 /dashbezier{ gsw /dsize ed p4 p3 p2 p1 dsize 0 ne { [dsize dsize]
0 setdash } if abezier stroke grestore } def
 
@fedspecial end
%%BeginFont: TeXGyrePagella-Regular
%!PS-AdobeFont-1.0: TeXGyrePagella-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.
% Supported by CSTUG, DANTE eV, GUST, NTG, TUG, and TUG India.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% See the MANIFEST-TeX-Gyre-Pagella.txt and README-TeX-Gyre-Pagella.txt
% files for the details. For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% This work has the LPPL maintenance status "maintained".
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-TeX-Gyre-Pagella.txt file.
% ADL: 726 274 0
%%EndComments
FontDirectory/TeXGyrePagella-Regular known{/TeXGyrePagella-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.)readonly def
/FullName(TeXGyrePagella-Regular)readonly def
/FamilyName(TeXGyrePagella)readonly def
/Weight(Regular)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /TeXGyrePagella-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-514 -283 1284 1098}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E69EBAE83C0CA39F01BA788A9A00FE96836E26
F08499E8C43F39E8BAE76ED0ECAFE0E5EA000CC288434C2DC7F6E8DAEA500479
F69AD579AE10A9466B201D560904708D60F99A9990A17F7A18E9F9577A0A3DD7
466BA14D72C5EF5605499701B317BEFDA980F94CFBEA6AFB3D77763016249167
A51E0B4A578644297B6FF155FDD5FE8409D4B4DB63485041A8A78D10E4B41033
B6BB55E5B18B6293A67B08B311A75240BF3C95F250FA9E9F8E8BCB3D0B78D66C
FDE041042C0864990FF303F28AD7549322181BC19522B07A66C4D22AE027B74A
CB8996380D3FC0C1B8380E3E1C61BFEC906A8C861F53FC79C7B5F3F8953C3C8B
E2E31FA1A419C5DAD14A1C616933F180DC3895436B2CD73C1EA399182D492BE4
E9A9077809D330A8E0D7DF459CD2FD4FE2B1CE7641EDE813C73413A1172212D9
D8CC95874D7F1388B6B717465604C08AA1550259C17F93F9905897F69BAA9DA6
174663348037496802184EC8CA6E0435AFB5C7BD6E67275E4EB1582CB601A5CA
FA2DDF83B543923C97BBBA3B07BBC5DA7EC8CE8A4FA31D7C0870455C5AD6A460
67A3DA5E93751FA3A865EEE499267046717131418AC10B44DB46E3ABB3A93BF4
1CC68AF68AA2A5A1617D0F09E13480C51DE6BF00F57BE1A6216E72EB32C83501
35286E6952207398775DC1ADD0A4E5535E4BF4589F969825FCEB6EF134C8C8BF
E361E01391D444139677075786531C61776B2159C19FF4D9C973A4CE6BE0FF6C
9AEA3540409C39A1E4E81FCCCA2182CD502AABE76165081AE499E7A0E7659254
F63BD9B241C58F194C140BE0A3B808FF59908F9FA0EDCCAC404B98FB7AF8EBDA
E63E8453CDB1A0FE06B568165AB37126B8A8508BEAD9A0A3F6309CA95A5181A5
5DE3EF1A115E5D0BE02B6AF28CB2BBD55A8CBB85149E27CDA501EB1A1DFB26CB
84EDB3AF401E6A5F63F496248A3BE7B42FC545726A930D73ED3CD797B91398B1
792D8778F669CA7524C037DE103173590DBB7B5603B8AF472A1EE7843E537E1F
460B1676AFE4479DE32CB1F9492C842E0190F012FC3F461A0419D9579C07ABBD
C5FCEE3EB4045489A99F3DAA4134F6FA60A0707929953EE6CFB6C2F8932C5C00
D78E6E21B6D3F28A024D16F6F39724098ACB22EEB7D1BEBDA6B8EF328EA76532
9B25FEE0A154DDA036BA52B84126D70B16BC2AD7982DD194EC29C4A096EC4FE3
9627D0ACEBB7C4599E08BB84F53C5F6383D5AEA08BE86A783BD5E0935B9AE0C2
0F25A9379E3924A0E13E9D2FA4B7F5017C5C7A63E930C37BAD138D33EFA4EF95
A80220FE72248FE394FF0E9CC2AD41E177FDC984EFCB4556AE25FD1C98C24336
7B2619C57748CA8822D946104758D289C7CF8ADA0085E2A9012986275483553D
8A07FE60B2E85D5ADA1125B5EDCA7293367D03DB34C8C4302985144A0D49172E
098A7BFD2248A1547A381B388A32DBB41CEED0EC58FEFB881A0DDCB63267A9A7
701DD5EB7677649A26D94F04A0CAD6BD84A5074B5832023E809B80408BB9B61C
2AB7ECFE3ACCB88E5E52DDE2D9118A1747917E6A9F211AAFB3AFA8C0D2EFBEF2
07CBA3018A2E8F6AA87BB436CFB25E01E9F870CA8523DCDF93D57CE57C1759F7
D8BE745BCA2104F0A28816B184277891B9231F283467DA24815820A6A2C9C88C
5EC3AE96CD02A7FBF899742EA3ABCB6D3BCED34EC348D7790A37C975F5D8C324
566A104408EAC417BDB461014FA86C383A1C9ACDEAFC4B58E6CD01B59C73A14D
BFB287B7017F6AE0F5CA4042849B0C4B472AF45ECAC8C709E28262C17C0E36F6
94BFF0ED77A7847F7C747410CBBA2473F586982DA54AA1B3BE277E804C6BA17F
299172AC3A4A3FC62C97AC1E6D882BDA8C2669F8B0719C21ADD52EB6C0E2F79D
B65997EBD308E2F0464B9F2AF622E8D4903D2EF8482FEF08751EB68167529E38
3ABF631384DDA725A9DF542AB4A9C67F423536F0D04CA26CED51F1B3A1BBEC86
703EC4F9FC142E94068ACC9773393CE624CDE8B2EC957EA523BD60F37EE2857A
FEC47E250048A24DC087117853336A14E2269BD9BAF06212037185E6744D5296
24024E35566FF0EF71D60ABD9581F43D1BC1053090C526CA1A8F1197FCE0E63B
E2711921C9DFD1802F2EC862FB85A143D7B299223ED8525202C31DD6731FC67E
56D594B8DC3681D1762E66BB265F6DCC34894FDCA89155E705CE487560549819
7A9A796834FC754BF88042FD98C3040855DE8339B25C51257D8987EEA92C452C
E44D0E6A37CF3696FD8206E691FB1AA84DA1B7F2BDD3E8ECCE1499F3925DACEC
43096D593409FF6CC8F3C38638084F8F4F7DA8B4AEEED9218BF797848F6175B9
205607469FD3B0F0C32108EF8BE46CCA80C618C1814F112E445F32C0970817BC
405762329E77E778CF557909376EFAC08A9B5DFA2D0042DF3A61B0572821BBE0
55765DAB0DAC8449427E9AEF869F741128948A218EDA86F30574CAEBB8230076
E996C9474310F30CC0E33018119B0B5BFD2BF4004B8F84D28B1EA00128B2C5D7
A50545025A36185A5DC746AF78F24F684118DCA62967305CC6725518E383D2FE
FC382D720D3B24B4BE61C88E429815282D632366039E605D6577A03DE99BB78A
0AA1139DF5414824E7D483BDF37A5D6422EC02E9D3ABF91BAE6634FE1B2DEAC3
E051D096CC40E931BEB074AA9E32BBFA361593C34FF2683EDFB240D683186FB7
5C5EA1BE174E29CDF3174C3B55C72742DBAD656CF6320CE66934AB31C2937D2A
BD9120750E6F5E40B38FAECD02D709420B491AB1A29EF55C6ADAA3B2B49B17F2
97793FDA280740AA7FE3F2ABFBA17B3F0E6D549E7C6D13BFC785759F33FAC888
F976BE53A8E2F5D224FEFC2DEF84ECFA903E1E23415C912EF1F70CC3895F4598
A5BB79E23DDA5C982FE4D85BBC15DF0448A6610E1F7FAB897E1D4B3C3DABF1E9
B1553BC56666646FB94D3EAD77C5E88355E57BB3A026D50C7A88DF5F480147D8
7DFEFE463F72D86D10F12F7D242B1D2696B3210D7958A6DCD6B26674924602E5
3DD9BFD2DAC29A0339A42F6A342FAFA0CE1C1EFD3262B711994EE7815D92C1D6
151D1ED9674CFAE192F7CA09DC02F73B7E2378CC6217567E42300CBDABA46A56
DB059C3FE58F0EA76E839F5BF88B042290099F97D70AF54E554A8F28FDAC5374
8FF1ADF2D3EB2B2787C65B147FB7AA49FD7B056D8E1B1611D62F6BCA81E275BC
94ECEB7B517E88F6126B8A392F99B43474D602FB6D02F57F18066ED53549CF9E
7C3EF1A52D75E95EC194042007DB1738809DC388263F3567DC429403619BCFC2
9B109BE23860C670D5EB5B0EE7F8FB839DEAEA332CA6D50B5A6E3B5AE6BCCD22
99EB27740073D2F18F5E535CF1F0D0D082C889B4F6866BEC0159AA49D316055F
12C89AF17686542CC2D5F3EC751F76B0F9D703994024A3214877736FEBD350E4
48A6E5401FA6479DC0309A89C78837971855488EB55DE59F93C37C5FC2502E45
9B18ED19CF7AABFC7D459F2D762D9F0D08C4C68BC2EEFBF1876B38E8830BDD52
A4EC16C797B31B0006D964EE87B70841BBB0011D8759ED1E30409EA873F16CF1
57EABB93758D7B49B76297E827694FD82DFF58B3F2848D455ADAFA8F7470F7FB
C21CC470A32CFCF7AC318CDE98739B360390E9A46FA11A61F98EE74BC9078AD5
6EB57ECB1A493AC71229AE3B0A5D4BA4A68C8F9467EAD47506D2F6B527581625
CC981E526F1D803C93B2A2A07D4200535F51B75B74C96A7C7E77FBFB92183A18
2F9A56C4A9F4086B2547ECC40BBC6A204C4B3EE9D4F4361F8DF9E1C1A6D7A83B
5BDAD51725CE38479A8CA61A5985F7D9A1CF5700168C2951654FE508877366B8
9F6FAD2BACA49FE0A880D24293E3ECF03B4AFBDE439F64EDA6CE61D9A3E5F21D
647E2546E5E8702729D1144DD5A9AE10041F7DE56207EB2E7480E1207329949B
FAA4259A32E419C50C2372E576B0B39D5736EB891101032D9E0E2D108D7284E5
14F58BFEF59AC638DAA66BDBAF071B0E45E949C8F19915055E93B98332111C0F
9795DB579244560561F8EA96BF0A4F3EF776206C2286491A09574E87F22C9414
7D64BADE52709C04DC071AD33B118367E47662FAFDBE73F8F6F99550EAB6973C
075EA14B305C05513E091E4820C12FE47E3154789E02FE363C31913AEBB85E36
FB9674ABD86A83309CFE771F4A5F8ADA3241669D2C04D14C4C65A43095F7F0BF
8E2E5795683F27D769F65426702A7FF9EE61B06E514A1192EC48369810AD8A1C
ED8A2A563F68C1C2F0196F30AFA55779A6802E2F6E9F9BEDFEE780E040423DDC
5E3B4876FC8A9E07B69C1C3341D87218C21F110ECD864BED08172CD2FFCE0796
5DDFCB27DDC8C34F9088C8FF0160CC3DB84FAF35CD8A0FEC49676700958F17D0
9D8B8D37746E5AB46052350D29FD91BA1BA0D16FF764CAD09F99A6F73C71DC1C
0D107A241812DE926D5F5B853070BB58B87CD0844E56167A11E2957272239B7D
A8B9139CCF9ABC5294AF21AF58E733AC29B61D4A23A2E4D3B9E9A2AA8E239901
D2F91ED2189FB5941387A78C1E733A92C8B97FF27348B1CDE9043672C339976E
9A138108F567FDA124069BD4FEFE2F2683CF3037B06DD775397C844678989C90
2067EC814CCC3D94B87520299E851534408F39443AA946A7630D18741D31FCBA
BCA7D4C9D90F414418C714D6B0A0FEE97A9F47EA1FF3C98550BCDC5427F0D3CC
D9AA1189F6A2A8844B746B51555E8577D0239698FA963D8E4C13C2C86740D07C
0C3532B5718352E4CE45863BEC1B5E8CAB530416ED50ABBFE1FC07FAD8542975
DA911C65CCAEE98C1480CA3DE7FCC667A5B810B665519E7E1450E00BB9D0279C
98F21612DF8E6B72A5B8C1F72A3001FCD5BAAE8A4A437DFC27698E2316852222
C1C8FFB4B6B3CB02A3A4A6015116106EEDD099A0F9CF438EAEA8C24604C10383
1C4A01D44B0441CDC416AF42E97F4B023C13C1003EA18EDDE5176DA46569FBD5
4C4EEFD5C1CFDB30B78F38C77D371ACB18587F202F06D6C0255E05FAE3868112
C2C8B5CC5C479BF2FE0868AD5FEDAB9A24D99EB12F66F5579AD2625B70DBDDB4
3739D05EECE15112FADEAFA8DF7BB61DFC43A74DA16147589A2D3DADDE9BB1A6
3A4047EA20DE923E4D15E091902C8368DFCF9AA0F11EA6E3E3EEAF334E7C1D6E
09587C4C0799B8DF9651B5B2A9B70EC43DD61CCBEFA0376F2EDCB7189D780C43
5427C9861CC7439AD6FD273A02C5DFAF14A6E9660AA8253D564A36E96020B02D
CB10424212EA9016A34634CF88893EBF53D8D282F0283BE0BEC782AE5B29D62A
BA4BE9948E84025FA69216D912E6C40FF0C0FA109631DB82CE149A89C4155F36
68EE1FF7CEE32749C91435CB06331F25F4F0DEBA6297C1D4C123BA1476C89AE2
557822590FF52D27A6D375B5B3025EA5A9E1CAA5E94B0856CE64E50BDF59815F
41918DCC74EA78B269EB284A42234038F12E5795683F27D76DC8E6349EBEC46D
48139A8FC9005BB2A10799477D1CE90B29255E75A98EE2F7A8F5203DD557B868
F8B54699D457DBEAB698898B8C456B760EC883DC7C18994FF414A645A96F5532
12C06967548E00ABF534D4380E4BBC018EAF52FC4FB95130181253E90EEDE126
8161B9A03DDC5A4D68E5CACD173F5A11A8D4F968E95FDE6C8C6BA0949F8F3155
9C8B61790857547C6FCBB35A79610367CE47D7915900278C6C485D0A6DA4A267
B12A56BC42393BD0087D4FF4678220E8486A0597950D6FB6CE60547AD516F914
350B360D86A6335F4E0C6659CB155111FF2286AB9A138B24AC8D5E909A21D522
34D69B17A2799EF97B8D24D0405E92DB28049D05BE51DD02A176E6F63445CBEA
8CD0182078F31BB1DD166D07EDE6454270BE0140F630A7DEA22E042B00542ABB
CC4B8AEB1D08B5EDEF0E0AEBC01ED2EE807CF574D5CAE26446BE700A33C00557
40E64E284D4862C26B1BDFD5E9ADEEC72918FDDBC862112A12F20C4EE4A1724B
ED4905EDAA8A46A337EA53E087158572BC183043EEAD380C9ADD597B88F78BE3
410F070BD80831BCFEBE729C666E929DD2CC04C4F66493A56A4D7EBAF007CC14
BCD053321843A4D058E2997B621F6D7A1F58967629EDDFD33475FBC1BDC73434
2EDA77140BDE35BCEF2D18742DF7CA2D119CC12A3246B9B5EA106E3A8CA48CCC
63733222D0687E1BA843C2E0831CC5C994129276BB14725E4813E05782683C87
7C7EC4C86D6FD37806C58AA7023C4B88777F963E88805F90EF2EB65FBDDF3770
3668A8DAA93ED145F1B6276A386CDFE1004711FF0921732F66788A17E10B2C43
4A2821DE83747E516D0557F294B19E966F94B1F3FF879474E9EA34D55A9EEB4C
DB4566A829619C268D692AC008C42D510A67435DB54993D5EB15C426BBCB0A20
D4A0DC078BE75C650369529073D57B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC6E2AB32A13A3DC4FAE0E34E485C31FB2952DAD2A6117609FA2C35C2588C
904D214B34BF4AAF793DB9E52A9043CF28BE96A872391420BFEC53355E4FCFBA
F202BE44230BB0ABFA6979C0AEA235474A2581C01C4AAF34A4F56C9ACEC31822
4D07AF1DDC35BF7074ACEA54B605DA2A2E06762A2BC22B5323164D1C34DD7EF7
5A885DDDE88F2D9AC7AEF418EF47ACD1255068A21969742C55D97F1EFE5E4B3F
5BD9EE970A2FA1D9D3707D84206A483AC63F1FFD052E929369E76CD017089645
873DC47E51E1E4CD774CD4EDC963927D1BA8B8233AC009EC59392B7E3FD156AC
516B94E2CD50F72FB1F8887DA5CBECA34B98130C77D24B008A03876588D352DB
B7DFC3FB3B4C61697016CA5F5EA8E8446A880E4E1263408B0DE3C9364C6FD786
17DDD94B5EF539C729DB9E22F46D677CE0ABC6418B8DE09FBC9902242F0363BD
8FA39874B38A5773E679768FA00E8513DF8F0F44E93375553EA81965C83F6CA6
55B97F2D3B4A92B34FFB6273EF4F8128FCB12A4F2C8D13768D878BA6CDD1B8D4
BFCF8453386A3F4293ED9D24223AC99E7507E322CA3BED912006D4D60B9815FD
D84D105081A4E6017118C37AB2FE439C0785F4006CB6D67EA8433E109538F61E
5FBAE613B8F5874447F68EBF491EC597BBBD57C39F0E777BE87C953965460BC4
4694D27E18F6CA7CBBF733C7B0F74F32D282586435F5EF207A09A1D421AD8D21
74B4730947637701EFBB2FBA3063483F9E84B74BEC5F208C6891EF2A7E3D6BBC
E8E929BB14FFE9E74CCF4D40EA659C24098088BEA26BF5A725FE56025D1FCF96
F4C2DD17352573C90177484F7E742B00B7C92F1E270A571B4377AD4768FBEBDF
CF6B49F09839B935B1F7ACFB00906E74846306E52E324E00D300A78B984ADD83
66577C468B750A7C0B3985DE4F4E8AE631059F57AACD49F7316BB2BB3BA9493C
94D8E05764EFE7B8C6FFAF955E78E4A450C722AF53D42EECD5FC0D9343070BC3
92C2A073CF94872D90CF64E3BF41013C78F4A702BF5FDE5C18DBE67DF812A288
13BA8D3D99207F91BDACC98378DE1E79298E5E300A394A9E1DD257A096A966C5
27C855E3CAC5B70BCD5F437BF4593B1BCCFCEDA9577FB496F37545129619BA02
0984777DC32533D1B154381BA3ACDDBE66CF3FB3E4038F50162676F6D777C370
DDADAED2C7DE80A4EA0864F54833BEB33867942B175B089E488167D0DDD08DEE
A590BF99760E2DC5ECDFCCE4922C000B0537FE9E97290AEBD3348B4369F148C7
06C928A414FA1FCC7459F7E2981B87B73D560A8E6EE0BEE3408D38C8E6AA8174
2F6A320A79C6A1C23A695A0C8B36CBEEC17D5A5F5EE779C967DC7FC302C4D295
E606E3BEB5DD0B068D6F6FA69E2B7D777E8A10DB921C86FBEEB0F238F7A3840E
2E3853547C266FCC8764025ABD321F25418074615F70EA7551A2583CC1F6D4C1
D2E5EA316A091C458AD3966289ED67E397298427A0A7A59C4ACD748A13881C13
0EBDFC77FFD9DB30324F35E3F41F7FCBEC699C2392CC420D25C3BCF2FACDEFFE
B144E451C6F8DD0ABAB19C9AD30841D935181C68B2BBBBFF91738A9FCBFE2EED
CFB12B2C71E5F546F639121EC4CED70598105B6DC540B6BB4741303447EA4515
043C418049903E3F36885AD45509FC3F1F0A4539B0B98F7001609622A6FEC4DF
544A81A302E8EF30617E269E4E9516BDC07982DEC8AD1ED4C507F892805131DA
E2BB997196CD7EE878F929BB0ED1195074A3E4DE768C31E35C395C3BF67A79F8
B1AC292F38AB2EF4951D3272E4B12630C2651431B3554ACC5D07ACEA1E0C7B5C
F8C28D676727C1AEB519DEAD1FCFCB2CADB6C7923C95FF27739E9099A4B58BB5
3E3827F465279870CA837918B7C9950EC394D6BE34C01E2317FA5E3C8FEB7D7F
475C4DA50EA2A8F3E6D5BBA1E2319C65E68A4ABBFD0EE95DD118A878A8B14021
16797149C20FD36B31583A225EEB2E2C049A42A9F1E6A3512C0854EAB18A0ECB
0B80AC7141CFC4905B7C195F49CD4B2F3040B545FD263655164B7F2813197CF8
F595F1555AAA669C28B477CE801ABB04B79F4198FB57134BD4E40FBF297E85C3
F343EF9065281DCEDC7551A0B9BD4F15890A30994C0F31EA7BFBA38FF070F486
122EE08A4870456161458B6C93A1602C37B2A933234276082E17993B297043B2
F75674AA08FA58702173BE413C71765E586A1A44663813D94E02A66EA4313502
3D5E0F563059F9959F021413C8DC613D035CBABBEE7AA471A403B042E5240E92
4354D68A91356CFF9DBC1ED30C7DDABE98B213EA5CA9F0C24AC1F2C37FBC4287
049396532635B98C5018A15684F9BCC79AD6DB75ED819807118332CDDC0D88E7
CC1CA9CD67F3BF4F3FC34FBAE47A05F1DEF0CCA48FAB214208284A8F508D04F3
55952F156ECC4E82D4CF8E6F87B2A2DAFC69673E1FBD1C2A7E742F52F8B85D78
805A95B8CB191C775A2DDEB30A56A5A2A373A7E4D303AA48061C948BCE3C0DF7
88D2F6CD23517B58BFF4AABBE7F7351840EC9E4553B37EFF31DE1546675AE168
24DD84B6CA375598B6C439A2E90D00700984A69B07B477D8BAEFB53D58434B83
8046CE48074F53D785E1D0E5068ED5F42F2186618ECA4318D68752224E034061
0A27244970757F3C25CFC3E853E2FEAB178FABC8F6A233E02A715BB6E2465189
FC47B9F74D7ACE4047CBFB95D27536CFD0723A39C93D6B5D08E759E5843F5D3B
F0599B1E4A6AD4E0C2BAB7AA375883C30B8546DEBDB19447B728CB005C50AAEE
736C1DE0B08E3CD67E6B7199298E98AB125CA202B0A0F6CFEA1489C57E420AE5
E2D619D2EA74D6613E87DEE38A2A9504D47D4E08AB2031162344AFB0255A91FF
7A44F6B705CA7C0B29FE1520A2EBCCD2D329949F213EB8A9D370EF0A74E77033
4070C295EACA3E7EA4F5ED92E78990A082ADB3A32F06449B2E8169F93C1362FD
1CA679E9372DD0CC0E22DE1195E38921763974370ECF0564D6798D9968257908
47C80C9A6CD867606E45BC24E1077688C365888921E4560B5E8080FF1AC67983
B2E5C13CAAC355E995A962D992766EC4998F17B7D86D4D6F2D1C5324484C73C0
5C61C3CFC784E76617954E98B783439F6756AB0D1D5EF596474B4B8B5730D1EE
3D88940F645CC893A8ABF5E1A2260C9C9DF9B2813F3E8130E33961FE59835F21
DC12BA218785AEE36D2D407C0089818E3F82FA42E9473ABE2F9E0CEF22B87126
BC9E7E152BDA1C4DF31F6BD83A33C2716535BB77691E1AE571B2C372FD96C8B7
E21FB1441A825338BC225290E7FA7D4518CEC7399BA752788E65FDD0BC628CA1
650FFF12D06A00AA0A625ECC8FE09DB849CB9EB1254FA4B6470AF1DF4F4EBE91
1581EA3BE89E4CDAA3485C5138CFEA5EC147472821B827DC3EC27D239604B5D2
8F526674263F62D3E6D262F980CD3240CACFB36B9EC6926EE28C0C9CFEE354F7
5131FEC6BE350D2289231F0D5BBAAAE58386D7A6D4D54B096463E1F3B65E79B9
6931FDD7AC1C4D770CFE91A1F649D760C132FD77024F7A09961648C983641D63
5534EC6A529CBF4FCB46D727A6670DB1906E86A89FBBB5BFB2277B07A4EF8A10
54F86D60D030CB2C9CEC2CBDBDC9CD49C47C8E31E70FF75FC4E2920C34126927
A9E59B7B92FF780C412A606D33C073986B0993A6BBD801CA0B0320DD3970FC18
04D241E14CEBFC3F1B5CE76BDCEBA951B61BA48FC22AEA6EAE2B2162EDEF4A5B
08A98A05DA37D8F2B76F82DF1D2DCDA032E441ABA40CB4E9209DE21B799AEE65
5E61E18CB57B81697B34A2E1D0C22CAA7BC9EF0A2052A9FADD2B089FDCF83ED0
BB7B63CB86D6663189688C6E5B123733610842E792D7CA621477CDCCAB9751FB
A2C038708BD7A51A7B8BC217BC10B9D4931D81DC972CA5A76E6E9C93291AC0E1
4AF8C3A05017A993D91DABC265A39EE4A494BCDEE075FE480F805E344EB63D55
8B7F57215979FA56D641701C2AE4E06966C4A23F3F49740365E82A7A29393844
0D2761981BCDDAA06C54247BD18B7A124F020F8BC59461A14B4DF70310E15E6F
AE2219B3E9013472BF8916009392AB367F909B8B374E4975E93D9FD32DFA0AE8
4699D18555FD0E55541282EAEE8B95636805412E79E49A826C8A25BD08317D4C
933F30D085D52C6C4F5CA2C9BBE16D812CDF048DA2E9134E43358A1BE68E4C0D
C54C87637B717160845116549D2FF228A4E253490F1AC29E479B090CBB8C81A7
554DBF0C2A226014B8B3024CE88091E89337349C6575A8D085F14DE63891EEB8
8FBC9E57392327D0FDDC6239FC12D3BDAF7171A45B6434D91BF070E12C464FD5
469BB95E305320B7D6A69CE1B5FAE803D24BDD833890D7B9804A7F49654F2B9C
C5E6F2006EB0C32DF2963C83147C048B07CFE453C8070B0CC35C26E83223783C
B795608B289F60FFF8C732825DA065D7C95992607C9E3B94C6484CD39D18A81F
7389979EF408D778E57338EA0394B8C4E12D9F9E97E5DBAA2871665E9B2C0C88
3209CBC98228BF9EAF57081F57DBF9D74E7C301764186392FD886FAE8519F181
F4BE8DECF390AF8226AAC25D9B9E49D08D1E7A627C3FE5D8F062D7FCBA5245B3
8B7B7C8348446814AB3ED796B8189A3F739C72975C388195E80359AC0613F8DE
361C46A55BAE9F54A1BCFE5626C854868F5A4C11295A73FE3649A98308BC5906
C1DA356869FF6D242F948B6886F383A7EA6968F4D04A2E3CEE4A15BB1B966FA7
8E2DC624B2C253F76778698BD1510D509243FD904DCBF759C9FF16A8E893C28E
F549CA3C0F7C8169C6EE3DAEC24B4B105EAD1D89EE81F7216AAAB06723590B40
1A2A7208E3B37B9CE3F1D0C616D951BA702DBBF98784ADE03A1883B216F1DA8B
D7F20B32D5A200D311AF3ADBE6C3F4EC3510619779B08A7375452187D66B2A44
4EF6551B450FC9D4F3131E5B9BF09E2EB27D88CE83FB5747089FC38C3033DCDA
518AB8E4A92179B2E316C10E16CA1CECA3DEBEB081964C6150ABBD5B3A4B88B8
F215CF38AB27FB81EB16C19B13D47E0AC60C83641CCC1A045E01E4BCE7F0FB33
F4C1AB8E43790762CC7D2F2B08DC5BAC86339B1B853385B5877A20D4B5E9E26C
70B028FFC0DAA4617F3885E9F571940346E1F33FAD7716A5520599AD0F5DCBB8
66F3148AE22AC1F787677CDC3C2F1C7987BE056BBD534984BD9B8D746C1800A4
C8C647055A0DE7222574BAFA9CA1468929A0CF94B1182CD11BD4BEB7BE77E3FF
CEFE1D9D56A1660DAE90B755958197A3351553D461A143A594F2323043C65EE7
E84BE6501F47A662C3C140F24A30B1C3E6AD87C7D4424486F4D2504B044F4BC6
9BC7C0F4C7A421734301813921B971F6B6E7B41F5AA9F64AB60856430F4F9281
E132BE2BC5BBE9764347425A5ED87773C6B3A8ABC8ABB13ECC3B249F1878A8F0
9B61D66F627A97A3CE8303F1B4B7FD2E0A483928FFCBDFC21791F8E112853F74
C475451EBD128D0BDE6837264D340A57DCAB2B635F85832FA320CD9FE204CF2F
99B438F1742BAE933D86EF556883CEC750C615EDCBCCDF3EF3EA4BED366D2CE3
6D64EE6AA4C8D0239A29AB3346E367519DC406C943B14745C15A208A90BF3346
BB7DA1576DED9C672D853F15B7D91DCEFA7321F7B451B5511501B697644EEDD4
DD9074727F4FBD3C035BAEBD18239DABE4495DBEC3754928F3BBB73309C530FD
504D95C93430037C74C2F610A11E46A75CE560AEA4C017EBF96D17346D5F23B5
ABDD850E11E9FD1C6DF7729E6E985765D12468E5315C9285436E5868E756EFA2
6237F1F33881825C3555B50D50816A1C2963708DD3E8D4767F4A3E61B91D5E88
EB8E3014E87FCF4E84390FA700EC0B666F6A3BB1C32E1B4353B076358780D154
7206329F302AF6853E5C1A3463E51AC2C563B89563D0254194DE000681912B12
B624569A5283A557A996D0EA15A6C8815A66967B75919E61DA5648ECE74BDA1B
A604872AD6C5271FA89B43882AC1DC1FD13D5DE9B840FDD96372799EBF4C9FC6
00AE4D4B4B8C49CF740734665C5887D21F219A295EA233C3B4C78839DA196812
2EEA8D652BE7479621A99C4CA4FA1B728FE7ADDEE2A72866497FBBF49B8FDA5F
F5956B73AD1C6C426CC298540C1441477B022F220DC7C268E27E4F531D51381A
8FE29323DA6268F8E9C1C78FDDFA790413ABD0E658789BD4E7377B18F878DB2E
F1C5A129EEDF40BF23D34FA3304DE0E78D628646C32C1D95C0DAD9F3543BE8D4
9099B46F4A9032FCFC5AF1CF8742A92AB81F5C6563A0C06130F8B2A4308CAC72
5568AC539B2AD1B22427E8A707179011BD1716C6763544EF3D5D6E29CA1532FF
0528565F98BC1DB703CF34E31E143B331C43EAF8A50369B4069D631047678177
7382D05A089F2CEE01CEE5C2AD7686A3C54532B07F8856E3D629286E320BE4C0
0D9DAB962B34C9800758D65160325837F8FADACFD56F12ABCC22E480CD066D10
196C05A0EFD97EE57F50C5A333B3BCACA4693DF0370A98042E527BD65EC1E77D
32A2D2912E8D5823D50EB25F6836C91B80D273A703DB7B17BDB17E55A6E677F0
AE7D565B973C2CA3BB7BBAFD7E3F80C8173653E1733940CDBEC9B476678A7BCD
0C6AACB88EB0F643BFDF588DF93B6925100D074E11C6D2880421DE928EBDD1C6
675850CA8195A4F9FA9C539B62C9F300E70E2954AD5D7484716FFDE7B882CADC
56552345D696F87089A6CFE99CAD9971037145AED0AE8FDDB40713F3180FDA6E
9E32F903296B80F87B179719D6338755949630B4A8DED24F62FEDCE93A17819A
13DCA189C24257B2A2669DA3E3C211A89E16DE5B0C372EA8DD01647B9536BBCF
C673B6BB38C9AF59940CAB5680A26E061D2F6093A6F2F77E16E2F42FDC0A048D
867C62E534D15F5484305322983335D6F25B0215755A67136A9150E66BF94BF0
93229E705A7E0A796B3892A48FC9415E838D72FD3DB1CA1F2FC81F7236427AC8
F7B54DAB17D1CC3CA7146DCC4CC8B141EE9FBFA7489C607DA5A22CD9AF6BA66A
748A34E75236B609746FC990903CA7CB3EE87CCED759A7F40F46B3F51F7CBFAC
CB675FAF88AD1F9536CDAD4CD389A66015D76FE4B49C255C2A7F57EA5A8AEEFC
1E6F258AB9BE90F669F59CB36964C694FE3DB683F23CDBF868019992406A20FB
6884949182686C7FDEE08797DD4051D79FF8D818EA9EFE9C0D6883AB1D2D1A62
4F58B382C2FE2DECA6AE8458D4ACE5ECA5BFC73C09D36274C91F1149C89024DA
3E3E05295CC232D7FC1564A39987B28E2EEB041DE92DD0AB726519FD557F4738
6A45E5EBC9E125A002A6E1670ABBB6135156430F566A6DCF28A6675A0EB20A8A
3263C17D6C3EE12F078752D950E2646B72C53DF5B583E2B3C5703246292BEAD1
05A169AC099700E454C9B0FAAF6F2A73D258FF0E54D3E6F6B2BDA855EF11E75D
72EE35A7F1FC8E2DCB0757DD30639113DA11A98FB90364F008A13B1113E04277
6D0EB6C3A88D10A1DEF8E194E095090958F9C702A09B49ACFC71131694C405F3
6C8F710B467AB3742A8E686374BC0F68375EA6894B275D5A948D8B66A39553B0
19C8FC203DBBA7CC772406EC04FAA1E8EDFEECC6770AF1390AB72161DF14D70E
B6A90E0AD0321E00238A9E1556210F58DB2A6ECCE1C1B58BFF9251A13E943770
0E860825A74D0304AFB61656279538A4775E58D6277066EA00D3D3EC9086A634
B1777E6DF3262B44164B0F2D2C89746F7D08C1C13A12304EC9BF237A663EF411
DC9294D5DDDB01423C0F02835BA74A5EB7D0042479530B5583979A82009507CA
1FD5E4379CEF4E1179660F9ADFDC046B9F7C8C30323C7B58D47C7F601B0E3619
7BFA431548DC233902D54DA505066E35CFEC16B343082BEB07C2C0F121055019
3785E71FF6E51D8D14CFF9D60B39A6E2E1AC5F4EEEF91E7F463E1FDD96A7DAAA
193CE2C271F8A7E2F7706FAD28430F002064C0646D8CE2956C78B865AD834911
C1A179E2C5959E83453029710375D9F063B335EECF830F146463EFB564A1182A
8380E74F8D4D4FAFE246FEF66C656BAA600EB06447F7DAF2599EF2718C3BBE73
7BD085229CD7C0ED63F5795C0DA5DB14593F57087E60E18B8233387B64D714CD
82B634562E96B8EF8C66BFBF49C4C5B41E4E69FF372CC787C1F19B923A37FDE7
C43B6BB0C8CA4D1CA181E349930010080C12CC74EB8C5288E168E18C8694A632
4CFF9BE4E7F8ECC5B006D8B46997F3DB8CCDDE45B703A9123F4FF7600EC58DC7
AC4AB2E3EC2E57BB179CB30F49B9CE0122F60874F87B8C979D1FE1E23F0AF497
5C9693D56334B16EBDE16DA9FCCCFE6933499EDC15F2327CD853850158CF3C78
E858E34B8CFFDC7A128BEC0942A5AB6F07A66E71FC815A42A6DF5A5705776B4D
50204F8535B8177D2C78A4B7012E987306F7F613AE6FB99198C7EBB7350B68B2
BD13F989B9EB23EE3742A95395A0A752E88F6C0E17E6B8D1A3ED1BF9C5BD3CA3
0762B5DA70D539071FCECB292662FA2C9668BD2C1B024F9FD6F413B14CFAD4F0
2CDDCE250F72D2135095E0ACCAB225D733E123302C0C9B054E97386886E95BB6
C31FBC84A663DBE4E3FED3696B649CFCC81026110451EF81FBFC0F2486C3B71F
E0984CECE060A10A0C56EDE0671F2A80B7BD216B32682375DF670EA86EA88BCE
1DECAC155774678B4FC74C5658727C392573F54297DB282E268EEE5C776507CB
FFD885C109EB32CE5162701F37078E684AC60B650D0B4FECB6021EE5AE710302
645D702C3A5010975536EEF28F9B03CA4C49221E676C84624DB5A8AC0BAF7953
33376EB4C186DD1A8504330449B6F5C9AE98647776122A26396D984DADE28954
EAA105FD12D42A826FCE49A38C299F94BAD0126091EF1E08F8ABBAA28E045FAB
03CDAA01086862BCEF11AF66D26B9A0C604B02867C68BD8E5FE9A45653BBAF2A
5DCA560DB5B9FF48EB344EDD4DFED6DBD4621BCAB4F4FA38A1802EE49F8E9FD8
E30152DD5AF9200F8AC8B8FA39413858E8AFDF2F55C664139419373923D5BE1F
DD292F80E973E2762D37D0960B0EF0C116A96A4D934D0D15FA88CD2ECD418B54
2EAF9A4052B1A382AA2E1E1DA244F00DDD16CEB810C92050093B5BC70574DCD9
B6A0297ADE74569C1545A540DFDA94B1438B4AEB72DD3680CDFCE4008A7DC06B
FB26D9BBF6760D67B53706A450EF53FBB966763DE87ABDFF93271EE576454A86
A0C216B224E0DE81D66ACE4060B120AD06744BAE758B478EFE5CBBAB5138D6E4
ABAE21C964DAF1EFD40AF797F32DC9655692C15AC45C83A1E4F9892E35518CBC
F295C49DD50C03E7872C0726177AD751C15EB0C31F4BA026882889C2647A913B
44079A1D2E5EAF73E046C7D983CB07631FAFC662E342C0ED08ED843922205A88
16967D58E44E9F69131AE1737DE68EDA3E2DB279754D23BD362DD1F65C075DC3
2A70F10CBCA97BC083BDB2CAFF3EEE454AB8558EC865DEDF781D4A95D889D288
199C53AF6BF8905F11DC81B354C22FAF542E180E9B392729CD435B3D4CF6C5D4
52A51046621D36448B5E74992821556F4E2234E00BC6D71965ABFFB6F138BA97
E248268FBE788A4214863168A679D4FAD134E4D2D0CE4DF72001C1F094DECCDD
9F43AAB88640D0E93479B3B800BFD398B6F41DAA0D6861C66AA7F5E3299C87A3
312235D6DFEDAAD93A074010C5626DD9470582E82C17144037BD2EAD945FC6AB
CF3ECD8410335AE6CAAA4F72AA6CE8CF94DD353E88B786F963BB76469CF79378
93E401072BDCB3847169C1C373E21D68EF9AC2B667E14A61934C2525EE807295
0A606224285C7B6382E516245ABC57E5FA7F48E7D337FEC7836AB3E337D19053
31FC5180AAE08B728581AA72EC3A00921D30E42D3DAA179D9F9B9E38D3719C72
C2FB8B8274AB54A6853DC6784398A6BC3BA385A85AF350AE717A8EE630761C91
67994D589C2E70E419E37CF0B527D14F008E134FA0711FE40BC8A923469A2C4A
766B5FADE47588232C1847141D567C22A1B584D02722ECAEBA773E594003499F
0F90FD53C30FDFABC43D378C834B1060E5A374553F2AFCB00F41988BC06739E5
5A846DE436BE650FC8CACE55B67C8626FF33812EB9D93B58792D4F9ACD92ED5A
79AE617B77D886B36E1F324135371F2AA523BA4ADE325CE7E648920DF308FF9A
C28843C852C84769D1E4176F64EF3C2D266ED2B909E37AAFD26CAC14916C11B1
FCA1C171B7B183EDF89D009E5F27D73C67B9F516DF05CB1C0D2451E712783BF1
258AF19993556A1DF4CEB57A1882F307F0EE099AF0806598A867C0F26343FE0F
315877A06C567634B34A12550E165635B9FA80D08E4430665EDCEC71DC39584B
C7A6769BB321CC7533EFB892191B63BB1087A81F73D0BE06E4C23FFEF822994D
21D9B4EAEAF81C3AE8C464A89F33E4D20BFC6FC0823EAECBD2ED27213AC1FE61
719E1D3195F2ADD125EBE4946011655C21E22D5420119C91515AC8E880D46175
AB87E1A511A61643A607CDD14F0BF896E4F5B4B333E3899664CA77945407382F
699101240F732E1E09532BCF005A05EA389DAA2721AC6E6BFF0015EA34785044
2648032D0FD251B7C5856581C1D555F91453686F9A016F26BDBA4BF29F957B86
82D21CF1CCFCBAC8BEA44843365AC1B832D55382E1223B42A1C367FAAFB12FED
072BF1FA3284186CC6BA6A41105AF4BE60E0FE5C1E45077A70D225C2850EA487
E561E61A161ED1D578B1F169D45E6DAD4146BE77E249546AEADFB3766EBFF440
E845CA2D2169F8BECFD87DDB09A10EB5D670A2E6F5410CC989FA4DBD1AE71680
5B35B9CD7B1BCECC78609995F6158E55DAACCDA394F73517796C22766F6955ED
C6E3E149E0E45A93426F87581BBE64872CC3BF6225EC422C00FE255F71C3EAD9
79BA7BFDEC421CA3DAE77864042EF587A6D6C04DCE664BF83492D161407B7554
77CF92FEA77C09E60D39A89CBC3CBBBDB7B858A7AED252C2CAF15D3A748549B6
F6A61F79CC9DA249FD5C0F6DEA635B0822CA65801E9D877F10F7C8C0EC1E2176
DFA7C624EA885430175F88C95D871E2F847F4D28ED2EC4F11DD771EFB1ED519E
2252A8110547FD77535725F195ABAD9978D951090105823AC61EE692C31077AB
2CB981067990DEA8E620009AF715685BF81CB8BB33779F8CF3D37D34429519EA
CABAAEE6384883F21D51527BD0849978D5C13AD7388AB725051F3287EE5C4D96
208F635820B8EC24B0F3B41C828B96A9FEEC29F590EE857C91C555D88B00E141
0AA59FCBC2DDFE67B17371ED611F3E4C743DCDAD88BEF8B3F7104BCAA6E752EE
90D2B38E602B8827B368FD56FCA8E01B8FEC2384E26B9880367D918167433D2B
D104B323DEF03F10A6716CDBFCC261B70180B57B67071A8CFBB6CAC323167D9D
96DBE2AB54293C1C43ED4906BC6DC19203559700CD83DCF3EF58FE488E489B43
B91F8C3F67B176705295DBA064950DC5A7D475DC7105FB8A840D893F79F32304
43D11313D6EBB935EF78D5A71A87D56E0B63BB3E403B2EF8C1E77099FE3A8F06
57B4A63862D65AF4E8D4946157B02EFE0D82006F947DCD8E5870230E9DA69ABC
80788F2F72CEE5F55948AEBE364D9758FFBC1925F2D660C815F17983702788B4
A5C129CD1701D6B2E7D88E02A47DAEF3C721575FE10EB585DB96F62E89B545CC
8CE8B786D388BFB00807370DA7E82B133E9F6AAE0CDA18F2428EACE52EE14B5F
E74E96CE9569BAFDBE642C963411707E41DA572B2601547BA03E314D27C43C08
B7B723B9BC4EB7C9538A2F895741CA7890793784480596E2853A9922271DC7E6
EE3F0F67E57B4526D5861D0184F4956DB9D9BEEF25BF02427893F791D561FCF5
AAD0873312846B070B77C6D79C45080858E200645552C9A12DBE0028DC8EFFDA
32825936EFC946B1F317360AAAFB7C198CD8DBE03A3CE7728D8819BE49A304C7
DEE0E44D408757AA03FD00D0167C762789DF19424213B4FC74A1DBA9ADC2B4D6
E38CC1F7D36D1F043340E7D392E0921577FB4E3FD0F61CCAE02BA2398BF0CDDA
6C39A8267B043DD1A309A1F1C31BF683F9E339438E00F684E0A506ABC5E8D801
5D7B38C7F77D12BC7D6B9A78C71D35BEB2F17B2EE77A251071F93B4C14D9EB54
E217EA44D35D45ADFCD296F82FDF5B7C98854899BDB000FEBF332D5EB49BE219
77146C8872ECAD4D82A933ABCC3B9C52D6E4EB10CE7B2A266F24E369FE2D7618
C626FE24E633517EE593A104F3E07F80277BE4E8ACDF170FB7E0BF37E5C449F4
05CE62F70C1C35A77C9A7468FBFA8A8DC5450E68DDC518F5DEC9963D8500CB57
D81CFED2BCD27A23326CD8E2332276F32283CF0F7169EE52BD71720928C29F0E
A24196A54A0EDF39BB8999E09B53EC928B47BBE1D855C3CF4DE1FE6C7F052DEB
37AB594D2A1926A95B3E7506A8D328199ECE23C1F65FEB3C45554F6B37C5D88B
CDB45C0778BCA0D4AA7841DE13466DE9FD1984008DC5DF4E23A07F6C0E1387DD
54F5C8BD071C4E9E49466D92B811D773B475C03A372183C536651BCD254E5449
B2A5C1CDE2B37C804F50577B6D1308DD9C414C5C1372217DB6C8F2F209C4EF07
C1FDF20A19AADB222DE24CF9450805C5DD2A8E4F4C23E114246FC103EB63B58B
F931BC44C1C9AE6AC470F8D8794991CF4E6F6D3229F569758E52B9A0FC6005FF
4097D119A49B413FD5E2288C7D1A16CCE9A37170F0C02A9C7143D722CFC08677
622031644FF55B23CBA363CD72154A3962C8F500795C3715C9BFD1A629D536AC
5FEC2823BCD487BFE8E77B17095D09930479B28E2642DC9130258AF2E1756978
138ED9B093E078D00E351A980FD7926DB858B91872F91CEBFCF74A04D3357320
847B6C1DB296E14620C75A20AA65A6DC8BC78EABFF408D5DB3AE15BF6B53A9FA
80CF7323CBD5AF3DF8E4CACD4206B6511C6118123D57440FD0C45FFAAF83A31D
61AE3D35108D69FEF91E13323FAE6EAAC2E156FD93F08C5B690EDF00F3FE36C9
CAA4C56E41279AC04691C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6D9F92
2A7D629C80E8D82ECB79DE3D2D5E0BAD4BE96384B83548AE8D913FFC1CE67055
30F9CC1E3766FC6E759B08EE3E8050A97238F88827E75E2F51339FAD5776CBFC
ACDD35B437B7DD011061B1EF585D7190F2C24F9A9A12E38D17DCD523FE710FF6
1D766E9B334BDD7EA54C5BDDA5706948AD4434F8B41FD8FB187D24F232C6D89B
727E57F8FCE1920A890F6AB64F6326C1262B4249BA9ACCEB8CFE7A8B2F7B9B62
EE1105F37A99A308E7DA80A3018AE732A0AB5F2ADFF816D65619DB7368927E5B
23E1025B39E367EE46E0FA73157A7D2B86A0885D0DE7B71FA9849E78C71D35BE
B2F17B2EE77A251071F93B4C14D9EB54E66DAC704A6F74249E9F5EB7CA37809E
EFC33FCDBF9DE03EFF1A924BB9615DBB6786DF6522B4AFF4D46E8B5664425C47
B6AF1DA4DF3CE3826A8648A74D83D12EB458E50E8D9761757536A48FC7ADE554
9801825D973C8A6F4095EB567660970F66F2061328F85AFC287E9C2421C5FCF9
0FFE1C981EB0122C3515BF2776B5B833FA120AE0C2D6657B5FE28D7B39000712
4F787E4BCA6DC9DCFE94745637EB3E37FC4FCE8F9492E884E432F5332C61623B
67C090E2747B0DD70A427D6AD26C8B4C0716E17F6836F6A9319E78839E3C2111
A05DF18DDEC2EA771A3852861C345D542924F4BF5B4F3426C6C6E12E081339CD
BD44ABDDA3D3B50E94D207123A5B05FCAB7FD90E2A9A4EB019770CCACAE3F78F
40E9A45653BBAF2A5DCA560DB5B8C525798DB0749A09F2EE7F6697E406B507D6
4CFF454AF29407D8B4BDC7CBB362ED6571E7BE314685A1B6CAC68735E6C8B3B0
AC0E75AE8646784B588CE0DE89BEE5E1626DB5BD163E58651D2D017D0876F86F
EBD25557B85C001EE654F48818DD76A3F20E743FF42B04A1190B5880DDFA3E3F
44DF1BA5F724BC963D3825F1111C442A7CF3D7C598AA9CC6516DC7A0660CC2B0
B3C78EA9652D6784078A804230788460D35A12C53A212095E8459ABFA31831EC
7BB696C8285F78C66D154289455C5FF2D23C1A59ABD633C3CB3F5BB87F30B80F
15A0082D1D59D9E92F409F13A03475A731A5E011E6FFBA0C1AFA5DDB5810F10D
2317723DCE48D82E48819606E978EA55D01878C314A1DD59D80FE8A7B6C80DFE
DBA2A03212B688B37BAF7CAA5242CC81B3445B02E27AC2A2FE3A14C5CA57DB54
5BA49484ECEC244A1F30330B1C2495DBC7E205C4B0C7F6B1984DA594F8E75123
7CB42E5C894C98A1FF2E6B0DB9CAB2396830FF6333593140C974A8B13E94CF0E
77EFE6EB8BC9702A7C5B5CFCFA4189937F467571268088C01947EECA1859B3FC
75BDB098EA05FA1A1CEBE9B8214992F0C9E759C49C0832E1B3922E9197956950
D0A9A11D8B4FE241BFB87CDA9E22839448247D40B23A37DFAB7F41DC665E1A14
100918F605CFE56DA8B9A95E2F71E964DFE6AFFF9DF430A749D8D6D4C669B262
8350B9A35A35921520F95C0CC653373F102E39529212B65E7565AC5AF0279B61
0A4CAED3CA557EB3AD75BE428A088081FF6E74A4712CC752771EB050A697558A
C6062ACD9C0C1E624A4D80269F570C0B57ED78FE33164934EAB70ED3852DB084
C3CF381E57D7B00FCF5F246C5AFD97D7F7DAEBF80928F0CECB2B9EF7A89A36FD
278695F6F2FB9A6F974915BF81C9A4CBC05186338503B91199799ACACB28A620
1C971BCE014750C3EFA20150F9AF0A5BCC8DD9C7DD53434CA8D34A2E3CCF5D09
8F7D805E22FF817AFB2938A9F76E107679F910B174AF933326ABB47935AC9004
87A2273CDD4D9CA5643FD07D8F6E37275108F7168F45BFB5024845F43138693F
D5103767DDF6FE6FFF496B106857BA964DC79EA5D64B5FAA44144D1A6F2F8BFE
9A6DDE8802BBDE095BAE26B394E8356F6C295B3A746BF7C326962720A63FB13D
89860528B5728B7942163227EE715A2BE6459EF0B8CCCB4C1E7696D16531A5EE
D36C30AA15C66D500D2DA1270E9AF6BDD563F439A88E8BDBA73A9BCF436FF127
008EF53B1D72088642CDFBF5CACC3AD41CD762C479AA4E888FAEBCF74DB7CB45
7B511BB1F67305D3A25512C7A21CE1DE2CADAEE76E1540527E73B23D9CB14BB4
1B978015A28BF09B926DFDE5F394A54086EC1AB27CA0052791C268A82D551957
3814230123CAA9DD0D86FB2FFEF8B04B8E74A754DAEEC62F8C96BE042568C0C1
1ABABF9D5E3CEE76DF3204AEC1961F654E12385D1EC21D1D3D9061E2A837C341
05FC0BD6ED0484606D5341C850CCE7777A0F17EDBF9B8D010255944700567530
AACDF07571D2B003E817265F192A9EC17289B7061E41E35F1C0EFA2D271D39F5
EFABE1C78064A1915AAA4E1B5A5B8FFF7C381901EE6BD0BB9994FCF95D431D6A
E0483414B9C23F7FDBE77748287874E7DB593866FB52EB9EF208B1E3B7CE91D8
4775A03BD1F7B9955547F2B0BBA26006FD4EF21571956AE9DC82EAAA0195CEAA
1443A1A6684D8E8C15E380058433952B698525612082298F0E6E36968C89E700
5AE4E6BF0D1AAB8077E21BE3E767CA6BFC0A34A02890BD5D4AA0E355673A6A7A
4A84C8D8AA9CE2EA00D28A24EC79EFF944246DF8911317DE4C75D695826A465B
E9926E169FEFC0A3D8978F497B025DB4E92463291A218B06C41E47B1B478FE28
C2CF995DC875B949E8EC26D7BFB5C225ECCEA316CDE8A62D377AF3CE7952B654
A51F1F343429BDC7838A9410E7B2D42EC2BBBD4E1BA25E5DDD0554E8AACA4ACE
065E9060B8ED8671BA724909C1A03E68621DA82801FC5B137FFA1FF15EE53DE9
7B6341AC204D72FB99578B809358856E4E99B28E138E2DB585CDCB38D07A191C
C377126A41EA96394170A5BF25824F79A7CAA6D2981BA848F9FDECC660B23396
0B6CEA5D9F72294B0CB131B067ADBF27B44B65CF395477DACB3A1A8C032475C9
D9382F391C187124D13D6EFB0B1BA17A79754C6C15267DD6BBACA45AE742BBD7
9F357960C75591D364507B3CA718A006458A52B68E70AEEA564AAC982972EC88
DE76CBC2280A1357183B782893E16317356BD262F541A1F007347CB8EACC8FA9
038082CFFFD1E42DFDDCFA614764010359F3EEB3A7C45DDAD644F149531D3617
439C0069B5F66C78B16CFF7DC9C77E140B1AD0C348DEC5D34017A12D8C3F8B48
D465E4BA7F5F2539ABF1318ACA67DDB677BC1AE4BBD04314E00CF7AFE9FCDFB6
6BBAB0128EE660F50D15C5FC1822BFED95F5F4DC5E29937EB109B713DB225A06
4321E476AB1532414904AA1CDDEA6A7160B215D6B331BB4B154B07974483BAC8
4D81A343AFB5F8B0AEE0C6013F61120AD44508AA7E1787432D93C0F502DB75C4
A5E2E01EE0DF6D37BA92B96E225CAE1BCF021D7960101C9191C781DC609348AC
6C1BD438AF3D2E28CA7793297AEE3559507595C8C948FF2F2669D8AB79B054D9
6F32E813FE363216A34CB1E5FC9512709AD113815EE0D31D28FA55AC85FFF514
D71C8772D8DF2BDE53AFEC602FFA64D9D7E2418A977EBECCC7290D08617E363E
0AA937AFB1046A24A3710E4F1F2A83B650D6BB70E8B3864DE336140665D2D91B
7EC17A70B840DDB125F4B849F329E321
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeXGyrePagella-Bold
%!PS-AdobeFont-1.0: TeXGyrePagella-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.
% Supported by CSTUG, DANTE eV, GUST, NTG, TUG, and TUG India.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% See the MANIFEST-TeX-Gyre-Pagella.txt and README-TeX-Gyre-Pagella.txt
% files for the details. For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% This work has the LPPL maintenance status "maintained".
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-TeX-Gyre-Pagella.txt file.
% ADL: 726 274 0
%%EndComments
FontDirectory/TeXGyrePagella-Bold known{/TeXGyrePagella-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.)readonly def
/FullName(TeXGyrePagella-Bold)readonly def
/FamilyName(TeXGyrePagella)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /TeXGyrePagella-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-560 -267 1311 1097}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105C88EA21418580A921ED290FA4C7F23F41B592
047A9C6FD7469665478BDE9F5C439573681B0A8DD512396EAE3C219AEDA53E15
9D1A3066F6B27A2B5AD52D41DE61721EF43F1F5EC07ABE4CF346A645A7B0DF43
CEA5ACCE958AAB9A5DD0267F67770A51D2B9AB8F581AC10D1A1361B9720CDA2B
854FADA3AF0C1FB5722E6D6E09D7DA58749FC75786B29E85B94B8962F47CF45E
0EED60762B6E57E3B48C2F24C50F58ACEDEA2D0E2040FEB9D39725C4D49F421B
450B398492A3C17E6B1F5B9EA2462A43738405E78CC83291A8D9E69655A80385
131927A205011D87DC6ED5376D18CDF3667903898BD7D832BC6B927883ADA21F
A41B0BA952D51437C58CAD187A6C105E982A7DF70374DA98B3E7C5BB397C806E
C6CE210F6B9AC61C6CDB4F85DE3E202F441D5EF88942E29257D947FC3A8B0767
48F02F1675151BD31D885AD22A9F82EC059B3D1B1DC65402D5DD84608CFE2A75
7B53E32AF16E5A4DC8318AA8F84081472B1B8D34A030A3E9A88CA90141047E67
1C0623491B1148D4CECC82BAF4D7DB5BB56EE3315BCDBD9AC7E491E811CA2535
55443CD5C3E4870AD882AF19E37EB86FB5EE817C7531DE1839552A278FE34E8D
30F7D41F940E62982A0DA7396A791B0615DBE782431D3FD7FDA593BEC1C6BFE3
D781866578F130470F90A6E38F846F7EF7736F1E257C77A1FD45DFF79CD3B36F
3990397935F8BD566BB1C0FC14B5A42A6FCBB5CB344E62F482415B31F4C1646A
9284A4FDDAB5269A8DA9B42512026F83567618AC1588A5784F322AB684776DAA
7AEDC007C00810A5BB889469F8594CD5FC9C586599B58DC4480DBD98FF2CE4CA
55ACBB64806EE499EC1999C49748BE863DFD36C7422AB7CF484DEF27DCF80A7E
2FCC33A4A9AF7556EE41317C17D4AFD092BD6FCB4DB042306F37E6386F7831A8
FD5EB456F9607D2DD8BAFD8E4671BD9B333C676D41758BBA04E64E472E08CF30
91F4A9D2B56FEBB031CA0188B5FCAA0C593A3D2896BA3CA4FF6DD242C607DC6B
A54BE12B16133DFB3F8B3C52651490F4510D7213A2A64984A4A0AFF1615E2812
2EA6217772310692AEC6465F89F9EBDD8392FB38E8430F84E1DBDB604DFCC2AA
E3C9DAB4B146D20286FD9F6940156AC0B5422FADFCE6247669F6392AC6C7E8D7
43A74BB5C85E3BE95A53D68069A573964AB81D0601D40612F4B2EC81023B5B9E
354CFE201E2EF62760B884E599BF3984F00B210880F29C7DCF7F98557A4C8683
B529559BD4D3327F08F492656C7650C071B1FB57CB36234BFE778149E5795166
423DBE5D30C0453E411C939371FDCDC0F19C8D0285CBCE07513C22253B975394
96C8184C35804E0E5F0C6B8D2D120C125B8F75CF24E5EE4ADF486DA47F265FF8
FC9FF028AAB2FADE0B5BDC3190C4CAC7F46D748B1FB871C97A78FE15CEE03540
74074C255686B775090A16F6936C9A0AC65CE00F42B30857EC5CD2FB4EFA5A8E
48AB87BA6E9E942B19748AFC7E5D305E31B0F2C34E70591A1A14D969B699D835
7C68591875202613C59ED8B3F7EF5B1112FB7A887790AD66094709274169E75C
3923B20AA27F1119DEFDA17AC2E515BDB3D6B2980655EFDB97B56D5DC6F545C2
E61C6F69E9749387134EEC02C2A56EE809E4D68BB6DFCA0135D0BE97B8C11D95
DF2B43C2C1B991E045743BA616B22E81332CF1D679F5BC882E15EA2D1720BC52
58423F33855CC4DC5EC98D6E36532D88E40FD4C806A80092FF9C900C91E6DF15
400F35F789CD093396F0E34A6138ED8EE2895A696AAEF0EB67902FA53D9E8BCF
2B5EBBC929A89DBF371F08DDF47A25F389DE2C91C9E4520DDCA311A0ACA93809
19BB7EFCF84433ECDC982113979D5589C52B018E46EBE636B6214175D6C3850D
957B7491B0486E7CA427857946D2F3D0E22E018CF128FE6936ED5F15962D7DBE
BEBC3D2667ABFED58E96F6DEB3ECD980DC8CB9A9D9491DF42A8678BEB35D372D
30DDD811E7CE1C4E2D9B0998C10E0AE05405DCE841E781794EF52B5CD6FDC30B
F9C6BB9A84799126F7B23DA2B4C4C59B2FCEB1291C549BC9ABD6241D2D9C1B51
53E0404213C6A94A7AC4F217E3AB4BBA8870B2F77DD69842B10468046D3114D5
4BD3389E38DA769C5722830BB9DC0BB659B2598C8A3062BB4D58D6E0EF27EABE
77149F7CDDEFDF6AD4BC9BF80F3188A55927B3A90F5DBE9B08932B33CC7FE1E9
E6473AE9140BEC591DF4F8F96019FB2822AE4D7FFB00D18FF44D2B065826AF1F
F600427C11D65BD6DCE46080B5D041E2A87BF43B5F3789A77B21A4B5B85EF394
5AB516BE7B6C3B3C1798A1A62A0A6F8E820ECB5FE4ACA6A493180E0B5A304BF5
FC0B6D5703402E7D79C6EBA90AE3391FA792B74DFC090CCC40AE9DA65E5DA02E
7A7E8A840B44FAF3BA821F31DB2754D4975BBD240BBCE943157606C0704166CD
3DD128179D7720635059049FC2FE5186ED1168B0E0658B71C1442E7BF4C1C343
358685BC2170ABE401EDB52C881153E8228D33EFB93F057E59658FA002CCA47E
B865BD5E601A98BB3A8572F20EF1C651EF562670AEF2CC724BEBCE5172ACD5C2
F5178692F95456B353EA0D2FCB03FD86FD6A1A1A68C4191BB8B9BCCCC899EBA8
1175526D2DD96D712E62BFCEC187157E08578D867F27B3A1A3F8075FC5AC38C9
55D3C281D224D4E8FD6F8BD3255103D823B86B712CD58FC632154924F4739C65
0A8EF8D238C73BD6689A0657DF2DACB9F1C9CBB82AD5C5134A39347787CA96E2
E00A285D5C1344B963C22330524564CF6C39C230A6A9FACEDAC7BA8D326A49A9
11B39B929202AA5CBAE5285C32118B8C09C04174BAEF8DF1BB4A1E1F848C1A51
78E31606AB2B516787BD4341B92479E72AACF9ACC43F9F7CA473A1FD2E01CB11
97990EDF8444CC83F1AF7CD49ED2A40004E7C6919C2B5834B520BABBEDCEF168
88F2FFB789F812D0565F4BC740AEF26EFE447E2C67BA41209BF77FCCB5ABDC05
E978BFAE410EAD0B667A2525C5E2BBD41E82C1E2B1EA057A0446E0A67EBAAEE1
B4D2014548B232CF00A760D92BF4B537D15C66B2F5A53C5CA6FA9E91D8A28C71
9F9348509C0E17D6350E2BADA50A28342A2B7093A3F7314F4F656E97438B58EF
6A8492F020E67407CF321E01EE8F2811A9C0A80E71CE273F61F89C86DE2F3138
2706EA33D769A6AC434541BD0A30AC10E0ED4A588B743FC5E5088E22704F3C88
C97818E42CBDCF311CDFF05C37F2EB54F2D00E9B3D9EC972D59920550497162B
435DEB3C8C4FCC5DB2A5C1CDE2B37C804F50577B6D1308DD9C414C5EF08BDAD0
1BC664D35CE925F6F04405595BD5A8A00DCB35BD3065066563083DE066F1E9B3
F312F1EEA3F899117C0642A3443674A4D19A5B037FFB99B7EA159C14DA60785F
606CD96E5930B58DB466616CA9D2C6E6D3575F1D961697B5BAA693295F98AC07
DFB9C648B4FCDAD6D831D091C08DC8AFA8FD5C40FB22842FE646AA3C2377D779
DA1F0DE6FC09910A13B23860D75CEAD93CB8A5AB0785C67806FEB29DA4F21BF9
3EADB3414E7E56A90079CA7DA18D25F3681DD0131C46E14DCDE7FE82CD6AA692
12F7C45DD001CDD50B27558998745D2DE91ABF81C8AC2B28B098DB90E754F6CB
19C6FD03035131BE0254292465D2A6D2D7F72A09204AED22C1432F8281B538DC
AAE19E5F27E7F18378BEE4CF824B5648CEC7CAEEBD3857D3716AFD38956234C1
9F7829B888E40CA4B33A26CA98303D0E9981AF8EE6A59E8F8A1C056D80B361F6
C2D8C97C2D2A77E09104B5ABA7BEE30DA2A9CE7073E02324E9A21A5BF2DC34E1
7C150BB44EE70247FA3B66EC125FDE2F6D290EAF0AC41C4DE0449E6AAE79500C
42B4EFE4936D0D000FB3319F34937B2703445943EEBFD15EACF4EDEB082BB08D
FD584EFC5ED60AF6B276713EF5869F582AF9C2D2662BA6A396F42A330D1B6C36
19E2C081F4DE7D2AD9C05546BC76CABBBF03C6D46D5553A1BD1AFD2474342555
6F1123474D93C05C07B8689FC4885699E4BB76685822F0557CD847704791EB10
68D0C523DBB843CAF86579E2B078DDAA6B27C43396834E36751300AB9F9BED80
4AA8A2257269EA48C65BAC2E7660209330540C8B12265C27BFF26B3E844A9641
EBF34B49BB6272F1F8698F6A46728049B116F1096AD998FE4B93525C3596EE83
B4E464225F241CECC4E8C63CA5F6CC3571D1011B0AF5BB8A23FAE7826559F9F4
68E6C87F3B6D90DCC69338929822B5ACF8839490203560EC53F1F43913282D7D
D1EC701273DC120969CAAF54CD5F89FD89D153C58F0D622DE841ECC847467858
898AD528633F477B739EAAF078F9977FB45D698F452B7BBF72046547BF4519D1
FF13F9CC09BDD82E4D6E2C479BC9C761571C27883C79BE00C2A2B9DA4C5DDC0D
361A5F467481B87ED7CAB30EC2B8DF601B5C9F7A05F120B9638E9DC9E65F758F
0FC4FD7904B86924C768AF07829359D9585E64390C25DE13AC5F02899699963E
FAB9552ABC4F14ADD19C613A869CE5E244F9541D26637BAAE83A18E0D0FABB1B
131913D29467B7504869D9EB2C285965F4DCF207F6BE5A1C3C4AEB59E5FB3A45
930295F6BEF10FF79D278FFC3C51BE1AA7278BF62E78AABA9E78D9E4275F04E2
BF5463C5A1C471B6B10611B6D381A7047573816388541ED991DC598699A43261
3CCCD08D89506CACD8323BBDE8EFF318AFBA650A3BE444F87A10E9D566B4A079
63E6186FC14FAEB626F322081A78999867C5F0970BAAFB320F87FC5D14039580
BCA7AF30BBFF5777C5F9FCE9085CF55CE0548710F84BF532BABAF6B3769B667D
2EE5A3923CFC69FBCDEA39CB02B73AFF1A924BB9615DBB6786DF6522B4AFF4D4
6E8B522B2FF69C367F0DD4D73689183798A4A2605095672AF75366453AB36E6E
325AEDAC9D82657F8ED07C3F4BAB17031C67DB7096EFB1F419D84A061BF099B8
FA36670B143A47A028C9C9DCBFE53223D096351D214B3DC904C32F7B73F4B790
085D9F011420EFDB33F682C3FF18E73E7BAB9B0222A52D28584AFA9041AB7D7A
43F3EC9AD09B1BCD39A9EBBAD493D051B6F151CCE21CDF95DC2A70940F1E4770
7987E8E672F486552480FFE3D56EF1EC01FC6EBA38ADAC080E47FBD491626CA7
71E2B69CE5CAABAAD6CF604F8B47476E4098ED693455F82F098F49FF48762FF5
E4638B25282A209E9D8BBEA3ECFA3ED46C2DBA5CB6DD6FB4883453C36014EF06
6419924D265AB8A16663EB83637D079DB00F337979DA04BBD485BD56300DA794
EACA8F2A6094E407A823BEB4FDBC9149EF33A77FFBB71029957D9260E89443A3
941E74A7B6EAEF6F0AAE5F86D70510DCBD27F6AFE6B8BD4E941D2FC154BEA826
E96D9C2644637E24C7DD2CC62787FCC34BB49A80CA4750694BF0902B5D174DC9
18B0EAEC7D248D3591DAE0294BC44A44A3FD4BE5ED75D83C8174AB99A32FB1AD
EB641E1657EF0B1B4993AD4B09E331D14A662DA0E2251998CD0CFD3D87F58921
929EE1D3B4A47E26C446E0B8F2BECEC0A7851489E93AF80E182633300AB8BD06
D067F53E41FBE696BE420516A5F818A212DA6F1930B407248B6665B55E766432
983B505372701FFC741679197360213A13F981314526E89E6BA8CDE849B5131E
19307559490FD9016D9695B7E2DEAA16597E0264A7F978D83065BDD9097F2C8F
6866D0014A2523949B68137F604BA7F1A81BDE6D899ED2D6EB48B5EF659F1892
A8C81AFCA148704CC13132E1242BD673EBBED1001F890256CEEBCD45D2980B70
78969353A489FA703B99ED3B49603BE7AA221291BB4A23D98A5450771F19B59A
2760C52C87C36694BE5257D9D8CA4B5ADF3882413B67E1B8CB2DF7E7DF68B41B
DCE88EA10BD055996B79C2E6795E23452881DEA6255133A27009C4C9DE352F12
B86CAF7307A0BE22081F24AC95E037C9B943DE608AA42A1678786D34C701AA08
36863119C3FBAFEAD9838923342D8B23AE0864DE92FC7EA1F45B84F9BB1ED7C4
EB6AA225360650BFBDB6C07344713A08763E6F3EB9254F7781AF73C474593EB9
84673353F4620CCEF598DBEE4F369D5FDB88F12DEC919082DC237A9613E131DA
AA085EEEB0D95252F4043CABB9ADEED8929F602FCEDB39E03874442F3FE5093A
B36A62182A6A89995648EA9BA26352397C3DC55A0FCD95276517788B57C33606
7267C38D64411A41FB44D0687B24A0069127404EDFD90934EFF7F7B0C53F8780
D83CFB474FC0F1CD987D54B1E558E2677AC6AEF085D4C0C92A8021611C8CE906
146F31CFB615F3EEE17497ACFB30D8128E3752762CA0200ACDE8B36D06B51FDF
D86A22BE594113A00F62F7A57B5E3C6584ACE94087B06C61D5FBECBF2AB8B276
9C12E0440E2BA3AC50A5A93D31607964E58D19D8317B77DCB4E9337EBCD51C59
7C1AF6102197A1C8714E87DEE3F0D012667C2D9BF139C9AE75C932AB97EBC00A
E1A2260C9F225AC23358698AB2A4E7319B9FF1A7480F80EC4A178E56F57337DA
CD25AAAD8279BBC4FCD3B5DB37880CE77456AE443AB405847430C138E5806B3C
A35021D2F6BEFC323CF45D0AD1FDAF194F7DCD648D8F14A5264B6277B6BE91F3
EC920769DAA49600CC8214C53F9C312498ACF8D70CB76C39EA6587B515F5CAD0
858001D0F08DA33F13CCDFE41495425F0AA9E0F014464590D69B105AF0132EA9
DF281940D45D3F9B39005FE49A79CE949CEDB65B11DB80EBF5CDB65E8DFA20E2
077404B83803AA3A4643B750D18551C9E415D2E09184C78217653E011F5CDE11
CBA1FFACF15B3DDB06C4D7E65503881361091F0E4F77D99D8A9FAB1A6089E980
7455A5DD78B2EC3090E36EDF4D1711151A57D02371497BA21EA208A185D6B82C
973F1FE347FAB082F33CA61BC587A5132CA4E82F35F9DF4D9D72B50C8E138E7B
D40AF3779FC46370B7EFCBB4680119DFFF520F60BC12355C3872CD092F77FE06
EDC4E1678E8540304E2B504D7A6AD4EEEBAFC8BE35B06BF8B30FFF067201B923
B7CAB5F7FC1766F3FB6B37479D9917E1CBF4361E388ABF0767E7BE27FA203AB4
536C63E84658A8AE0F60D8BC35987EC5FCFCE1B41FC1324F0F306941A7B38ACC
FCB941386C9D6E9D1A5E8FBCF32D200E0FAF7D740DAA3F11E907177CA545CFC0
568B9C0A2670BB3F44D44665B11F1D1501F7C4FF2686F1BF27180E6F9B009D0A
06338BD4134C8C65B2FBBE4C4D1209DFEFAE449075E0BA38CAB1FBD039656531
6179A6F61EF4865326D57238BC46DC2794D4A9A330C3E2E57C4477049B393313
8278F7EFE0A67D566EE4E202722ED52BF7181F5170D732A8E39016C180CB85FD
2D1D5063EB4B2B2D85542665F9BA4148521096B1240EDC18A069CEA146770040
3A1960A1BDA622D31F783FE35D5AEDA6D646ED0B658B1D2ECBA732FE20C3FF53
ACCB292A8690B9BE1FD2FC5D972E117BA3D9809CCFB180F8017A84BA6BFC1BA5
940ECA307501753742AA95C63E50BF80993281A0613CFF9805301EF9A31D140D
5AAFC6FBC6B08D6EE1453264D8E2AEE754C1C114818E66FDE710A442C8D20A5A
230113328B8229E312E1EB79AEC531B4E058314D4A47F2CD64A2F09D985E7DC4
E0FEE585C057513810E439B5705D8987D32CB0FAF584A51B6CBB0BDE4C69A4A7
173DE79A0DADBA7504E8A9022E22AD612B2F013E31B97F10172423BF5A540013
3593E0EDAB19EF1603373D80117733976840A4D7ACF6276A0CF6FC0A11C83C4E
7AE0B995385A56B21FA570B607A697FDD95DEF8B2D573EFC2CBFB7C4F51848BF
E0BC924A9B69AE62558ECEE827BF8AE529717082BE36A156F4A55397E2CC27E1
1DCFA24B47253A03A99363DD7ED97EE1718C632C3971F552867AA386060985CE
C6E0C69A01440A8AAF20088C9CA414A4210153D5311EC85D7A616427A186EAE1
5F637D7E107FAFB4619EF957D4A70897C888691D35FDF7B2A3B17C6456A86FF9
C72B59ABFEC9458270E1C017E33650E24F353E423A9254DC034E6B06ED83FADF
34A6E5CFAF53CAF1C31EAABE44B4E65AC10A4029FA3F773B665ADFF0135A65AC
B5311765991CFDABF32FE2575EFBC3F9FB951E4C6A881D35642453CD37222130
8E0DBBE8CC601D174B2E94953F541C3B84D430D679BFB53D74265B5E62292B89
5E0497B9DF2DC211CAD1CB5E177259F34C2EADE01F1DC12B1E324F1710B20780
A2E77AF6E525B313128359FB837C6159BDD3495954E877528149BCFD7E7E0A23
C75927B4FAE9E687F69754A5AF56D3CB4062A0131EE8196600DAF4DBFEC49C4B
D6229ED34BEFE965785C4EB2DEA1B2743752A7B4534BC3A200E102840E68ACF6
91393E6A3ADF983C19E99524F1949AA4735506E6A03C7A805C5AA651DFD7BFC5
FC1ED36E66A1B412502AA76AC1FBE852B7993E98FE31DC936F3F8EB5C8159E58
48B3062ADB1E73F90DBDCCB31A8E2903098DC168AE63B11D15A49B6E46D8EC62
1225A259A619C40D603B6D218F9741A9D0BC2BBB60C369C4183F6673CEAF464D
6C86F05088BD36B92F4FCE9B19B7B199697FBFF647294D69198995C75EBDE2E0
FFA891F7C4EB8DF08E8FC81C7A93EC9FC3BB5BDA3619E904570286AF4AF092D5
62C02AFA682C65C411D784E143285DB6A5B530F5CEA5F3712EB3029E680F91DC
145A4F7FAAA554106B4D89AF8FF5387F0F57089A2DDEC2A5205FD3CD2015A07B
D5CE81B2FF46A7BCBCCA74B6D314B33AAFF216180F5E86AF6915A2DF244DD56A
20E9858890C7992E51350F361AB48475B23985846B15647ED6F765EE39E78362
3BA56262EF17CEF3806A39140CD5073A6E046DA695E4F0E4D0F60DFBD4B1B7E0
041EF68AB5AF9B946FF9366079CB13D1F7F71D77DE7B4D89F524F9C3162EDDEA
27A99A2011D9D9951D3AAD05E9141A2A2B369D0F7DBDE3F5373298F53BB2737B
7EE68288BF3DE1225D981C287FA9BFC2A05B68882F9207ED34F28DFB622BEE85
BFEF35A03AA0113FDF8417EB931EC402CA0F2450CC18B4D22872FE0872848FC0
CBAA6606E892B2E41A173AA590B6C92E23EB58A5C111311744B77AEBA5674EF5
FCA770729FEF0AF7CA67D4F83CB160C170298E1BFF339F306505EA4FEBF1AB43
CD8BAF27A0AFA9C36A4E9C01B62EF23D5B983D413F8852CA9D2E0F4A930BEDB6
F4CE046EE0A9BB4FD8F11059688AE7F151076AF9FAE9424B0E3DAE6F2B4E6297
B33A023A3E5225E0377ED38749AE1F7714AE5E1D672DC69707114DD547128F3C
4A4A2428B51852D4DA802F720F5AB598810C37376F6DAA620E0018E4F64A28A1
4FC7107EDAF9B56C3617FEA2E77A32F1D21471D485F5157136C72468503347EA
1A45344A43E0DC78100DFE97263E7885B4B88F3D8CE2F5A68FDC19A564D2F5B9
2469BA8567A1E814A85429BF76E1A7D08ABCA4443ABFF10E75DF57E8311964CE
351D3EA13DB52AC6F6A1C3F8D5518EDDA9C25DF46905F9EB8284105CEC31918A
10A18981330A931C81895DAD7D74B8182DB648FC01DE11C0F21F636950387FF6
5A63CF2A927E5F2D7313EA2C5610209DAB5B614F8AC6DB3F3E54B5DE3D9670D3
318CD8985AFB1B5012E2C303A527A46B56355930F7B3AFCE68ECEEADF99393FC
58CCE729816CB5CAC247DDC93659FDCEEB82CA9A868CCAE33228E1E6E2034652
553A03E1341025B4F2F51EEA2AA6C41677519886FDACF388834B1E6FE3BC972C
034AA4DD26FE70A69B58F455646837F53728D93B36306554773FF3E432D45103
C75A2A0537B9FCB7B78BDF28D3C5E131E55AB411974C623C8BA08E65650BE118
AC0B815ACE4B125EF346F608ECCD4DCDCD47DD7717EBC46A040962CF1989F117
9C80ED82109EF203E8E6F42E7D9183633DB2203ED9BF9F14DA81F778D8802781
AD3E545FCE3129CCBC9A3C3E966D3F3B431634B78DBC70A30C89ACAF66580344
FDEDCDF9C693C5E7BC811BE21F547D4480C2144D78776B1A1D36B43A7DFCF5FB
13840016564A715EDD6395239B7C1CC552A6EC2A8A76E87AE3D016A2AECDB74B
479EA63CCC96F4E35B7DB8A8D7F3E1C569669AC479F86CD53E8CC9DE6B2DDB14
8E81B1F6B9E2B61B0A50E7F3BC91F69C38CC6212DA06A3A0C730A82EF5364B73
DC8D8B8D9F59CFA79688EF5EE764E4352C1D55BE655E775EB811699792290062
325BD588D00D8A6A024C8F48B57E30DCC022B26EEAED59B188DCF08F2838AFA2
39CA6E436B3DF24E7DC6AD37137B49327871EA80F0245DB14C8D5C3926CD47F8
CD3FCB12D0CC866F1414B0163160EBA156B0767661AED97F88AE5958686879FC
BD831FBE69B19DECBD09D239CB562718A47A2340E21AE7C38AB7E695147C082A
5353765C789BE6E984EEB1741239981BAC42D9E660AEFE482ECBE92C7CA2079B
1EEE771D66AC7D3A94AC08354BAA8752283AD7D74A6E8A05ECA6D2CB21E1D3D9
68967A1447E5C9D5156F2043E9B5755C9A7D9E02960F7C0D013CCE063154E006
EC3DBFD91551E93840267D7D1A70288C3CBA2FFCDF1A4368603D692E9CC4CEA7
AFF4075A15327318F6A5962CB9AE8BA6D117746F5ABFB20CE24ED96E7EE72A3A
D5AC654B29BE5E37E7957272239B7DA8B9139CCF9ABC5294AF21AF58E555F908
5ED341B449BAABADC34F4B6DBCBF48F54C949EFD44FD121CD97988D700259828
8EA2C13DBD9840201366D84EED3455C90F1D36E21D52A210FECA5F50626F23CC
D60BF3FE09037D981E9E7FFBBC3F896535D0DCF53E81F64CAC53C721060702EE
12C6641799994DEBD48FC72CAD68B04EE1C357E7DFCA59E5ADE840293284CAAA
D7A75254C7E604231E3E61D172E87A663E50D8FE49510FEAB5070DD0E2029806
6B78B7794DD450A9BC2708F01B5FC37FCD8E02E18FE3DCF62463AD80181F8034
395A19C440CB7232023DFC1D7D4C4FAF55E151C39FEF8B47E2E1B333126AC26E
A984A4660F22D390595911A900FED6E8EB0903D75CD251701B242F82E2205AFB
F3D4BC3AAE4F7C9B832756381E2964F3E3DF03476A89616B10556F3644B9A96F
B08FD0F3114A13C2A8CBBE519A8F57C66923C707536610F58CEEC2E48959530A
86B62E15E2BCC7F17E0AFF2D1D0512866382CA36DD61A7A0C4D1338845EE21EB
04A439D43635254CFF36C827155FC7F5C67036518B2A31853BBFD87CE09B1888
87237137C5352FFC610B37D376578942C226789972FCD53625BABFE9264F5C72
49B692DEB484A8B9100A31AD1DF7CE7CEDF45D8D70B753EF86B63BDB575DAE9F
7E1E55AD308CD97CA63ACF51674B9B68B3AA8EE192D9320E77806A19730C97F5
4D55CA0140930334B5F384536C40786053235B4B64AE52F50ADD840594030B26
907E5E4045ACCCA8F8162C84F05BB104AC2C84245C7A402067E25A87955F189F
5EC666E583D1712BA7193FB92D21BB87ED788C589CB8815BB156E4AB3069ED10
EB8C4212CEAFBC79B61186AA832CA4C6A7A7189978B9BC650DC773CF31C2CDF0
58FE624EDA2B60304078961DE665ABEDA47B214C73AF9982B447F7DFFD220231
8BADBD95D136728FDC1F3B174E3596DB87F5362E1EEA4F86EDB1EB6F4647F4B1
AEA267B4E0A71D68CF20213AEA97259581392B9BC171B1AE1279F582DD209DF1
9198D5EE9A7DB22D584FC7B6F9C35C47D639FC23BDFEA8CBFE1F62CADDC2C023
17D26E7BADC9821C4FBC6EE3E5417D1B42DD280C1FF9A88656A37EC8F5AC94DB
F2161E0E82187082675F91CF7BB877BC1BD97582F447C8C673B6BB38C9AF5994
0CAB5680A26E061D2F6093ABFB3DD815224F7E256A4EA0AD525F30EC6D1B1ACC
3676B16117B664EA1BE6377A978C1D21CD482B38FB22F9E7A5A260FFABF332DD
702AC4030A4AD4B5F9F13F059057449D7B8B274B84BB526F68F932A96A11C32D
2AE1AE3D6BD9C876462297A0EF40FF882B18A116878F50F7F3CF98AB704AD90B
C5FF3CB9D3C40BC4F6A3CDF009DBD4E8361425C12B9C4F84AC252F855A772C5B
C288840D94F9C8E024C3AF660DAAC64156BCB30481EB8D0920E6FBFE587C14C4
26F6F84DB84A549211C1570CDDEFE0028FDA79BCB90CE9D7EB1913D307114496
116FF0087A487A7C1B717805F74F4C14DB9098ADE8B26A2C3DC344DD315526D8
406F63B2CED073C5F6916F9AF0C5F519C9B8AF12E670389672933EA7C28B3182
2AA9DC74A4F34B67C8E760AEF9D1AF88BF14CB44C210BF44141C72291EBB17C4
7D2537C4EFAE92A0EC0ABD9DC217A467694AF2323F95176076AFDDFABE9CC46A
2DA6AA3E33A045451587F1DE4B1C37D159D01BFF4511CDC412A885258111779F
37541A28AEAA7F8175295BE364F4FF90ADDC9DB515FBD591CA7C911D9DA790DA
B33E7A62605E65509A8ED6790EA89A9A8E965E69C00687C7FBC708A7DFC55327
ECCF5BA2A2B1EC678BB3B45FBEBD4988B5ACFD71B15DD33ADFB91C3E4B1257BF
F74B6EAD3917D7E87DEA2546A25392183B9AE906C232A124D171C22295BACD1D
974C8BD85FCB0AD1FC68B5B0BD21380C6425FD04BBF54EFDC5C30F934A449E3E
04993FDFDC22CC8FC032E38B815EC475ED1EBA0E7066DE7A307BF33C3021A3C3
D207F5AE931B847D2602A7BBD92443256D84E2994966475D2430C8EB8E9D46D6
6BAAED3794ABA3B9F49AE3CF459EF266D04FBBD015740A6F22569A9BD942A13C
1FF22C22F84C48B07E5F737225B84138B959B5DD39FAF86A1DBA1C615E69E6E2
E52813003B36F513A7966016246CE2FBB04C34D50070E856AABE87F5FF7CE828
21390B2F3CEBAE20DBD250D3C1A9B17C8909097119232B3876EA03A4AB8214ED
1CC13F38E0CDBC99204AA6AD1309BC5668A2A524C6D1C7BFCE656F78580E7C0E
668F00DF9D78D125449EF7047459EE6871A176C150FA8EB3ECF9BB19DE8A07FF
884C994E2C571C36557B76DC6FAB6230ED0075FE95759F01F7E8FAFD09F2F1C2
208673A3ED3D91ACE4B124110BEAD6F6D1FCE9FC7C29EDCCA10AB03099187ACC
0F680A66A81969EEDE7B8CE4A1877F8905B6510B6F6E1D1301EDEA5E6E1FD8BD
D1A30E7692524ECA63916A2AC46ACFE18F4716F0562555A04553B64057A6E98D
1747274D3532624482C493691CA69CA1A46C02C5BC7E68BB5FBC64336FDB15F5
0EFF6DEC3B15060C553536AFA1AB550740F72F3CE581CFBEA90CE88E3B71CC2E
AC201907B73F6F2407DCE339A5974177626618AA5E29B8E8EC7CEA9151BB3ECB
1E8B8B045489489D680E10D295F544E3FCF67EA5E16DE4B62BD96E0D7028A6D6
4142BA9D8750E8D29D073547DDDA70174FD46DA36BEAC07DF24404E050CDB6C3
D6B0FCC21D45FC95F4483FED80420E4BCD787F6C1979B15A1DF990C5349F4942
00A88FDA22E24F5D5F7DF0EE63AA53340B37288CA08255BCDFD9CA2916B54B0A
1F4B3AE171180DDE49573135553DEF8ABD163F8DE60A457940EE723F951A63AF
B753A6A3C4DFF9BA53B2C6F34650E783A9EC414E0B3A1A6C53FC6B951CE935AB
C955B81949F59458F3876009CC5D804B153916371ADF860312500274A34426D5
7006CDADE0409B1A248B52378E7ECCE82EC2785ED0C0A9F051084E452C075130
628DA275FD4F4896A5844AA5CFACE59EDA94D3BB251F9B1728E12C225F6C0932
937C8CDBD216CF480044F96A1C9F166E156FE2A766F93DE35FB61FDFA5A4C78E
426D6F68DFE42F76B7E5F1B4B95F4CC83D93AFDE394A7F95FA260EA13D49E4E2
DBA889CAC631360E013D4F720D99CF9C02B4C1C52527B71359C32200E796531D
E4EB663282065974F633ECE2D0ACFC09D88CFBA928D5D432170FBCB19B4C29CE
1BED10A76B9E0D0920C9326B499854BCB7C7CBCD9F998FB4145CCE495AE3EC6E
E9C4FADAA72FC2C4A95C05EDBE6FC71DA0C4BD0F9DFA45413DB1BCC3DA8F5A3D
194C1C5B08CD3A3AE97EFA7854C7045849DAED8F29F582ED86CC46F5343A0CE0
D06EB59CD75260255563C88D594B94B2D2E72636AE538232C13966FC6E07843E
4FC7A8FB2185045B080F1427BA4D250DD2F37F1F6FC86C27FAB632A36D3FC2E8
D8E14D1017DC8428791C900E377B78459EB2A4BF735C312FEA9A1AC7289E4B43
B953D2EC56876074DCA2FA6A9FD41793A8303B6BBCBA18708C378F40471BDD69
3C2DEF0AADA7436FB16103C8E0D0D3F83D6DA21B7BB1F48EC20E101CA02835A2
E519A1C45A14C3DABD64253806F30D13DC8B1A60616CB434CDE7436FBE5D67DF
A95AC51DCB571982706F101B216B4AF35239743788AD164E7682641E7F09BFCE
B269B2B71D44B77142FCC6F53D9616B0A7A154D9577EB6EDFB9F157911E60BFC
38DFB51359C32200E796531DE4EB663282065974F633ECE07D4A0CF91F7087EE
721F64CA0E33B511878F1E0C83E0A111C77BDED2B8F8AF3E78EFEBAFDC880749
33F8A57892EFFA417DE903CEA643F8ECBE4C52A10C03486C1641DFBA011D5171
8A417DAA9773CBD1DC1C54A7BAD4AB74D5FB8A93E4D56954A168C4914234DEE2
C2587B4F63EADC97B01A25989972496566E492F10EC7B88872E9ABD65E023C7C
E0560525A8DA4CCCEA32F995DB32130C3F687160AE69F144832469CE1088DA53
5DC05FF15EE71A6E5C0F9D2C2DB0A0E3EE99F74006929E48045A055B93F596E7
C3F3F02E3B8751E078517F614A52C9CF58B499F22E7C6EC024BBCBDDA2519088
F3823665B10806DB02FBA0707B0A9B94E0BEF9D47D21527A3B1D808785CA310F
3560EF18E5C7FE2EFE91C42900EBFFFFBB7464003BCB709A7E118BA9C5900EE7
B1E8CE89A55C0BEFB530C7C62EF7F7EF76DFE5D49BF413AA1A5444502CCF78BF
F5ED16E6503D4DC2FCA7AE4C781A2AF6751AC2366302A1989756D54BD4331E99
B92136EE97A6F8588D8F6CC97A0A35A8F06A7361E0635EF78EE2521C2A294187
64E4E0B90D2F66BF8B28CC148252E90F6E7536E42E562D80320AD93F1EF73F82
0B00E188F569F66DEA6D6D320CC018D4B2CD12C56C7856D4B0ECD4E415CC9290
C79FE24F1F8F350E5893F1942DEF04E981DFB5879B9FFDAC29EB7836096DA558
5F9EF8D12FFF1130B63D78F0A56D5902AAB912D757CB6EDB44AE4BF87D2B397F
2CAE33909142C78CC08288519739BE3029B530AB99921E6EB29842A5B221DED9
1C1A57EC7ED634879371972B69D0EFAD4132CDD1B9D93CD89B84F14D18A2C653
EF52DFD5BD5FA826A95FDCF3C1DAA7F1FE10CDF6C081F3345BB234239D34279A
66C235D83B848E819175C4E9E5718AC249802208760C1D09CE83D67D926816D5
8D4E2306026405D970EBE3EED19B705CE3A205C3F29825075574FF2D8B1042DE
58337C8BF61AB70AD1C6615B51881FB83E438FA71159232390A95A7E5AB85DA3
5A4A00452DBD61ECCE286F7D11984CC3287761E54228CC345D7C5AD72C7EB3C4
2AA351F897E55A395DF0E9989EBD4CE838CCEC1AEC33A784D8469A62C51134B7
EF26D10EE05685EA4B31E5396C4284C148FF99AC5E8ECAE12389B1A302E16B7D
B5970B85A1E7D816BB65D88A7AAD93961976DE90E40187EA775CC1E76F093F2F
1386A15CEBD69E49C8FC7AE15E6B5255957D6F27A4FC47E0F66B1018EB89CA32
0F74C91902C56330BEA29CBE661AD52A63710E4F7D1BD8857EC3B612582083B3
23A31BF1830B1ED3BB924EE2CF3F5C7528E7A50BC975AFF4CA62754B465E1238
245E283972604E3D5911C991762C0D278229448995F2681C34040A107D9250F2
0382EEF9893042350E8125A6FC1CC6271EB7B2024B4B88A923049847881947EC
EBAE94FA366C4D482154A3C09606B11BC67975A2DA68BFAD5210039E61598ECE
5A0703A9768824045B88C5088B012E82869A09552C1998045CED19831A142A95
840FC5849DB4C1990E870E808812D8B61202F272844DF92CC28D8FAD80AD511F
464AD61EF8CB892CD8541D4066FFB88BA2EE4ED4246CA0155F5B089B3D9EC972
D59920550497162B435DEB3C8C4FCFEC8958430EBB1AFD7F47CD6129B2FD9FF3
0E64CB7CDC3ABB89CBB4AE7B8AEDDC17BDF457835F33BDEBAC1DB96E11EA44D3
5D45ADFCD296F82FDF5B7C98854899BDB1396B948731E7908F16B9080FDDB4E1
E86D6F0ACC65A9E09964127BC951DB04055489DBA72C24342D68B5C888B4E959
74365DF26E91230B193B4B81FF539DEDB60DA16014BAC758B30905B56CCEDE37
F37167FBCFA2CC9AF395A2C774B5830C469036ACDDBA116204959F428EB91605
665D4DF5AD80F9C357CA8E2424585B9D34982C57A2B441BCDBE88FCF29C98487
6BEFF75AFC65947B449F2347AE14A41C0BFF9240EBA6DBA43BA20FF624A59FE2
DD70FA7337DACD25AAAD8279BBC4FCD3B5DB37880CE771CCC07E1B2EDE3B4418
CD44C3FC0CA87635FF92F1140E8E3FE7F024EDA854D4E210DA837B2F6092416A
E6CC2D04137F6F40CB8387218CD94EF127847A48B648FD0B65D671041EF49EBD
C17F49804D19359F53090C4C06B1E23B3FD8F26CF6173CB95EE29288F1DBF9A2
5B6D22FDF0F8C283B3C8533624EA8841787FEC863F584F1FFABFAD3A2A3082DD
7583FE4BC0A3A30649486C002BFB9868AAC89E99AA29639EAC0FB9701025D55B
D054E058D3E91A37F6674EEB53294C36C60F1F06698D3E30BA3AE1061EBF250D
3EAC620D85C2B4C0C637EE2910757696C3F135ADC5E054064B3E173C14293A79
645C7F3E359DE5E3A441FBCE99C8E610006C5A8AAE834A0587D990024BBE8079
A359EE56F352334ACD0AF4601369783A83EE1F040AC1A704C465F93E9719ECCC
2067B9FFD03692B957A6C358E39BDF168EAB3B30CD4F93304E9E0DB55DD4D849
77430C197084EB868C4987222A5CF0756E45F7BEB06A442A752EA22AF269313C
F93D62BE9F3F102122C52BBFB25943CB7DAB82C4B4329E5CFF8AB0F213E9D5CF
55D42619EFDA09F795DD3CD508B405C6BD07CC7EE9BFE29818FA8F30A2283B58
6870FE655D6308126DE32C494C6AAEC4C3DFF99CF458230A1642F9D6F432581C
C32E2D7F22705C66C50E41E94B66B5CE1ED0AD1ED3B185D5177C11503F233E09
A7514F41BB6502768B60981F6FCD12FAF9386E228DEDA6C25A88C4897BB9BFCE
16CDE9E5F075FA07887692B21D5348E3F6FBFAF7313B1FA589C0DD6CA8863D2E
EC50FDDCD73F2E287FE61B3AC6E94EF7B3A3B62B5DE8335042BBEBC8DCF193CA
3D40E5337359272C8D48EF2F0550746CA3B21B026E261F8D920C2BA8F9DFC863
07C5A1CF559D2ED72E787FC95B7327208EC71CFA4D76F680B78186D7F391CD91
B6222E88C0BCFF662088149C7B47AC5664BCB5A71663B8B0644BF7E5B57B4024
BBB093857358F58A400549BAA570F95B97AE0BC57BB2455ADEAAC1C1211B5F1B
A6E2D1E4A45CCCBE989F253C9D32FC2E5DC819963D8FA708A932650890ADBEF2
B23764FAFBA0B885BDD576555B4CD763803AE6795B23AF56AB122D20FF8BCFDF
1D312FC0FC0162F47FB4D8D9034DC5D21C5F7FD494711BDB12C2B9B8923DB092
390E4AA069EB5D2E7DD30C7B3ADCAB60AD76E6CCA5E6E543778DA5DB75C8A4F7
6C9B6DD93C12E49D04DC071AD33B118363A9736E865018CFA9A68FC5D652D383
688537E7372AEDC7B0FAB1037FB0997B367483D2C8C0D44E6111CEE2EDEAF46A
5B51AECE84C5E04B6B5EB9E250F75311BEC3A7D3BAB6320CB7B552FFB89F11EA
22D02AE6333848C9614C3ECD9B4E9B7F733FBBAE7E723C2668B7E3840DA5AB48
83C8265FA634F542804658D30A5BDE1F29C1EF9026F35E023F344A403951D22E
3E1317B98CEF60A20EB9CE5C4112626F2BE1339F28FEABCA020520722A4B1FDF
7611899382F85EA515D665F6BEFD477FC3D2D0497A8FF3873C2CC787C1F19B92
3A37FDE7C43B6BB0C8CA4D1CA0D6F90E34AF76A51E49D3987DE5A6D98BACA13B
CDBD11F9403DFEC10FF237E38BC8E19B81502A19E0BD113AFBCED31FF4C8EDA1
464E4B6822B0EA9B636F53F71DB75FC7547240E389590D1BB9D82D6C8D5A1ABF
35B55863014E169B35B4AEB6B72F30468065D1A2ABF1AD34324CF1F1E1889C23
B903B1D4A9906F3EAC5DE29FF4E6F14E800C626B88DB03CE499BED38F0342867
411C63FCBD0D760122D6087973C557588532474D9E9B852BFF97CA0E30EC1EF5
DF1E54C31DD9978CF04C83551CE25FFCACC54605E6F0CCD7039E630D0A7BB94E
D4DD307A0797DFC4C23E080CCE8249E41DC16DA43F79D4C8CE6C8C9F8C6B7FD3
BA0C88D7C77FB1097C6B36D6495916FD69B176E7FFD992D32ACA3A0D44585E55
AFD968135F6492A9381FA62AF53C105348362C617D60BA3678C8215B9F542D81
147BF849C2C1232558BE93CFD51749E2BF23570BD17A6941C4E051D096CC40E9
31BEB074AA9E32BBFA361593C34E31020C52054F76ADC3DBFF65EE19016B5090
5C922E037BF7E195AA7D0D01C7566243448B222D57B811EAEB33F079C61DC5E6
BD7A0BA4E864DA31832CE3B416648878CAECA33F35F17BC136551AB9E354C905
FC9C5EC74499F950926CBC449C788B427ED303F7C710D50E8F3FB1BAC2E66322
EE907D1C3FF4A6562E2AC409F8A6677FCE87A0FEAF88BE6DC191A3FB5ADEF3FD
6B2286FC177240F56D455B0BC940D1ADE3C4488AEDC5005E81BF78DA789816EA
14910656948887FC431311F9A5F0D5B1E3F86D65DEB7A7E8EA484E2B9BC3B493
6126CEA5662629D66CBC709907C3E14616874AD27FE89777BBAE47CD1B4DA518
36FE530BBF2D38E8B49287A1D890E8CD6EF325DCA947C849336D7CAFB9D8C023
8645C253E713E1AABDD1C89EF29A16ADF045E0AF3C46E20A43273FE8CE2AD4D5
632266F5C28ECC3F08B56E8564F18556B5F1DBCFF100E971ABAC877F8E16E0C3
92019E33F268CC072F36EF12323B8A63536C67F00F622D32DD9A0656EE7273EC
391D3B541644A069A6EBCB15182FFEBA0D3EA2F81423D30DD56510C69F0ABD2C
8E0CD7C390086369D35D3E5A083C3A4D975F4004BFFFC328F44E8D61C0AA41A6
7D2613F719359961E61F4A5D73D7458DD1EC86915E218C0ECFC7C776E8E8B725
ECC6514500A943D03D2CF5D7821941B18FB1620C9A7A54C91039E273FE0FD00B
499E22B8CBD28A8A2B5290E7FA7D4518CEC7399BA752788E65FDD0BC652886C4
6751A5689967512AC84C42DFB2D9C47204DC667E73F2AB65B7BDC9F704E15D8F
7E4DE009307129C042F299DF345C143EB8F2A289EA703C24663DD7C2033891EC
B65C2BD2B2188B0E51975F6E3E04F4B21AFAB6EDA8E5B1196BD5689E19C3E604
F93B012ABD81551CF0D1D32D38DACB2D0D51ADE839CEE8954584CC933FC342E5
C1A5E35BFDBD9D1711C55D85517389B468FAEA7A34B37F753D0696CBFADB12AA
96D16B81820AB7E8B18C7B8C47CC810857DC14178B61206A62F645EB9ACC9FE9
7D51EF71E950379386AA2433B68A3510F264B4303C8701718DDBAC3D05EC001E
45AE4B4DF4FFA56A85E06839D169AA0752DFAC85CB745676F87833CC5803627C
6DD6BE703B85B709591782F8A664335F67B9DDE36DBA793EC77E5A71870AAFE0
BFDECA8155EB4B4622944D399427F1230F4DDAE6C3F4EC3510619779B08A7375
452187D66B2A42D991412FD0F9478322215E9F59E69396C35AC4097C48DEF09B
BAC7C1663075E687A185645A2A6D34FB459435A14FE61E425E2305BC90F8BABE
84F9216B8E07B7117ACBAEB7FFFACED5AFB51E844407E0410E9CCAE5F3D4B113
F38D148B333B227D98FD7D7AACE727F2E8F0032880203B5714CB9D2D3330ADFD
7241F285D511A410A3CDC6B8645B91D5043DF8419DCF881E4A57135CE1EE3D8A
6C8FD26ED4A688023BF4933D7B415FCEC04738328542C8F0C7E4287325A010FC
44DCCA752F57806D70EABB20364ED69689DD84408EEC4830380A6BD3E210DCFC
74F2D5F6D5A0D236C9E8F639578E3B23388D40D12016975E41BD7BB9DC36CBEA
7C2ED59423853D6650D0E4B4C9307EF038EFC594B1438B4AEB72DD3680CDFCE4
008A7DC069017C2E71E4B4F1A2AD2F2CBBD1A04CAD375F74F86A85945554A849
C5F2F57D79D880E13273F7A423D64D16946CC0EEFCB46E6DD65747A981438EAD
81C85FA3CF7A578EF3FADBA3C5F91146D045F3C5D5CB3E7541626E0698F04B1D
2A24663AA6A96DBD57E0710C7318C152697C6CC77227BFCAD617463B1D8D5CB6
770DBDDFD8C0EC2F42990FC8DCFF798F2ABFC4F3539392985C4CB324B0007C28
9385C33EE973E7CBECACEF5E50D132AAF7E7C32A907241C8C0F00248BE459F80
EF067A8069A068E7AF13A60E732B7721C7A3A8D01276AE06E8767ACBAA92E175
1F28C616BFDCF80180EE6DC71C01AC6AD353810CA79389B05EB8E2DD8F082C1C
06DABB32BCFD7EADC3FA5A495E46B2A74AA02ADFAB59DE70F679945611D8CCB8
AC705DBA58777E2FFF6F8BD0DDDA24F9A1F4CC349ED95F66B4F0577FF148B2CD
A2B90CB5884440F464CD57295728AB34188B3B0F66D6FBE90722449668684752
9F68DEA6FC271C7EAE6E28CC683E82F754CFE79598457D94ADE4221945C562A5
BE309D5D926AE5C673625845E1981A3316FFA33E7E710108A7D53A4021CFFA25
B6D7FBB581F1599B41CF37FA0EA881B42CA3AFCA0088BB227E90541B1248C484
90F7C5C62DF833DB9BF71445C13667865BD390086496DD709A239A40BEBAF05C
A22C94624084DA4810EA7B0C60492F5FD832FD290A6EC98B1862CA0BBA0FFF5C
84F6E298C4F428617BADEE752997B94093316F759BC21FE74ED1642B917B64E2
96D4E219A3597953634A1B5F39D15E1346BBE8940C2F9BE4BDDA2E4322C05285
167D5AA41F58BC269BAC8C5CEC0CB4D39B394D5B99D460C5C7CA6111D592F418
4FABB849A3676A8D175D44E71C44B41876C1DB3A6B32B70C9CC4B27DA28E97CC
A8A887519A13B5BDE71C21B0F7B7119BB0E1EAE6A7874FF05F50699B8B5F7C0D
86FE126B9F6C0D781DB6A0FC125B78E73DFE23BBFDBD098BB8D82C80AD568C91
A27E784625EB3D617CA186D413D7FBDE7A1DE16C177B128893D0DAE3A17FED98
C426668294F6E5A32EEEF36AB9ED7C852046C769239856F03E138D66F8F733E2
292711021126128DFDE2062EDB9B4584D8AE5F131372118C624DA53078324B9F
B7783C8A81FCC602CCD47F4BFD25E5D4B24CABEEBB4CEFBADB2725A945235019
2F905F9EFE36171716B5A42600AA098B44C0A422D25FD07EAD975D4C14CBDBA4
B003193A926B6C6555E53868C6384CFDCEC2B611662B1C1A3196210E0C1363B0
6E0C4CB49A374F2A0C1639516B3ED40825C75260C7BA8A5A0847661FEE0F6B87
9F5B16DBFBD6864F5F56DCBC56050C7418E90552DF6EE5FBA2EDBAD394C7A7C1
55763D1C8BEBB691166245A8E1E184638D194D7B7F4FDE7B730558C056E1E29D
254B378311A8486882520611165AAF3711B005AD3DFBE56FD10239B524A147A0
E22E36D409E7F908A1CB6B4E498A7806D41246696D3C4566B179C91DDAD4676E
A84BE72B3E94C941A5F11E5AE7C363134DA775544B63D281D68BDC451D3D54B8
75B02A026097A3A16532832275274641782FA1B936C2656B59AAFB74F9E40E68
0D890903458CBE3B430EAD193A55D17766E680F2D445758324D4264B375C33EF
0A5947731C8963554083117746434DF37B10670A2C9929090294676AAE3ECABB
2F4E65F5271B585DF162A94425D2D64528280D0A829D6889E75E678ED39995AA
F8C5F8AAD937150B85ACF426AB35BD6378F1BB454A9B74F8C7ABAB2BF36EF76F
0DC6039EBE148F5C61D47C2351FA58CEAA6DDECC26766E3F8811E9DC18E7C972
A15FFB9763FEFED33660D1934AF6FA017D5484E57196166B91010B15361AEB6E
BA6EC5B2CBAB37D499C614331792901E33FAB764518A9583AC13D9E1EA58C924
B399B6B1185668FB48DEB0FC94009BFCD440591393388509BFF3D097B4F9B3D6
C8C849F44BEE148770DBC7892901BBAF55878BCB7AE64DFDD2B77F085D1B0519
203626F907AD467AF57B9A8223164D450AB42FACC3F7316F41F81C3A2541D72C
2148DB44848DB4EEFB8C36D091BA34DED177EF670E421D243D79F10ABB4F3D75
95BAABB90498F253DBBEC38263B7B569C7B8EAF828C5C0D185E8A92A491E7741
4937E6FEC11A9A9F4011B1AA6968724A0841D6D4BAFAD44DD0F19020000C13E4
D0DCD2ABF980A506ADADC8AEDC3C3025068FEB397445E07130B2F63B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Bold
%!PS-AdobeFont-1.0: LMSans10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Bold known{/LMSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Bold)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /LMSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-460 -297 1761 1134}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFA25B3D2E21970B61BEF6BD441C0
853BA8F00600E933C80C0916170925A5E999AE3F4523441CBE8209ED95298D28
7897FD39E60633B3341F7B1EE39A74B7CFCA379A6C2390E7C26A4B9C8C556F25
96A90868B428CDFF58080D414AFBA9B90E752A5C7F4EEF6EAED9684DCA7DB0CC
268AB1DF914EEFDF740F44F538F1E841659F02898565FE3B1F13BC87C5713FE4
FB373864385E506D1C0BB65A3CB8E10A78C20E5BE320989BC3E8C8E8E399FC24
E0BD4271E70E8D7A8F7683A4756AA988C5E78DEE26995F197F2360620656FEEA
739826F54E14481B446F1D7F68111FFA8C859137AB1F8E90583B98BFAF5C6329
59CCC441D095D44570B010FEFDC0DAA465ADDF3CBAB31B8A5E7672C9EEAEA7B7
A345AFB8889D3C53E0F9619B8F0C11FCFA80839B0574D91CE6AD50613E12BAA0
115864303556F3EBF5B786035121016A72100BD90BB46818BE2E8AA15252FA00
9F20B1F01EC0EC35CBF7D6C9684AF91F00880B4F0721698DD568E1B3D09641C0
58E5856E324DB2E378120A56ED141762775C5AB88AE8BB5B6B18158A7A9202E8
651774A479D4308E7F29052733CD2724314AF8C61999D544071407B7774A5610
C7A8F6EFB5792C23498F7D5347CABBA2DA469A957BF2BF33E8E3045016270416
4B71642412D880A7601B66C002B4EEA76041F2746847EC01F5EB5744F1EA82F4
163BE681F7F568158C214BBB58CF2BED8BA9B4030D081D755D41B0F8DE4AD0E1
F33A1CE6E38EBEE8CEC6203C2474727309D75E85A83DD36CA1A05A37C9D1FAF7
E1AD48F23A222889F92F15AE9C33A8B3E343774FA496C5BFD6D9C1328E16F748
4D6390CDDA8EA19D086DC2E49DAFC1535299AF0F42A16E89B2D395B183098334
286F4678662DDD87FE71DAC85B1BEA9546CDC788FE623C0EC28B6F1208F01B4C
5956B9402DCD2BA235EA01291DE436B80388FE6B31D225383E1054FDC6AF7600
608EF8DD116B8443675F86A09522E784197B8AF0E94FB9D58D6EFB2331717D4A
8E8F6FF1BF9579B1F34F5531F8268729CF0433C0043389EAFCFDD83DB8587A4A
5E4093F98C7CF2C497B2DAF5748CC962423593E08EF566B55D4BDA83DA713D53
3BC5A90CCE79572DC40AB078E228F38861F2C51F5CF5629CC41AFF7700001FC8
38E8843F5B2D5D6FBC1E930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A
3BFDCC677895D8CDFC66887FF3C563185662EEE213EC8671211F7317D00BE0D3
0EB7BD4463F7A542C9A7373C3A40BE476AFB688358F195BDCDEBAB71622D0A07
E8894B416C8D24FC15F45E5961D4C11AD4C569CB28F6C6D112762B8527CBE338
1953B0908617A28D2D6EAA59BD102BAAFEAF854C1B48B036052A3D727C050806
2BAC23C2866945E46981F9406B6E4F61160966AA3922C4B0B6ECD515EC314C74
93E8924708EFB767FCBCB0F795CC6D377F09A17FB2C3F45B2E98C37EC1F64848
F36CF72B5D3FD84E73F22023C63FEF39B8BA4CBB8D50429B985F23EBA0C907B6
CCB4A57AC0CEA9F70D952224811BCECEB52C86E3666430E4FEC39C474463806C
E627529201F1A70ED484FE92F0C684F4A045E61AD94FCD6D373246804BA5F217
1C5C56B6562A13A43B92A806EB2F90AB0BE445530439E0E8AE43B439654E6175
E9B3AF676603DD8C5F5B037022B38CB7DEAAB749F802FECA58D6E39A107ECE8A
3EBE7E645FC1DA735CF09EBF4678CFABD1A6D3FBBF8357D4DC0527C2DF2E6C38
2CF8541FF7E243AA7F16F534CB8E4EEC56359CF1068CEE7B5E2928E43D4A764E
F76A128CDB6111E1096709BDB6D8C9510DBF277B31B8BF2B86755746BDF7C38D
8480A71A9FCF98F4F9501DCF69FCD870565A7154A43D5879042740352282BB0D
FB808522CB0CB8C0D4B64A6799C8449E97E13CA0AAAB196E8A40446C77F005D8
97D944251600E7A6B304DD76E08FB03B942847FDE355DB3C39956F9F914DBE11
2C8394C82D57D654286D5C2C2D8E6A24B34217D101BAA3037C63ACE221E3BBF2
A45CE39B80FB268D543A28FD409DB32F938FC52C0AEA6475261702FAA0ED37FE
D6546463AD649C32D00F99B504DD1602FBCC202CC8046BB4EF5E5E1F85305297
0408E1B96714C7B1D4F806F88EFB99AF0D7FA4DA1316C3C5279767142D132F62
EB21701C915003C885E577E9097CE4186BE217A2F3DD498FD152C0CFD0662D31
8787C108CF6922C96AD6D8D0C2052FF4A76D691AAD97701382DAF90A28C0896A
C2934C35E1576099082701FCE199811DD294CC46CF1F0662D1D1E9C9DF1DA786
6A772E358CDEA9FBA4EA2EC4425B0A4947CE3C4A3EE986616449FE094A5F910C
93A5B74FF64283F15EAA51DF4C74CBB662283EA4ACAC860B567466240E3A598E
0D31B4BBA740CAD470D8BAD77608136DE5C61CE6B1953A900D0847C53F2A87B3
226F5E1F4560A4C061DD345142D8F2F4A85CD7DB687B5D2BFCE80CD03235A95E
DDB64BE30EECBFC6618D90A399CBD792FE3855F316DC33187662B519FC5AB1FF
FE0A6A33736CA5A0A7A75023BD9BFDD0C94753098D5FD28E46480B0DD99F4679
772820B94DC7F8D4C2B5A8BD9D9858193BC1069471D0CA4DC7AA32B72C9C5816
34E789A5C10BC1E93488DCC273143E753907B15EE37DC5F4533724D785C22C64
5809C6B3B4B8C983004995898EFFC985D007AE44672530620E26E88BC793DA7E
638388619EBAB9C62CB51FA723C5F22F5BE5873D64C726C983B33756ACF3FE3A
D85C6A571F2C32DB6208081585CD9A312B09793B1C1FA056374433EA2FE095D4
A9761F4DCF1E7FD3ED380701745BE983D2F572BB56C524FEC5C3D513E8B9306C
B9F10D1D8371169DD47A3437A02EF556D9F32B061E78C54C768A72D9586113BB
DECEDB4192AE9991497A922907E2AA79A60717C38B23D7CA54BD43619A46D5FE
FDD4D548F4A1B5C4BF78895E49CC6FF69C287D243D182304EA766957C4B309FA
76BC36084200592A259BC950CFC7BBCE0055AF1446D3C9A163230C5D3A4A9445
5AE704A09A3F3D68C52B226196F0E466DB8BE5C0AEEC0B983770CFA038C3DB87
BE396947FBE8692B77E9A6F66A56FB00A1B25F2BC121CF9F4F5687CE3FBE7299
22F42CD1C5811F86578F44E5BEB7F997758232B7EFE394F5265392E03264AE22
D81E75A04AE68344A9F151D5B3EC66EF1D37916398FB8CE955E12D8A89ADEB15
FE0B39F2C388F118806FAEF0361E5A30DA786E599B3930697B0E81958D7D8343
C840CD6FD8CD9CF8AEEB9B406B7A6D96510D772EB2BED726D5F12B4487AF4052
AC962A19C387672A4D101E1BFB07CFF9F577580D64EAB72407B03DB1D677859B
E22829180DC4FEE2F0957F061B9FA20CF2EFB32200703EF58C425B9A7D211E88
884D5B37EDC8DEF2EACD9C3985BA9ACAC69EE37073ED2DFE552E96EAE73E7AD8
0E3341EF23D94DC5831D1F7D822A57E0BA52FD6822344E2682F728CC93F7D006
4EBFC23908C4EE8655E12DCA4E6B66BCB8909CF259E0895B44F511485B30A847
09054F39D5251DD662980C233DFE8180D5919A15A56721FD7F5958D74150BAEE
AB1893860BC643B4EEC02BF0E32A9F6594912546C8A4CE88818DBDE72D030D8E
884D315F565E0C09604AB40535E4200380CBDCA96015D3822CF62D8638273210
E607B04566B99B40DA40C25FA70652FEEFF9EB42A6F3428012077754BA3854A6
0A3676CE51E886412ABE0FE0C8BA6B1417DDA84325C4BD172D16BCEB6A40A8C0
A605330138712B946D2A52A16E65275E26F19746CB31965773A102E9423004FE
6A5544339A0C5C756092C70A1C3A48E4A23B93E45BC33ED9222E79875D7A08A4
98309BD9EF4877CF69B16E9D9F6142DDCADF3958184CF236F1E35390ED1F91BF
9908E7115EA205C0447774637A4A3F44330E3C9A22160C60A2B686FBEC34A6F9
E693C7A9397156839E10B3B329E90F3DF32DC7AD923C6E4AA1E6632B22D51073
25266CE303564392765BE37EDFA40EF09A72B1959517A0630A94699E2A1BD96A
B64FE43B3A1E4F7D4A024217CDB9933A718F0E6D9E7DCD58675E2578A9CD6E1C
ECC57FEACEC6454D27E0FE63F142BF6DC075F7F924B26DD852D73CF5EEA5657B
96F3EF4BD87036A247571D2628CD9A1A562F1481E1435F2F21563212B299C296
401C85FCEFCB9B92D2B2638EFF073121B6894E316872689D43888D8F91A7705D
0F2FE3B530769E8A05271EFE69C67B6E0BE2CBF2C0A0522F8D6CB3BFB57F14A0
0BCBA2861736B098F178753B4CE703F00747B6689D8E51A39E859BE6FB98E9D1
F484E1419B199244E016A893A4A50057B21E4A9156EDBBC4518671B8D6440A28
2859DB641ED9F940FE498E0563D57C1CAA5CFD9004575AA9F1AB91191B962D67
66D7E0504EAFEC90D0AE1BB20B633D31290E01C2CAD9E722CE4104BCD9369194
2E935C838E2CD3A397BE2BF9A9D0EB144329B8DAB35303C922432E92394A9519
6DAD4096A53425CA7CCF57F56D75777F663BB0DA931A45289F8E781908DDA9EC
89E2F19716811BA35FEA5AF6530D0CCF381F8AA02414C2FF62583D166455F782
1A44C27994A968B307BAD182590898564C10C3ECB18967E8E6D30061BA81ED16
B267CF5797437F0E0A3CD668D7703F07B479BCBC43190EE840144F9F053FC850
41782B25B9A9FF3967D97D081595235F72C7CCB4F96B387DC8B089A591134C19
16E117FFA6428294A528F802FFD053FDD26C83FC5061F0ED446D8A7570F3A184
059390CF3393712A465882AAD1BCC907868E8C5D604B543594D2B0ED9AED03A5
2149BC1B5BCA029C9FA00D7AD9069C323AD2E15D0E9438C4961C5ABA0A0C7509
F84C229C62E68CA7CC20825AC0A6B1E339DE260B1B4C0048295BCEE7C94E6B15
52C089EC49D35B8E99B6A625861D2DB4119661265B9B784011EE7D6C195D979E
9E98C9A7924CE582EC2347A9D9D53460FB26C5E19FFF0DF9E2E43264A353C3C6
AAE69F73556EEE9E0CBF809328C5737D7917AABD0AD9A87F485E0F12C0FDABD0
9D5C3E33AFFCF2B17C22BD326CB87014508423BE36B22710938B33114D55099F
0CA84BB201CF629D11630615DF446C732E191427FC63A7A675AE7AAC016D0A08
0B4FE69807BC5F37C37F75307C68061FE700D79D6C779566ADCB995B47A47124
22DFEF01EA631F6E5651D078A77B3B6BA95434EFA3EE1B88A190668ED326BEDF
8F0F2A87F5A4D9DE2BF184898D2E790305F97BFFD1316937B5B72740AC92CC2F
0EFB3B37149FA050E83F542A7F035AAC02B40590A2A6EE2542B885DDD5652727
A214F541E11B0E4BBCDF33D30383BCD329DBE1B0C05ACA02CFA5F2F0A23FCF10
C02ED8BD1AF09AC4E8A0BD65C68721BCFE282588EABC04F4E40A42037773349D
E530D0A2E1480210E0BA1D53E704FA24F55107E8C5B9DFFAA7864BFB764E1A05
A4D64FD0AB74631A35230401234B327CF6212A6711889B9BDAC517D8BC6677CC
095B221419C7CA89429D19F939C8C597C39AF5E9C358F5300E46BC10C22EE55A
E3ACF0B696E4444DE0BB3491FE84A631581F3F88838EB78D4A0438B5941973F2
D74E66F11F3A1ADA48ED0D0F1B79AA194C275E02F4F59BE1AD936670184386F4
66C2AD2AF67E91EC2B4B1BE8C704194D72A79D3053643EB591366950DCA06596
B169C9665511507959202B1A6E0C0F58C98B26492559C69C8395B1FA4C2F60D5
3E771F373D3A63E8D2340E009242CBE02ACEF37735C24D5F2359E372DF28BB7D
B86376BC7F7708D9DCA348FC2D787BF86ED78492C31CE4E8AD0913637E245B37
5FAE983FF5933ACD2938305FB7CDEFEC635C4E3E11848E18F75B5BA2F0E744AC
CF23EAB3C9E0437A2F11AADC43B7BC57C02B4C4246881AACBF67A4572E16EC17
5895B413EFD5E89EA5B3777B90468DC99A9E9E4A7793BF6A24F0A3B7BC194C78
54C54411F14FE808D8D515C07A34475CF4B257A56C518348D27E0C312082BB78
5A7A71D78A24115C3BCA0647FD68538C8EEC22E840824CEE4ACEA419A1F83312
E0CBB7F34D361C8F2FA6586429159B5C453B1A669456474606B11420FAA7E595
971F2E3ABDC4C7A7E2179C4CBFC016A8E893C28EF549CA3C0F7C816BA73C7C9A
9860B096DA037801ECB5214290DCC5A7E098E4176CFC9D963D769A957C8A11CE
2A8DC48181C93F2AFCCB0D62BF85EAEAE51E4D7B7D66B4481823B60F897FEF7B
67934AFFDAE5D2205E9E7DAD8A3C087831F46724DBC7AADA19797B2A3AAC7589
95A7355F79D06964067EB775D78F851D34B6EECC77D163847E63D3C9AA412D10
A3A12FF18085EAEAE51E4D7B7D66B4481823B60F897FEF7FA1E11EA96209ECD0
CEFE72D5006B5CB38C7A634DAF012DFAEFD098374854AA3AA151BD54DECE76FA
EDD01069FF7F3777956E984735F551A81DBD3A13D927138D57A4A59284880F45
72C145AF82C8EDF426DFF6B247F7B000C11A91ACB087542F94750DC53232E62A
CC3C660A137AFFA94B4E72EE284C44A9C294B2B18D9A2E50D90BEDDE7350CEDE
8D8720A80DB951D1D9FAC8ED3EF4D4B29C0C8B5EEAD8E0241A38E993C5466FA1
0496515D1B2F88B7785BEEA5DAFF02758FB7059BD3600C7881088CC2FD55A802
B9B3F1F20A28658292009CC125AC401A0E0F6FF4AAEBB939DE320592ADCBD738
746D3E9F1CCFFB3D735972F0A9267A28E44BBB2787712CE3CD69C6D0DE08B308
8370534CA562A06A98ADFCAF9D29989D2306690C9EAD14750E89A9B75373FD96
87F338923606C2DD6B0559C69AB14D19EDC2D37EA94239542DD31EE14548C353
614B3F9B5EEAB01EA2E3783E06B4B229FFB653DD37744ECE75CD212E6BC289D8
7F1E08E6EA810D7009159F18CEE19981A410289C94B6EC856BF8E913D36CDCB2
ECB447235984BBDD588CDD10DEAA79E7BAA7E7FFA6685B04C99E4CD65561E2E5
608200B86DDC18C5C81A4E75F8E71DE4BC55D3E78A9CB5BDFFAE7EC801AABE09
A13A368D902CA37F85D67CB62F2FC7701D35CF7AD04BF3CA9B00D763C682BA70
58FF2B516EE6A1F62AD788D7A56D82E14BA4FF86D1A71187A40F5776AF971B1A
2B727DBD281864991281DC5ED17653DFF7A81FC83C826A94C6EAF95E95B55F5A
9139E7855677B3BCEF2ECC0DFF7D193145874412DDC3B41D526D99AA5755841B
A8D28860C3CC71E164072AF8B942265142A0B33145DB1F3C339A30E9D1DFFFFB
1559C371159F0D61B7E1CA292AC7A96CEE551D96FD19FD68EAB2BCF10CA21818
B531AD10A20BDB91831E44AE4A37242EA4B8119A3159E06F45C84054E62F752B
32BD5B3486D471A1D8C9330591D5D7F5E37C8646D0837FBB476C28FC1B1B3E5F
EF3A3B94CD552E29288AB0A3A34A7B5426761F4D258EAAC34ECAD9AC58CA06A6
C900AD89E1F4E000B8C4D09F4E9942A07BB377305B3AAA5405873F2BA0040817
09232DDB1FF530022496525F9ECDB8CE8E78B6C552479B1E51C74F3BE16F39C0
B59D107EC95C2F50A4280C835E316588A64A0B14D9A6F44932C12A2E263D0472
13AEDC309C0ECF1B3312511286D8C3D2B0F95C039DC0E092573197CFB0B7FB99
0F7F393A62B2BEFEE5E27E777DAED707339191E22C609DD2720E8BB454A575E0
7B866F2FE7FD3294F1669EA97B3BEEEBCC270277CD2F5485DDE4B9D40F638A3A
95DE5DDD14ADBE71C95EE915C6FEE8103DA73B5D782BFFAD7F7C029E12E24415
D06D2F587530D12214A3CA55B5C2F66574675290EE698FEE1661A8D1A476FC17
44FF59909EB59D1EF232006A8A358C12927C72729B9270A80E5012ECE68E88CC
E42412993FDE0C3C995E7B4F96AEDFEB4ACA8A2DE0CD63FF09EC639486E6AE74
7AD18B5EC3312ACFDE8CACD53D969020B1B90028C373D3448E0E6CD1B4900971
00D50B3825D862525CA5E696419DD057227534D40D1E2F1976A39C4D85EFBE68
9724B63245C8C4EFA0457F1B420AA61EDADDD60410CDF5CA46C0229EE2A94B20
BB08490E8968CD02762CE02CB727B8B6F3BD316617B3C75F93CD8D9565305EF1
001F84DE922D6A9B5C3645AD3979D2F4AA17C624CAB35B85963C6DED26208EE6
A0988C56A71701327F3123ED0ECDF2560422F3990908D9352E7E4E5DDA08D38C
F2E05A5712D191D61F182446F46CA78C897700C09C2150FF9F4296940872FD91
598FDD7480FA2A14FCEE4706AA003DAE9F92D5C5549A98B939BF23B27B2DF046
F314DBFE68DDB61B2D4B9DB23A9251B352D6EC3623F663BF60052545C40B1E23
1C846AE9527227DE9FF96147F750256CE1DF6441DBCF23158E22EA6503B560C4
9D125450C406CB538A784024EE7B75756A5A66EF30FB955E04347E34C0950E25
0511B89BD2D8564975D17D8E0A1227998D4B94FCA8042756F8B3D08ABFE53BBA
04D117B1E1CEE5EA815FBDD0F08D89628B663DB06992292E4EE841E84D80C291
C9516038B17721F1173793087399AE2CD42EA3950E8C685E163310ECAD03B3E1
AC0B42621E941004494669BCBCDE44BE8B997609317C50945E7DEF65F98080F1
55EBCFBCE24CBEE589BBD9B102E4DE299FC9762C4E3557F619E50346D09092B1
D0CC7DA0E98AC508DEC67BED70EBD6ADE595B9A935375F3A7C6D6CD68EFF4E4D
4CC00A0AA17A2134012FED3E53B9A042CBD9DE2B19F5F89F17A00CB10996932E
BFE55282BB6318921169C7F112991FDA63181543D74A96DB7DC60ED38306755F
F45027146DE12236D225460116BF4C299F921D810E01B5B822FF00B3B1E317DD
23E5431D5BE7BA35B34EB84BD59C8FC9005C544BC83CFBE834E803F42A5648E6
561C12F0CDB0BA121D3B83F8FB46E8067470D83E94791D463971F63823702ED2
F3DE01F7A7AF93A4B40C506C136E5A5F56AEA9C6C4D28960B0B86F1EE6AF9187
E298CB7AABA58E3FB5B4C7E86616C25C5B83636D113EC79899621E1789548F30
389BB0DEDDE6497F28A12064034A7290750EBC897F11987CE12AC261EEB23B07
EE7D9EBB4B4121CE793F3E7941CCEBD1DE6817F14841E48E53B6BA78A8448A96
0D67BA679F0E2600D4BB7AE25E9C74677117EB46041AFF25E4F0660D6F02B1C3
1E48ADB3D9C7183B8EC192360878D62CF471237C456FB4024114DBC1D9BFAD07
695C8F35E5896047EE838A39ECEE402AC2178EB9AC1FC6A01EB4A52E159CBB7E
177B95D693D287C2B543AF840091D69A3C1C428F180006E4027680F9CE1156EB
4BF5E50FECAEA7FE970E54F76B624FBCB96CE67468ED160438641E71D673717B
DA4726A731ED5E725365F007E60CC535D0775736E6BF71C19C6EE10F7A3EC03D
BC1045CDBCCCC3950C6C443E18822C5FAA6CA14F1654ACCFEC8FFC127488F604
E972B6924306408FB0AA8EB4827123538FEDB696ACC0379E67768659EB1F91BF
9908E7115E5ED381D39E07E0422F977C09BFE58D8315D95C3F4E7B7B2E1F2895
057F1AECF1AD64CCC959A59D93608E66A61B5B69129D74C011E179E07DED40CC
E32031FCFAE2737B412807F7C9E6494D00426453124D7433EEB44C724ED69C86
97D06A5246DF0AE29FBBD6F4E0797A9901190897C68CB4165D6103ABD7D5E267
1EA82ABEA5D6505375C53C1C54F274A2ABC158836946EE3D1E720D03106898C3
FFBCE575E8787E78C05054A08B54376A9E10D0CFB268307F4CD1C56B30138155
D691A2C4BCA6B90B4A5C5E47F999DC291B0F002A09D1A5D4D4E5B2BF51908ACA
6489430DC92FFFE690A0DAE1C28E64D86252B69A28E33BCB4F4665F07AB827BB
2913A76D87D20D1F0B525DB06AC0C91AA11485015CC8BC7D8403B8139B8EEC22
BEE2E8A1A721E5A28DCB5D3CC5B4C1227FED7547ED1DA6E35253BE7A2FFFE596
42F9605A3A9A1A6DC3B27ECC2018FD2B609EAD2728D71DBB1707B5EAA7F80BDF
F45A5C9C32C0BAB48CE9F69477C81A91CFED69D045E949E25F10F2F48C6D08A7
F95F6BFF09BC163A26AF2CEB9E359BD9E5E92EC8F6A19066B51C2E31FD1DD188
00B7E40E16407433FC9A216DC7AFCE1C5F8CAC60242A4A4EEEC6955407F7993C
2377B237D578107FAED7D5646742761EB700766D975EFEA333972193D8097545
52A03DDF0BBEAA28E83B5C94175DFB9E11A2CACFE9EA334FFA3386113D55CCC4
A16670BD5D8649B0CC624CF173ACBFCF4475A0BCCC17527145D62DD8B42060EA
BF87422C3CF3ADC3A1BF06F1E787DEF42A610E752C62F51EAAC0C01CBAA10C00
32E8E7384836BDE8A66BD6630A5C3080C3F839C9292D8CA28B507641AACE2C46
EAC21C28AC2595BD123E8C062B8D1A9E1E0D8BDAF66CD91796A01FE8C83D61D4
BFB90D4C85EE83847C478012FDD4D10D79D212AAF2C9C5948B3F7A5E6CBCB274
17EC23F976483DD8451FE4FF72E37B03CEF0E2DA4C842ACF78F42C2595A07CBF
1BD05B68870AA4FE5CEAEFF2DCF004690DCE1EE6302C0AC1C7CA421B81B6DDFE
A56902F01E65E2E3CF25BB0C4EE70CAB7C5DA7C9BCDCFB67F1B66A449615805A
F829D5869F2C70B0233569EF120DFC5F58EF59168059DCDD7D5FFECB83EA16BF
C72CAFAED1EB80F225B825216A78E7C80CA7211010D2C00C5BFF35F8A350BC56
BF961AEDC4EB2355B3321C8469F0783D71E6CC575B2D1B67CD3CF5EF4349B3DD
DE8CBDA5AFDB246482C0C0115608CEECAD3A540AC00C80A6BC4F5AAE6D6DB746
C2AB3C0B29796D2BD1DE1D4B673B0D41B850D1C55B05825C05D05159B171C903
4EDBD0E861C5A26F2DD38553A4C9FD3C762189575E839ACAEBA85304289EEB21
39B8645F38361FB563378D8C5CB7F8729D436B65B80B3C1527625D49AED3CA55
7EB3AD754298C92AA5D71116F1C8B82758E41FFD395965D5AAA1829308E35833
E61930D9D00013A2053064D16BEDEF98426130A132BE502E93A5353C7789141C
FE6117873A7029211D7C358077B4AA4AA4A2C04E1AFDFE6D1BAD61B90D8A9043
A119EBA19AF5C1562461440B3CA2DA959EE5B4C8D4766FE939EBEF8C5F3A75B9
6D98C17AC253906BA2ACDC43D999A7D2E4922E00C3EE943AFDB0739F75F0F1D2
50DCFE650F67AA46311D7FD607EDA8522E4E789020B1CC48B0CA59C21C7ED769
E57608B34E65A38D5E0D698D57412122B18100BEE64228990E597E21FC63BBE8
685F3118955F488ECF3EF7B3069EF25ECDCE357DC6CBCC1EE0BED98AAAB63628
8DBB885C46C5718498E0A8C3AAF39D9A43408B1FFD3230CB86CC47C822917670
18909002301E51413D485AB9858152E3FA121F9BDD04B7EA8A00B2A376C3FF13
9C49E305763F08DA29E18492BF190333691D924BBFB87CDA9E22839448247D40
B23A37DFAB7F41D9DE5651AA82FA97890367A50F6EC66B43972080D9DD4E7E3A
ABF1E9B1553BC56666646FB94D3EAD77C5E88350FCD5E84ACC429FD2D2BFB9BB
504FCC2F01B128F18E17CC08CE1DE39663F2876B13FFA5B6BDE7BC6408A9C826
5482D6FDE612C8F2A7DA397EA2266945D9077600B03F493F74BC691BB3406829
CBC9375F9935F53073E0D17296BC65BE0416FE1EE4BDA71618D70740BBB31824
F93407A5D34378914075B7A31ED94233A9690AA696EE8681A3C9995358F9CEAF
E7D68C9CEFE49C4DD9745142652BFBD367E0DF4748B39BBE76D32933BFB3185C
3972FFB309F16F70DB778E6032E3243476B874464269ACA5BF82504DEE965594
1884D3B9FFABCA4F49031745D86203838F139B35B4AEB6B72F30468065D1A2AB
F1AD34324CF7AF0CA422D3C9B3F98541C5E6704C90D2DEB61A59B8286BEC9AFA
7652926C104DDB7A1169F5A96C3FD32EB20550765C21F584B007BCCE2E607640
91679858C8DE9A717484551C9012158313A82253978660340A37C59759C5D512
73FB635CB7271D8BD9D539BF6423C688F32BFA5256F93585A43DFF3C144AAA30
4EBB71EFF383DC58FC1C6DAA3105C475E5D473CD591101E06D4E3A5D9B158C28
50D3804A3FD46D6C80A92285DBC639CAD5B2E83C049DA71FA49785EC5565D2B3
A76C486AA65076EBF7BB068C9ACFE42A925AD428839A83CC1C1C86B8FD8EF3FC
186A8EA4C9BE51D592FCDED361284F8503DDB58EB2B929CE53EB5D706ADE5FA4
6BD512A4ECE765A6F5C39C5A27A1661D9C192421E79A5C0E313B3E2CED446F5B
5130189570147B9B69CC7424783D32687ECB5B7E091D1B11EFF73F0B5E7A5748
C8AFB552402EDCE9B243C773862E06BD9EB89855E00FA4F2651F9099A2240884
22DBCBAA1D8726FABB4EA9EB1409B5A3C3F4CB3BBC4F26EE89E4F31CCC0872C5
02A1C8B0CDD7835E087F5FE1A6FCCD2AAAA431B36F55097E479EE8193EB857C6
625B1AB3426B888F236D57DB2F5A50B37FDA5B79B2EFDF96A0DA8A3493225617
74A46336B100F5610BE506A23361C0DD06828CFB7991365B0DE01F3B42F14B86
9BD474843E3A99ED6986DCAC79DB20904E41A09C89761E13C0E786DC790316B1
20FAB737E69A5BF653BA55FFBB73EB127855B8849431DA4E0D14DE737964EB1C
72762EA62EF9FE7CF81EE3DA486A5876941BD639BCBEB4EFAB34218E6B25E840
A594C538AA8052854792C3AE883D066689BF00D01E884D9F04CB52182197311E
B2A2F5503F63E46DE52CC01A232C2456EE913CABB9B2A1CCC8AA058C20F4C3EC
D7CC083D70252227836371FF838578A4642A91F1947AAB4A780D034BC00B16D7
C4D77CA301F1BE0F732F55DC22ACC3195E9040B7DEC0E8B841FC0798DF61A889
240B2E196C3450BBDA9D018F6210E7BF21EA36BA7A1D1C0F5D1533474C1D9275
7D1EAEAA55B512EF21415D8D35C6D0A1B3322114B056BD56EDF5FA00B9C6ED9B
9798C718E4EC9439628D5E5130752A05FA156B30227146D0495CB5F6302C7BF6
89BC9A13BA20AB4D79925B8EDBCDE9CFD2BC34DF6068C72D3FE008DF32135405
A3372CA1DAC1ECB83AEF8ACB06C7977F5BFC46DA5D294172AD5A4A4D0E8CEDA9
F2CB3699402576CBDF68A0B2A7B17D163C42C5FEB387AF7BE3FEDF65E84A1508
1B3ACD9B4E9B7F733FBBAE7E723C2668B7E3840DA5AD2FFCFE9F5CD13B97A878
4E03A0816ADE7BF495FA39FBE8D0A46536EA67FFF92B4BAD5F8D20AF9AE73DA2
EBF7349BD018A917B10B32ED08E7F6CE86751494320449073BFB4FDF4C1C0D8A
B9DB1C4EDF7F1982539FBBD85CE210BDF2807862C3BFF8017A84BA6BFC1BA594
0ECA30745B092EDCB1CDD560A14E93017099D24663633B06BBE166FAB65A27BB
BDC772E9DF961FB2F30DB9883C1E620769E3444B6DF528FCA00A4CE5BB7C3E53
EB9E4F1293769D190663525D6DB5D83E17A2EF9D954C1DAAD9BDC21AAC0EAB40
A16786F6245A907E7370EAF4260A698AF73D1606366AE06337119B2CBB45FDA6
0F526C6C598BBB684F49C926EB62475AD1D3F7F34C748CE16F76A93E5F8317D8
539E597DF1BB2FFFE276DB12DF81F103DAC3E37A85751665208446CAA0AD7FD9
46EE45EF3C791B0516523DFA980EFA491B29D5154B44B92380264962BB765350
84F949C20E931222AC23981CD4B7B279E3944C8D5D56E244219DDA8FD87341F3
37F112E6E649BE407C85D3D608F0F498400D6D7DC137A904C96EB7B3CA2E65F6
4E81E88919F95A52CE74702030A3356FBA2E66131C9991A60F45FDFD51228364
3D9BA7BE0DF887B8D92AC4A43F11338C576DC46136E789DFBB551AE2C2838982
303318BB1E4B78266A6A1133D8151A000D95E13EEBAD4F215628C0F427553081
FA9CED02E69B4C058DEA4F847FE19CDE576F62EC122AC115B0E99873D98F53A5
C694F5BDA0BAEC4C67525BAF1656DE0175464EE264860B6E310854C8035273D4
16B3A6CEA55846C3FD406C74CE152AE8FD181FE6B891DA7F0794B9AF93AB2AA8
FB3DCB5CF1401030B9FDDAA696FA9B3C3E63A7C4DAC907E3B5CB7A371355418F
A3E3543FE2A4894925D73396FBD0305CC58E312E3CD49594162682F9947E1A09
7E36367B9D631483124BE7732ABD9120750E6F5E40B38FAECD02D709420B491B
643F82F2F6B0E45E4BE3E27CECE324917C5A99F4A3210F6086A98D901BB47DE5
D3C0CB6239FB2D5B4AE3224CECF0AC2302C08791F29A7831480E17EF470AA749
FA5D42FD799456B6E5B9BF421E82415746B363938E88CA3749171EF19218B2D6
28E869837C9C717E218800262B64E19F9A59989A73512C3580CCAD46643456AA
60531141181F25CE1D16865F3C7ACFF6ED4EA6DFDA17340E96A9939ABF7BD308
C79A18897F2D4D515686A2FB8ABA2768EE08175AB73AC6DB83C3B9D700E8C7F3
03EF9E78900401D49A132955A674C60D5774E77E0ED24E62F5A85DCB4E0B8CE2
76FC313D6A101898D1A6BB0AD8D5662A85EBDC30BB624B52A5AA86EE07E447D8
FED8BFDB2700790489EA886DD56CD3BECA6BBD5518ABFCE86CC6CAE184B7DEA2
CA076109F2381E24C381185CDE9E231A78C23918DFDAD1367779008BD866C81A
47B5B71BC37078920FE6AA6E6F42696F69D130E3278D31D66B3E5649529D21E5
2EB2B27932ADC486BD9CC130D94BBD0543872FEBA04AB630BB32FCC219DFFAD9
A7F7A6CC1703EE06340147CA687DD27461E5740E90748DFF709D1914D56A5142
B2E0F89CBC35FDAF30EA27983A25D956F3F545D5FC78AE82EAFAA70BB2D26624
227E54D76876DC36BBFF11D17206706CA8BC2A1119161B0C97025B02598E2A48
3A2A4136BB5600E0BBA7D524EE4C5B5C706FC45D40CFEC0BABA78B831AB99E20
CB160B6BC81ED4696D66169BDC648AAFD50843B64454A8FDE2E58925A0C9440D
C034DAD9C193D62E8AA2169A24F246F586326169BCD4B8508F98E9A3881E97C1
D450F67B0FFD5674E4853E4D6EA1976DDBF57FCC4ED59E641B30C4AEB214FDB8
FB2B5595BA0B6B4685BC25282D47F1C1154498E0872FF23ADAA51DF3B1B4C1A2
18CBE9F398EED43BC216FF3B388D22DAC6FA98B4643BC488FC252FF5B2D5F53D
F4BE1A7606D112DC3AD3F1B97A94559A898DC36BEF9C32BF4B4A49F755B02FEE
6E5C6E52567706CB28468A9A6AD9F9B873F1845718FBCB744DE8FC7FCFF15F02
AF05BE0EC725003E6D283D408186094BFD77579D3BA8BDE0813D641BD081EAC8
AC5D9EB4DAF3EC66FA0B727FC6AE134C01819BE812383107C79204CB5163EF7F
F065FE895D0F59D9E57DC8F688D499EF4BED366D2CE36D64EE6AA4C8D0239A29
AB3346E414254F6763C471FCE09BE830EFAA1848D82076C95BF06601D2D2B38A
E272F20B3F66F8B1E65BC0EE614B5D1479DB59DAFF754BAD59DF4558D2D608FA
F16668DAEAC32AAA2C17F569049E4A119632C47683095845CE5281505F0189B0
FEBD0B26DA3B909CE9A4FB204D7735ADC8F1BD757C58E5E0A5E1340670398319
FEA4E9FF01B22C0D02E29FC30618363E875234D5138D9726E4C107DB8AFF063D
A432F2B385D51E598AE0216A34D55E97DD9B83E87A1B922F97CB79720246673B
F3BC51B6185221DE666878E6957D5ECB3BE14010F61DF82876C748C4A12ACA11
4BE83E5141FC64FF28F1CA6D4F1BEA1C6401819082566DE18AE8B8511F987E96
279E3AE01FFE68E34547E71D9E58752D2E666E4453B5C1488F2AA4E984A613FA
CF3A485B6B234942404C46943A761BADA6C3B4B9C8B9A0EA29F25D935845C6C6
0B016DF15669B243300FEC7FD79DAC1D95581A3D76B9F387D719B0005323B20A
D59BD5443EF2ABCEE5B559AA42CBBA8CDE9FF407C8A7E5FE9FB8F3874B1361AC
326E0471866927E3B6123D75DB1F5D1B6972AE1151B6B6AEBC41CCFCACF35D9D
ECEE6F9E9FC87C84A92EF26862C433ED083A10A282CFE103D4CBFDD5BF0F417B
18667B975BF873F4BEA9022072655ECB439D5EDCC9BADA8760AD44E31416EE4E
A8C182C1D459885BD59C1EDC838F9D7E350B1DA59C2F29FC3F86936EE714524B
446DAA42FD34136C4017B3FA8DF19A3A4323DD3287C1E41516CE412CB410BD02
6231E22A9CD0F664D76C0BAB666407756E9A8493C6DC65A7C3623AF761979566
A72193487C2944D35418E9E9DAC3479D3309DE69137A608CE37057DE0BC5B279
9B4A6B62A9C9BBCF1FC0273C3F47482CC6AF65E421861F921CFC9583463AB935
630E251CB0C567B17E1E0B3EDC325FEDD473DE05BEC16417D6F6408233BBE1B0
09AF11642E22ADC6A563C249F3399EF883F2A858182EFCF99114F384B2D69C75
A42B747A3B1AAD971D82FC1EE6868FE3D060DD7B5AA766C4DF547EDD8160C467
A7EFCB0CA56ABC164CB4DC953DEFC223DE97A1702B10B0E40E16407433FC9A21
6DC7AFCE1C59E6BE802DF919324682903ECFE0A0E8E3E94B4607DEBC0F51A2C2
166A0E4EE6272EC1F39BB7E05C36CD0DE61CE617E2CC6D8257D9814601AFEB7E
AD595A6AD78FA30B178D0E322F11492FE2D4693CDDA5926F4D6643907C7A82D8
342741BA163EF16835BF763DCF8799E2505AC7F41D4C5AD87BC27392D7A101E2
73541B8FFD8A9F88AF43BDC54FCFAD6C3C935E56C071FA9EA5EDF607C614359C
BCC8825A46B6D70EB017FBDE39702B4B8B60C24B78321DA749DD1962C77742A8
C011C9628BED9C7AD8647A1221306B7215B7DAA42865754B22A9306A4143F93D
6E853ED2149E9FC384314FF4D2A33F635C6088941DE5CAD66946BBE693904A72
A20A1F7C70C68627A5356470BDE8993C16A6529971CBCB06166030EEF983EF33
24975113B37403F64797942F9227920CAAD43D1B48EC23887DF46B72DC74CDEF
D3E5D7C8FE54C9A6EC3722200E4229516E3BA3A8571D54EDA7D7E39BFCCB8712
2F41D6F72A707CC52272497284B49FD0B1A273C1EDA6B778AF995CC4574F0F31
781482E6527D0E788F8B96F9181ECE959BA678F02E8B65C94FE07B3B4F4D2853
1BB0EA4DC019180FB24BF0EC948B805403A784DE9193BDEDA3D741907D5F0581
406EFEDE2A2CD2042C90ADED9A98ABAA446EC08FAC42D74BA02BF23DF52B4D11
FAC152CC6A4B2E4116C390FA941BF214B5B5AC3E4D781DE2C5A1D799C37EB493
0433ACB531A076037755496C3DF9CBE5B8211CA8E1F1B96D5239CDFD85C441C0
D7A174C40F2366A89977662B01E827522E182DAB2869CD2C2B0F39016EB77806
0F3168672DB4498C0EDAA9F293E7264A221A21C15AE0743ADB64CC9D816852D5
C351BF1456B1AF4BA063CE6B333F89BEF5383D84289C42A534F596509660B9BF
20579E7FF829957403A85907066892485D1FC4F58151F477876F09747065207B
33A1B4041F54214AF07DE8B53E24426CB5258E73E4168482A388B272E3B4F91F
0521AAD4442FBEF2DBFE02DD5462360721F64AE27244B28BE86522265D58C438
BBE8DF5592775B1F9AAB707509E6141AF876C7C6BA8EA2645187C20827A237AF
5BB3F347B4DAE05B64D1833068D9FCA0A42AD893C94E011074D02D3420867354
5383C4625E0AD6C580271FE3F9BBDDA0912753BE6D4E659F4CBCAC34142F4E33
BA61DA1E50699E9F9ABDF2E79E4B42C55650DD5BDD8F8670CB60D150802CEE78
97CD398FD95B5E658AFA6BB25F30720CDD01B8911640588A0D69114C250445C2
2C20DC5CA0F6A947FEB316FA330D0D74D6F5849BAD0A66A4E2B7A2E64EB5BF12
C186C13314EBA4AE29767F5CC99C07F73BC46A91C68D3CB97188F09206B564D7
B4BBD169DA7C5822223FCF64B67724D6A6E6ED0B2055C6024EB649941B74F9BF
C8E657274545B715E28E1844206A2D4E493E0036B80A8F3D5436DB735DD5201D
1A25482C0FB9B148F2A18961E999DC548B9D164B87B1EA7B64396D1E17310B14
67D92B1564CBE298FAA7D6150342D99D1EAFEB576CEDAF92E6C63F1DCA3D6EE8
21549AD0AD94C0EEFA628F7F3C2B15E13CEA3C7BD3122C170F9709B1536DE0BC
48A35C8AAAF1D7C22406247737AC5CB6EA8E38C4B0A40453292103C4EF751C09
D000090BDC0D5C4B0CE43084A991B7318AA6766E13A36005BB2C7228E805DC57
8B9D28B893157400AD3875591F802C91D9A8B4BCB0D6A9FA35DD034C23601D5F
4CE41CAA637BA4E95B846FA5CE65C230AEAA198D799DF62B540ED0E0302A3F92
3AEC792F34C5A9EE4A2883849E7CCD9EE583E1862097BC700681207E93E45BC3
3ED9222E754ADB060B509D7BB71922BC9474D03BC93FED60C902156AD2C5FA4A
4247E469A15621739B6E1DB9F512889879F6266DB820E306B69D795DB3D6A492
D1A3F7D404D5B0C95D66ACC68A29A9C2751239701E45D79023A4AE81A489D7DE
CC274F5783F911364D78910A7E1DF95FEC88EA4BF87240C2CF1C3A210A7BDEDD
3805EEAD7870D450783ADD06AD7081707D5202F7C8D0090FADDC75D41576EA9E
CB2C9E6A64BDA32C5D074E0DB11D1FB7F1F7D178FCF4E4818F1D57E3AFC2EEA1
7C6A891698F85FED3BC61DDA6C89E780F6BD83049C0DDDD9855A3BF9605C9750
D5E8D0EE2F707759C0536676CEB37D2B233E6CE5815B080DEC5DCF6496EDF7D6
93A84F4A366A745F823058131B08D540E085D345CCDDBD81F688D604F9DA708B
71930246C5F4A19B7DB5C9FF6D313147004008F8765118F24F6433CF1FC6B2A9
987B0344DE157F944977E204A2CE5800CC2A1F71538743CEAA48877852BD3120
0ABC15B314C3FC84066A62E30B0E9AEF2CE5DC3671B3BF7916ADAEEBF58EBC28
6048E2AF50B57BB35A6E754F2F0A45F2B87EE91A77E49313EDE391FCDE4CFA1A
C51B5B4094EBE4BF6D77AABA48CD601358BFC654F3C7516FBE690A6783BEDB9A
E2932074325629DBE7BF3642EC9C7BBDFFC7A66E0F15BDE6D5431809F175C756
7728FBC797A6FE0A000CAD5C1D66866465AD9DFD2D25D7026D8483CADDD8976B
C14A40EC3C0E5C70EF98246C20BDD70EF02E74535114596E888C0E9E815A6B3A
E059838DB2EEF382D5AD4C9DE5AF45982A1EEA2073428015DDA641A03E80C230
AC33726E33664DAD98E133A61B4182FFB00C635B437AE8B1B6BD511B8CAE4883
43C923BBD13695840A4B561426D72EB3D3D0BBB426B6889AF3057173323B6A9E
5D5C9D106E9C1D20778C9B9E07A0A9B9AFDFA66E765FE6B7F9AD075707E5A69C
6BF3D0C6660E636D6AD25B03A443514DDFE81805BDFC625C5717D4CE3E694D40
620979205B6A2F882177D42806D5DC56CAFD7BA86892B7BAB3BAB55DF9037373
88C01B84BAC1F8C5D2AA3A3E6BCD63BDDD74C63CD1607BB4E0A1A7A244B1B309
A2858EA712B5B28E784DD59F00B920D3C62C04AAB48F6BD8C8BD63D8407BEE68
C744D688071444C6EBA6D73FAF4BEB87413961A545CBA3F680A07649CB0BC7A8
5AC43F9D158B9CA2FFB607786221F2C415B3480FE8DEBF394D18921C6015ED62
BE39F222D587253AA8719E8B14653F7E48616690B883C0533C0356C7D6AB6BE4
CCF1C2A978C9A8DAA2BC5574F5481AA6A33920FAD9A7F7A6CC1703EE06340147
CB1CAA81BB4191F5A5700F9070E60CA384045DC239D4F27B935E329EAC0F7BED
D9169DC977DF9821AADBCA65C61A3B695923F7B206892C9BBED07E6BE6CF921B
97B4400E9A823A2253C60949235985862EE9373A441F5DB87C69E6F197A3E9DA
7AAE38371DBF2C4133BC9CB12DDB1584389E7D86B87BE4CC091E49BB9F073EDD
570C37B97693859EBC1467B31921D5D0686F0EC0E5329D621ACC21AA586257CB
4B1551B42F92904B4D0DA750DFF2A83A30B03BC1DB36EB2AA2B5AD2ACD4E7497
34781021CBF8204C93E1E8BEEF68FD3AA8879CA7DE46E110D9A702E2857BC8D3
55C9CE02276B67B0552D00C4D3114908981F51AC4E66A3F8261631333761183D
0C720073C05A2F6D7CE4EF45440717BA8DBEA51FA99398860E1C252C17EE576B
7ED658ABF974BBD04102E568DFC9326B499854BCB7C7CBCD9F998E8331342FF9
1B3D0D6E79725A6692D96DAC83BDF394230C22D48D50A8899DD24D4DF5D87369
8E715099552405F16EC1D7512AB6E16FAB0A633BD4BC90EBEBBBAAEA63CBF421
2B7443A3E8AADCDB4D1875B9D06550DE43B68BE1B2745F702820477109B3558A
9125377A6DEF63F56E9295CBBD43B3495323234721E79841450BDF410C1F9EDA
E23783228BF68ACF6A7888F1E40CA68A95BE3C0107FE908927FBE05B67874A79
FAF20FB05FBF6D873E4EE1713F2EBC1CAAF5AA3456F904BF8029AFF0822C9EC8
68888561EAC28C528B77C22B572653A67F3E05EC5648A53031C5BB81AD57A865
6CAFE18BEAF8E071122518F8DEE14A3BB7EA013687ED3699AC741301C51C1902
CF8CC742266FEFC09F89B3F755905EC9C0E6C14235F261538F608C93ADF044C3
9BD2A560B752B87F3064A9ABC729BE68EE00506E55529EF6DA24C856D91D7320
13C7B4CFD5AF48A89122C85A755B8F440CA891D6105480CC19BCB448EC898918
F96777AEB8E7D7E6C9066666311BFC4C761604DCB40B03A6E6ABFE4679B1F922
63D7149D43CA6753397BF12BC6B3617135C012959CC2445DDD1138503B570AF2
CD8AAF6410101576B49CE7F6C5BDAF9CDB1736018D2F566BB4E6878CD8ECFFDB
9277BAB05309234C27C9A7D1549170A4AE05FA237BDBAABDBC9D6A8D14156A26
04D976052BCAD16FD258A3016BF0ED87DB6563CAE2C57548E0182F692E585713
B5FD22FC94192B041F7EBE547F10F4F1FDE737727D1B0DFD25AF0B4B175F0109
43362303853E34B9E0724367332E38ECD00DAC1F2D60BDD1822248C6A90316FD
1293FC5B522F7C01E1DD290E4115C79F448CE21A016B633DB5298FABF4D352F2
C0519067CBABDE9701D657DB41838796FEDE5D81709D1B3AC99444E7C55F697A
E06FC03A371C859E3865644E0FC66933CE0D60F86764C0C0FB09E25F64B6827E
9F8867A18F92F1928B97F03B943F955D0A9226ABDCDA689F202F60831F7B4783
DBA1C085D5FAC1883222A1C90CA4E940136520C8AF7DC481A2BE66B424A262AE
0E744AE5D60CD3A8379888E6847DF7924FF62CC70492CA1038FEA46B603B3F6A
B7982383B50B83D59795A18CC6194EA4415DFE945C3205571D325606770603D3
446999C03D5D1346A21E909A8051B0D3D72DC84195210612164BD3D1D811C2FB
A4C8791E6FF3AC80193A8EDB7A5802BC13E6550A31DA30BD1A0AC04FD17651A9
A58A17D7E5E882AA5CD7F67BC8707BBA38282A66F786BA27ABB913A0ED1A68F7
4F3251EC423B69ADC9FDE801B907E3C3FF6DE42377562602F9FC342D9EFA3AF2
F36307AF7215DCE159D6202519C82749EB63913019CCB8D949E25D7DB43EF32C
E21205C88F5D612C14381B3FB7E42E841B123CBBBA6C33C080FE3E7C660FFE76
B2B0F087D6458F2B1D9407CB5336010EC04D49D5E120C8C3C96A3D38A88E5D4A
9559465191614AD9B3E036DC6EF898745860CC48E55E625906298C09F974B5E4
EDAEF40876C1432B1DA965644F3D198B275876EE348C863EDE31E97ADF14D9F1
80343DA29EB6D49764B03474D602FB6D02F57F18066ED53549CF9E7C3EF30B23
E66DD9ABFA4E344BAA35CBE05263C4386AD34C06A05537B977E3C58B941166C1
EF276997F43FFD6487CEF3A200D1D0B9A91F0F83DAD1DFED8E8E569D3D3DC4E0
E71B2016D6CA98017C7C118D8C67F71A4BC3C8794BDF5677848D88A376515078
360765E69141F72141640FD7B16086AFC924E8517AEC114183C3838D9401260A
7430057993094FE7016C6F59098D8404A626401F96F39B11EBC168CE885C8A11
EEEC603AC79C6DE3065DCC84E2D33B53C0E1421AA0F101BA284D079A7D06D8D7
E20E0C27538B3DA18FCBCBC7839C0744DD5CE017FCC070EFE541F98672B8B21A
B1FC26A6D947548C4F2C98932B9F66FDB63245C3925FDC49F75C0ECEA5D575F3
4B7F7C38809B6E1CFD87EA418E16536B30D75DB4B935DE8DFA631C62D824EEFA
46CA71A4C3C58BA398AD7C285F0B346ADCB14441DD062B5A218FBAAB4439AEA8
C9C08D3F290B9DC8E4D8EBC2194B3A02A17AF215D939FB50793A4D95D4D5188E
BD111ADAF13004B95BB6A1F91905C7AD7401D9C7EA82F00AA0132FC5EBAB14FB
9BBB366F8CFA0AF72A54105E7A572DF254355335500897F21C1393BA2C884669
AE0C0DB079050609754CBBBC246B3B423B9F504F4B02A95DD4FD063AB4C38C1F
07CEABFAC1ED5C8331A6DD5575409067295FF6345939F378CA6351CC3987793C
A934F06A27C78C5122CD9EC73E29A912F30E8E8565EC5A3E0ACD13B07D4110C5
EF052E53560BB68EE79C35667137A76761CBA2FBFFCEAFE3E98D5590DE5FEFE8
149222A29A3A4117DDEEF5925608991F0682731CB7D565B443C53CACE9535303
D71F3EB7F12E73771D2405818B57560C08868F0F26B2DE3A8A834CA315127C43
AB739568D681387A61AC54D8C316DACEF4D0161D2266E255EC61B46F490A7711
8A2D65E8A6B1CF63055306204261F3C7F23CA7363FFDBF3675ABF732FB41F87A
62FA807C0FC86A7787EF56EACA79E2258D77C264076817C637CD6445432B6CF2
B9B44D86E9340F8A6154CC00AFF622574EFD751A6B7C9AFE6196B3E2024B31F8
5CCFDCEB03907577C8B8DE4E695034A0AFD7D67EE7345720455B6ADF08737F41
AD8DE10D42B7A8910606700D1AB8E2248E31559C8B61790857547C6FCBB35A79
610367CE400F1442688054ED5805F3788325FAB9397B4F558005B6F0557D0A8F
874806B28DD649CB35D90E6345B12F46BF3C7AF59501FD94988B3667BDE771BC
62455181F1B1B7CAC31154D17DA5BCACC3DA7E5AA1062A7C47D32240DA911068
3876EE0F8E07FB898E46B33A5B0338A896F9B16AE27CC5A5483BBA74C9D29839
2EF18220749D58D42722F653CCA5959665E40FE323256A366A45877CF940CE49
C24F7CC1656BE602CAAF7D89959658835F6DD1A7BF446E46EE4A3F0349311B6A
B1110FCF6163A409D01F60F292644F6E400363FB537DB0DA670E7BD287A94CF9
C80A5F70DE1368D2F20663BC22AEBB8393C4BA41857650DF95C0B83559BFF38F
41627BD8FB32E62B80EAC98895C60DDCA647E66B811F82F08DFAE1979E9ADB99
2C57D561DC410D411CDA75C4C5C7864FA957AAFEEA79FEC8CB55B57FFEBA7F64
9AF87AA556523AA6991F6EE897A83B1DD23BF4A11E12A7615492844087C6D5BB
3659B7E9A28B87061AEED8109D87C3B4C7E5E204608458C84ACBBCF5A5E46F12
CC16254F52A26FE47FE41504D3E851A06203D6AC43A659829BCD60A999E9F3E7
8F6480C3C8B62E7CE00F4D9FD0C5B9E9F3A14F9BFBA60CA6556B0473DB556443
BF7DA121B8C73AFB3730AE0710CDBBD4971906951D43ED4906BC6DC192035597
00CD83DCF3EF58FE4B1ECF9E08BAF97BC30049BF62E619735B43AE01A5A00A4F
0F1A27E724B353170D46D4B234CA5AF1422EF54B248DF73859FD9E1D5455234F
366F8919BBA377177966F938A6FBCEADA2194F7BCF7AAE569CEF156BEC782E44
657CB9224E8FC35C43DE0D5A4F0514FF307F5ED154EE1D75F67728A6C5FF3F0A
DE1EB4DE93C91DDB40B4E307738286E79AA7B72000C7B2DAFF6236CD773386E3
62EC7B8C81BC9F6F8C6BD6AADD455B57E3EAB5F5761D4A9FF89FF7BF9A2B0BE7
94F128F77C116D89AE4D070C328F1163356BFA09303CFEBDC079E951000CF426
C8A83646B877AF16C3780F91EC03F077572234B5E4862206CCAC2A9B6F51257C
1267C8387E8626D002A4A45F7E87C7CFF49B1F6E7F30BE86F5994024219621E4
AB28F558AE44BA7DD9157E3EF2FFDF342741BA163EF16835BF763DCF8799E250
5AC7F6F43E77ED9D3F4875B1976810CAD9099468F5D521B51A5009D429D791C4
4610B58E575B3D1C7F4624E8FD286BF947C3BB72727D3D28F862D12D717B6EBD
1F415D00E9337D79B0BA504D1070292C74901C190E80ABEFDBC4237103603C5F
9D94B60FDA916CDAA9CE286BA6787F495A14AC930CA1BD891E47B6018CF32DB1
F72C0E7E58BC11AAC1248B71AECB3B871E3D81F2704CBE30270166C2AE674F01
9EC909CD238FBBECBE2052F26BF2C04EF4E1C131AFE2C7A0547255450676F86F
EBD25557B85F91DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC241EA1C4D
4A1F2D1CB9276400AFF35CE170D31F2B166C71E228B0224E5C15C3E4B1B7B915
7998C8EADA678CE610C567D52C6CE4D2A88834CEA8080C90A3D588D038811C2D
0E1272E9BDA7EEA81A807DACE60B2EA02E66EB19BD7E4B6177A0DEC633BC4444
68AE738011EF30BF68A0EB99D3F8B06202FF8DCD698B56544751347E9AA3520E
BCA446AF0FEA6F7664923CF9E8C2DAB8CFB4A81105C83220B6BECBCD412A7D6A
0F93A57C39E2BF0A9AE90D02094BBA51AA3FB99908B46B10CB5A9D710435404E
F38BDB0777B9E3B6FCB6764227AACBD15214654422D7C8812EC5CE8EE40DBFB9
338561B425E7FB8A486E8BBD8921BD7AC058BC13013E94942CDCF8E20DEC5CD4
696759C8FEA0B960C86C7DB62ECB4EDD7544FD3FF04EFEC96FADE1D1741193D8
0A5D6A6D2E1E26746A94A779EE401A85A0CB3D64576524BE0B1B9D79A76536DA
7036198FE44A30BB3642ABB0CC38BEB60E00B41D45DCEE44A71F11BB7F829CA9
240E0BF42374C33F5DD39F1E0CB030996BC6CE7F3F7AB9BB690B3F1F8D5D92B0
125D3D3408D17A9C0D54CB090E79A5CC212295946E98647A6F5903A6BAEF6883
8DFE4356AB5F2F38D70FA75397E8127FD3D47DCCFF2B3D6D50D8A7B453A4A15E
8B8137495F25DBBEDCF057CBD4362865D0BDD0BA6044D3F5A6FD23AC4CE9B338
83AC50C6B4CC37DEC8CD522A9409598A6E3D04FE29E1C2D31FF4C8EDA1464E4B
6822B0EA9B636F53F71DB75CBF16EA45078C9A2ED39DF9D18B3ED95BB7437C84
AAD953668CBE626B87CF0AF0211035F415C5B593CA786F55675FEE73AE766B4C
A8DE3C3A2CAB1A9D582B8077D3767A4E3BC4B80968AD1178A8DDBF0175562C2E
450B9BF291EB24FD04E12BFA3A0B18E836B51A7CF5F297CDEE3A1677EF35BF41
33E260320CB39E191970C0F0E81DBEF3349241FFED1C2FE09E0AF9A4D08C642F
9C07E1C3290B2644D26442237EE2121C14F116A1114838B333EF11A872FA9A45
395CDC48DBB13D7618F4FD6A066A4DF35F886EB1EAA0489C6D09EA559B9E0DFC
CA1A39673371E800505977C969975DADE58C1A863D53B67DFFDE2F4865223DCC
F5E19646935341BD381BCC0919429B21C62F2B7C37B2C87AAB2CBBB8A87C0939
37215405A4E4D84599E1DC370D643F1880D27C0F7D73029F171028FDDF8B550A
E9F0DEA8CE198ACD51B48CB8EEFD48E705F80B009ACB6A48F4A7A4DF51BF0EFB
57472C5FCB1195C608C43B86155CBD9A0594D1CD925DDCC2EC217BECF3758779
5A461745EE94D1CEDF1E2D29BB43864AB5B770A14C98A4335C0DFBB77E332C59
6821BA100FB1B3C663840413AF71B46D30162460848153C749EF0DE6EC83878C
E9C3969C779FEE84324D9E12D44D1CB12C24267FFD67FCBF929FFEA8D59CEDCA
3C0660DF163D854EF6C3A694BFC4C5F5BFA9D0E554EC0AAC8B981AE837E9DEC7
0E8BC41368FF1AEFC18D44944553A339A4F5D0B6AD45BFF4891BF8C2F529293E
F880D1B9147A7CAA0B6C48D3ABD53A405011646EB84C7B4627AA7EA898E6889A
E14D14267FC316F8A55538C0C2899042585D01A59AAA201B4F06C7E883222018
26840FD6F378C43DBEE7A6D0F2501D977B1280C2B72AE482319CC1057B7CCB67
EF7F11C424AA50215E9DD5B4BD182D3535C60817257FEA86B3B7FFD2698EB665
811A41E7AB20C711FCE8EA3CC6F0872C28108F7EBBF5BF770C0BA6C712274F3D
994772816DF9B504269E3B619082247D5EB409EDA3759B839A4B1ACFEA93279C
7247486D79A3B628783BB302BDA85F2BF3190FFF5B3236F14977546B1D3C5FC8
2329CBE65B99A6C416AB21D3E8160E813F2C217744EB7CD5D0D9287FA97D0495
E28CB8E2FE2A4CC0B9DE515E43677AA0CAB0E8D157F6BED3C1D0FE8A4F802753
BFFF91B1A26EB30141D2358C0C3F47AFF734D51390E769C474FBF60647C3BAA8
0761E6D04B760635771EFF726D4A1AEA08FDF71933A1249F78E18EDD2299E67B
F9EF6CC476F43A96C7535B2BBE6757B9B21A81AF2E6D2C08CBA31F970F76CC03
025AE7C3A325178BFBC86E463F306D9DC5347E756D2A0A7D920062A9EE8AE41F
583C8868C1A655B43E04EF1076D442FCC374BAD7070C877F3E664D2920D66CF0
84D6CE912E4B71168738523FE3C32E99C482B6C3EB2A796046A22768AC82C7B9
8E5474F99FEC2E64F07520CFA413E0F85E1E6FCC916ED413A9521F3FCB1FC8FD
435AD5424312FDAC01C613D99185ACABA2125F364237560ECA59253BA1D99F33
23786B20E0AC14D6C89D60DBE2E17850FEEDA72C8A882CF26E4192903A7EB745
0AA2BCC638BCB6D2318C6E6FB8AAB95F4372B574E18981FD2B469D303AD1CEB6
594C64FFBA81EC5A9B84DB541D8D299C5C5F56DD69E7635073B649F30A21AEFC
90350EFC42DA44F23139CA45625EC8E372273D238A38E9CC93B9AE116342C253
543D32885DF729FBBCB3554AB8B347918C4920C7E4177D390685A39887591DBE
3760653E9730E785A2CCF34A03FDAAFB0ACE837EC48B55D86EBE5D1CE5A96232
990045F72B448FF6ABDF2D13F2B551BBE0072CCCFF20F9EE043EB10733C06CC8
8625A3813E3C37DDD271CA8704AE6FD1226D19189FF54777E37337534BE8EA33
D9955C36121D5A26A64FE348622C6CDA9FAC1A26DBF07A91142FC5D22F5B66EE
D4F921646FF4FBD863FD0FB2888CEC1B725FD5FB4CE182E49DDEC899AAA70835
F4923B5B9944DD8E430DCB7638E13A91408466080E03ADD27601ECC2DFEB5A93
35A6FACD8C3F2BB2178486925CDAB6942722DF221264996510CA332C664EEC4F
30A1261A0096AB6580B12D648ED51EAB4EC52D51276F4BB7E88D9B2556169FE9
8FF9B3CFDF3CBA50098CDEA1059F65D9589F08BED25E07ACF5190AB43DABA32A
4C5D3EF840B9639CB10B78508923FB4AF9C8B369CDF0491AD6C66659BAB715BA
AAF85F128280E2DEFD5E144B1BB709F58D7A4AC90DEE83D511164B53B48747C7
E696E7A4903B769EBBC8CD538DD33D193BD3ECFAFC71FD2DB400DF06C7039750
3DF67C10B47377A99EBF027B1CC421D34F98B69FF4C335B95F4222A8BAB77664
299C8FC166975ED6FB9DEE4585381F74DD1E8BE9F6E73E463E777B06DF048FAC
43FC281ADE45FABED5C979A0B13651191055025C731C764200BAC03D1AA472AD
0AC9E5E0237AA3E225278BDC2BF00347943795145929FEE3E264F620B1DCD1A1
2494880F0EE0633A0F462AFEB1EEAF291E133934C72654A434C70998F514839E
3A2225EE93EE458AD6F5F979F004AF81C8F356470C31B4F54AA5E59A54271905
0B51B9508758F4EB2DC074D799F5116296B88716D5D3B801F1D8C20804D0BD5A
355BD413124FA95DC9A04313F59ED2C0E7E2EE6A389F64F3C4CE59ECDFEAC3DC
BFC56ADC1A80619F155C66DC637B24236DAFE0AF91D2FE194A7984342BE33C90
C19BF4DB8E3BE8175790160CEC2173583EDD87274B4DFC5AB3BD113C32A2137C
61D7ED3F9424B8B7EB69730D5E82B52D3CA46187D88D70D4ABE210875AF8BF08
E0F5142F182D1D02504BED42472B74E8F6E1B541E7EA7CB549067212058FADC2
99CF292FE789840D2BC04157F7F7795BA4F9747FCD772569E557E716BCBE5A06
6D81A7213B871E4D537100C4D81842BDF8F4324B6D4F873BA14CECB4C55C32E0
8DCC3DE023271CBBF0E1B4D89B070DBC4AF7638DA1EAE01CFE15FB204291B000
3D6529A3ACA9267B104DE7D912C5BFCAE5E84C5F5B24AE8BC106001A57771D1E
94A269173938DC242F0812442BE56007430C53D5BAC0B89EEEB9E2F9CFC6BCDF
D9A438C10F12F15A36FE45E57BD5CE0C7A57713AF055C0A0F972EBC5AA614BB9
A9DD0AF18A2C283506A62524C3113CEF9C35E34715E42D9D1AFFF7AACCB3BE5E
F63B1C4E79B49E7F41365AC1B832D55382E1223B42A1C367FAAFB12FEE3B9ACD
BA8A977F82C51263082991C3C58874284F72268456C879F6EB96BB55BF5157FD
09085730695ADEFF8C49470F3518B313A27AD6323009B9D3C80A07AF2AC449D1
A88C37D9B33655DAAAB8DF254303C06756103E4B5D9735BBF8799A87D2D7B2F5
6E2B1E6D718D50CE18101A05969CAFD3ACCB51DB16489580229DFEA4CF551103
450057E27BFA25D69E5E0620E775C4064934FB530B35AD9155EF03D074AB51FE
59FBDC140AE17DE96263A6CA5338F0545FC28B0030215A7C13C5DE5F73688726
66989F36E5021855C7699E17B7D32C3D557ED2F6F284CBCF8856B2A22E72C0C5
260B1C0EB705E12A9EAA132BF1BDA87D16BAAE317BE5757193BAFE2AFD3D6C9E
852E4F1C216AE1DE80F21E9035E809AD9EA1A7CE89BCBA746C4D9789658488E2
8072CC52ACFAB83995414E9D3900926FA8087A61383E01E649EAAE5C1D668664
65AD9DFD2D25D7026D8483CADDD89584DCEA8442C6E5F1B697672D9BC06AABB1
3F6BA87C962902A5B18BD06CD658AB4AF27B1BDB96A42FA469C5D66B7EB09D5C
D6919ADF2E9932C4295E25982DE1DC5A7D90AEC4DBC2B2F72F6D19FA0C4EFE4E
73FE9669F35AADD2AF01C9A84A76F6A2812AF0DEB6AAA7984479B2CDD4C7FB52
BE18F0CE103B2A5565A54C85367A7519E343CFC2D78EC26A2D26D003FF8EB066
C37DE9A2FE3BD88389B5683B09768AAE0DB68A07DEF7DD5661F54BD6DA1E2201
F720B8E4DED66936AC2EA6385BC62039FBEDBB8B96329D496F0C671B90E27529
70DB656699CD9ACBF1AE82CCD58A2AE489CAD91C004BA740ED479E1F2C55D469
2B58CBB1DF196C16595542D87310075536BBAAE3122167E726AA5700A7F5DDAD
626658F4E9D0FC8303A0F3976C669C507EA8B7E6D06BB1AB0AEA890D2AF44CCF
064AB8202A14494829C86E249FE5800842CF512CBC8FA98A881F83A471F22213
E57F13D5BC11E49CC4669035C44AF5F3304D3F6C008C0226D424401D65F05158
86986B17A99931B9F36257629F502FC147C08DFBBD51F7342C00A98BAF17D3B6
10379EB04726E88E1ABFAF6486A9DB54A5A8DC04C98855B7362F03D7B909BB19
91B68A01C5294C2F88BB40506E786EF0AA263EE24690BCF974DAF79F9EE98265
26A60DEB2873BD09667F644BC0B8AD597FE3E238A2E5D7302AF2174A15398560
D3C73502B0B4D09B4A4557B9CDC8D55D535F4AE006250207A2BC4BA4A0999189
E14D169B3EF5BA35FEA3AE7BC5658B37FDA2DBAA697C86E0B58F765DE187BD71
ACBA23B26E3DFBBF17DAA543093616EB52E3D68AE1763F5D4F4DE807368D6DDC
59C6DA3DB95D16D02B68E24AC468344C1073B301F5A683A7A2965471767901E6
7943792FB00831A1A5E93202593E34157624C5318D4173479B822AB7F0E9CD9B
977E0F1B60F0C3BF1784382575DAA3F61EA1B7BA2D31F0BB0A3C0B03E5AE3E59
8348C7EC0AB9762A8A45BC6E5F77C6978D6AC89C5D7D11818B6CF64B1E20A161
B93384BA7DC572C211DDF78636744F38F3B603EA8489EF5A661649ACEA380237
75848C344B68F7B8BF15D2DBA50C0094DC211CB2CB9415D893E8ACFBA9C7FD2B
85DDDA6BAA94B5CC8235FAF77798904F052A50EF8470C6FFC301E51161A7686C
5CF863268669C882E13945F8B69456110B9A8BBC4EBDF47712C6015D475293B3
AA15040D9AE80653D6B53BA1C6B70D5D4CC919ACE4469083EF5FB7623A837366
7616EC4FF76A709FF44CD04D369B07519A1AE3DBE1CAFD3883486E88B388D6BA
98B57E801B65547B306C56A02884BF97EAD4F46D1AAF6FAE0879881ED7B7CD46
1972DA89AB895E85D8B5DE106435BC09D3B6895D48993DCC8729E78E2E3D0E52
FBDA517F675A4C3850227D2F6D538F4070D893812D4DAE55F503759F48A221B8
6147DC39A2D77BF1BD48C9D3F19ABC023AE57F39C88BE3488D03ED6B3A3CE0D8
A9D08483D85B1B474DE9AB872CA193C523589094F0A3DA5564FCD10B4098EE73
D81063CFD5BE7AAA6DE1CF6093591FF6213CFAC0DCAEA95CD66BD6F8D2701298
CC9F7BD4B88B6AB9C9DA2552AF2D522F227BFFF480399154DE9BC0E0DF1429FD
A983E22A853A0D7BE5A2A95491508648F0A01E1CCCC89D8ED054FBC49927F065
AA6EEC20EC94B7D05193526AC7C45F0C994BBBB565DB0182B969C7F570812E65
B4139519BA66C7E248524102E862C148A9A8F08A40DAB7EDD069E746836BBFC8
E795CE7F60CCE91BF4155649058C592B7087C2FF866910
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158278 55380994 1000 600 600 (Masterarbeit.dvi)
@start /Fa 188[85 67[{ encqec ReEncodeFont }1 119.552
/TeXGyrePagella-Regular rf /Fb 192[40 63[{ encqec ReEncodeFont }1
90.9091 /TeXGyrePagella-Bold rf /Fc 135[47 3[30 14[44
16[56 34[45 3[30 45[{ encqec ReEncodeFont }6 90.9091
/TeXGyrePagella-Regular rf /Fd 138[51 37 1[34 3[51 1[23
2[23 51 1[31 46 1[44 1[48 13[56 6[53 24[50 50 50 49[{
 enclmec ReEncodeFont }16 90.9091 /LMSans10-Bold rf /Fe
133[57 3[60 67 48 50 45 3[67 1[31 2[31 67 1[40 61 1[58
1[63 13[73 6[69 2[40 23[66 49[{ enclmec ReEncodeFont }18
119.552 /LMSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 136 -217
a
SDict begin H.S end
 136 -217 a 136 -217 a
SDict begin H.R end
 136 -217 a 136 -217 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 136 -217
a  0 TeXcolorgray  144 102 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 144 102 a 144 102 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 144
102 a 144 102 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 144 102 a 0 TeXcolorgray Black 144 102
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Schleifen) /OUT
pdfmark end
 144 102 a 144 102 a
SDict begin [/Count -0/Dest (section*.2) cvn/Title (Literatur) /OUT
pdfmark end
 144 102 a 144 102 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 144 102 a 144
102 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 144 102 a 144 102 a
SDict begin H.S end
 144 102 a 144 102 a
SDict begin 13.6 H.A end
 144 102
a 144 102 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 144 102 a 0 TeXcolorgray 144 193 a
SDict begin H.S end
 144 193
a 144 193 a
SDict begin 18 H.A end
 144 193 a 144 193 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 144 193 a Fe(Inhaltsverzeichnis)p
Black 0 TeXcolorgray 144 400 a
SDict begin H.S end
 144 400 a Fd(1)86 b(Schleifen)651
400 y
SDict begin 13.6 H.L end
 651 400 a 651 400 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 651 400 a 2916 w Fd(2)p Black
0 TeXcolorgray 144 604 a
SDict begin H.S end
 144 604 a Fd(Literatur)507 604
y
SDict begin 13.6 H.L end
 507 604 a 507 604 a
SDict begin [/Subtype /Link/Dest (section*.2) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 507 604 a 3060 w Fd(3)p Black 0
TeXcolorgray 0 TeXcolorgray 1858 5443 a Fc(1)p 0 TeXcolorgray
Black eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -8 -8 a
SDict begin H.S end
 -8 -8 a -8
-8 a
SDict begin H.R end
 -8 -8 a -8 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -8 a 0 TeXcolorgray Black 0 0
a
SDict begin H.S end
 0 0 a 0 0 a
SDict begin 13.6 H.A end
 0 0 a 0 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 0 0 a 0 TeXcolorgray 91 x Fe(1)66
b(Schleifen)p Black 0 411 a Fb(??)17 b Fc(T)-9 b(extT)g(extT)g(extT)g
(extT)g(extT)g(extT)g(extT)g(extT)f(extT)h(e)o(xtT)g(ext)o(T)g(ext)10
b(T)-9 b(extT)g(extT)g(extT)g(extT)g(extT)g(extT)g(extT)g(ext)o(-)-3
524 y(T)g(extT)g(extT)g(ext)p 0 TeXcolorgray Black 1
TeXcolorgray 1 TeXcolorgray 1 TeXcolorgray 3 3086 5177
2225 v 1 TeXcolorgray 0 TeXcolorgray -1535 2687 a @beginspecial
@setspecial @endspecial @beginspecial @setspecial @endspecial
@beginspecial @setspecial @endspecial @beginspecial @setspecial
@endspecial Black 4841 1708 a Fa(C)p 0 TeXcolorgray 1
TeXcolorgray 1 TeXcolorgray 0 861 5183 4 v 0 3088 4 2229
v 5180 3088 V 0 3090 5183 4 v Black -3 3387 a Fc(T)g(extT)g(extT)g
(extT)g(extT)g(extT)g(extT)g(extT)g(extT)f(extT)h(e)o(xtT)g(ext)o(T)g
(ext)o(T)g(ext)9 b(T)-9 b(extT)g(extT)g(extT)g(extT)g(extT)g(extT)g
(extT)g(ext)o(-)-3 3499 y(T)g(extT)g(extT)g(extT)g(extT)g(extT)g(extT)g
(ext)p 0 TeXcolorgray Black eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -8 -8 a
SDict begin H.S end
 -8 -8 a -8
-8 a
SDict begin H.R end
 -8 -8 a -8 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -8 -8 a 0 TeXcolorgray Black 0 TeXcolorgray
0 405 a
SDict begin H.S end
 0 405 a 0 405 a
SDict begin 18 H.A end
 0 405 a 0 405 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 0 405 a Fe(Literatur)p
Black 0 TeXcolorgray Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
