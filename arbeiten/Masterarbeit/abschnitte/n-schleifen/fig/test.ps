%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: test.dvi
%%CreationDate: Tue Aug 30 10:06:13 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Fourier-Math-Letters-Italic Utopia-Italic
%%+ Utopia-Regular TeXGyrePagella-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o test.ps test.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.08.30:1006
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: q-ec.enc 0 0
% This file belongs to the TeX Gyre collection of fonts. The work
% is released under the GUST Font License. See the respective
% MANIFEST*.txt and README*.txt files for the details.
% For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% 
% NOTE: all fonts of the TeX Gyre family share EXACTLY THE SAME
%       *.enc files.
/encqec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pi 3.141592 def /ed{exch def}def /gs{gsave dup scale}def /gsw{ gs
/width ed width setlinewidth }def /p1{/y1 ed /x1 ed}def /p2{/y2 ed
/x2 ed}def /p3{/y3 ed /x3 ed}def /p4{/y4 ed /x4 ed}def /garrow{/arrowpos
ed /arrowspec ed}def /setabs{ dup load abs def }def /normalizearc {
translate exch dup rotate sub 3 2 roll { neg 1 -1 scale } if dup abs
360 ge { pop 360 } { dup dup 0 lt { 360 sub } if 360 div truncate 360
mul sub dup 0.1 lt { pop 360 } if }ifelse } def /normalizeline { 3
index 3 index translate 2 index sub exch 3 index sub 2 copy atan rotate
dup mul exch dup mul add sqrt 3 1 roll pop pop } def /abox{ newpath
x1 y1 moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto closepath }def
/atriangle{ newpath x1 y1 moveto x2 y2 lineto x3 y3 lineto closepath
}def /abezier{ newpath x1 y1 moveto x2 y2 x3 y3 x4 y4 curveto }def
/distance{ dup 3 index sub dup mul 2 index 5 index sub dup mul add
sqrt } def

 /arrowVTriangle { /arrowinset ed /arrowlength ed /arrowwidth ed /arrowstroke
ed newpath 0 arrowlength -0.5 mul moveto arrowwidth arrowlength rlineto
arrowwidth -1 mul arrowlength arrowinset mul -1 mul rlineto arrowwidth
-1 mul arrowlength arrowinset mul rlineto closepath arrowstroke 0 ne
{ gsave arrowstroke setlinewidth stroke grestore } if fill } def /arrow1
{ gsave rotate exec grestore } def

 /fixdash{ 2 copy gt 1 index 0 ne and { 2 copy 2 mul div 0.5 sub round
dup 0 le { pop 0 } if 2 mul 1 add exch pop div dup 2 array astore 0
setdash } { pop pop [] 0 setdash } ifelse } def

 /dashline{ gsave distance dsize fixdash newpath moveto lineto stroke
grestore } def

 /dasharc{ gsave 3 copy sub abs pi mul 180 div mul 3 index angdsize
mul fixdash newpath arc stroke grestore } def

 /doublegluon{ gsw /linesep ed /num ed /ampi ed normalizeline /dr ed
linesep 0 eq { 0 0 dr 0 ampi num gluon1 } { 0 linesep 2 div dup dr
exch ampi num gluon1 0 linesep -2 div dup dr exch ampi num gluon1 }
ifelse grestore } def

 /gluon1{ gsave /num ed /ampi ed normalizeline /dr ed /num num 0.5
sub round def /inc dr num 2 mul 2 add div def /amp8 ampi 0.9 mul def
amp8 0 lt {/amp8 amp8 neg def} if /x1 inc 2 mul def newpath 0 0 moveto
inc 0.1 mul ampi 0.5 mul inc 0.5 mul ampi inc 1.4 mul ampi curveto
x1 amp8 add dup ampi exch ampi neg dup x1 exch curveto 2 1 num { pop
x1 amp8 sub dup ampi neg exch ampi dup x1 inc add exch curveto /x1
x1 inc dup add add def x1 amp8 add dup ampi exch ampi neg dup x1 exch
curveto } for x1 amp8 sub dup ampi neg exch ampi dup x1 inc 0.6 mul
add exch curveto x1 inc 1.5 mul add ampi dr inc 0.1 mul sub ampi 0.5
mul dr 0 curveto stroke grestore } def

 /doublephoton{ gsw /linesep ed /num ed /ampi ed normalizeline /dr
ed linesep 0 eq { 0 0 dr 0 ampi num photon1 } { 0 linesep 2 div dup
dr exch ampi num photon1 0 linesep -2 div dup dr exch ampi num photon1
} ifelse grestore } def

 /photon1{ gsave /num1 ed /ampi1 ed normalizeline /dr ed /num1 num1
2 mul 0.5 sub round def /x2 dr num1 div def /sign 1 def 1 1 num1 {
pop newpath 0 0 moveto 4 3 div x2 mul pi div dup neg x2 add 4 3 div
ampi1 sign mul mul dup 3 1 roll x2 0 curveto stroke /sign sign neg
def x2 0 translate } for grestore } def

 /zigzag{ gsw /num ed /ampi ed normalizeline /dr ed /num num 2 mul
0.5 sub round def /x2 dr num div def /sign 1 def 1 1 num { pop newpath
0 0 moveto x2 2 div ampi sign mul lineto x2 0 lineto stroke /sign sign
neg def x2 0 translate } for grestore } def

 /doublephotonarc{ gsw normalizearc /darc ed /radius ed /linesep ed
/num ed /ampli ed /num num 2 mul round def /darc1 darc num div def
/cp darc1 cos def /sp darc1 sin def darc1 2 div dup /cp2 exch cos def
/sp2 exch sin def linesep 0 eq { radius photonarc1 } { linesep 2 div
radius add photonarc1 linesep -2 div radius add photonarc1 } ifelse
grestore } def

 /photonarc1{ gsave /radius1 ed /ampli1 ampli def newpath 1 1 num {
pop radius1 0 moveto /beta radius1 darc1 mul 180 ampli1 mul div def
/tt sp cp beta mul sub cp sp beta mul add div def /amp1 radius1 ampli1
add 8 mul beta cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul 3 mul
sp 4 mul sub add radius1 mul sub beta tt sub 3 mul div def radius1
ampli1 add 8 mul cp2 mul 1 cp add radius1 mul sub 3 div amp1 sub dup
radius1 sub beta mul amp1 dup radius1 cp mul sub tt mul radius1 sp
mul add radius1 cp mul radius1 sp mul curveto /ampli1 ampli1 neg def
darc1 rotate } for stroke grestore } def

 /doublegluearc{ gsw normalizearc /darc ed /radius ed /linesep ed /num
ed /ampi ed /num num 0.5 sub round def linesep 0 eq { radius gluearc1
} { linesep 2 div radius add gluearc1 linesep -2 div radius add gluearc1
} ifelse grestore } def

 /gluearc1{ gsave /radius1 ed /dr radius1 darc mul pi mul 180 div def
/const darc dr div def darc 360 lt { /inc dr num 2 mul 2 add div def
} { /inc dr num 2 mul div def } ifelse /amp8 ampi 0.9 mul def /amp1
radius1 ampi add def /amp2 radius1 ampi sub def /amp3 radius1 ampi
2 div add def /amp4 amp1 inc amp8 add const mul cos div def /amp5 amp2
amp8 const mul cos div def /amp6 amp1 inc 0.6 mul amp8 add const mul
cos div def /amp7 amp1 inc 0.9 mul const mul cos div def amp8 0 lt
{/amp8 amp8 neg def} if newpath darc 360 lt { /x1 inc 2 mul def radius1
0 moveto inc 0.1 mul const mul dup cos amp3 mul exch sin amp3 mul inc
0.5 mul const mul dup cos amp7 mul exch sin amp7 mul inc 1.4 mul const
mul dup cos amp1 mul exch sin amp1 mul curveto x1 amp8 add const mul
dup cos amp6 mul exch sin amp6 mul x1 amp8 add const mul dup cos amp5
mul exch sin amp5 mul x1 const mul dup cos amp2 mul exch sin amp2 mul
curveto 2 1 num } { /x1 0 def amp2 0 moveto 1 1 num } ifelse { pop
x1 amp8 sub const mul dup cos amp5 mul exch sin amp5 mul x1 amp8 sub
const mul dup cos amp4 mul exch sin amp4 mul x1 inc add const mul dup
cos amp1 mul exch sin amp1 mul curveto /x1 x1 inc dup add add def x1
amp8 add const mul dup cos amp4 mul exch sin amp4 mul x1 amp8 add const
mul dup cos amp5 mul exch sin amp5 mul x1 const mul dup cos amp2 mul
exch sin amp2 mul curveto } for darc 360 lt { x1 amp8 sub const mul
dup cos amp5 mul exch sin amp5 mul x1 amp8 sub const mul dup cos amp6
mul exch sin amp6 mul x1 inc 0.6 mul add const mul dup cos amp1 mul
exch sin amp1 mul curveto x1 inc 1.5 mul add const mul dup cos amp7
mul exch sin amp7 mul dr inc 0.1 mul sub const mul dup cos amp3 mul
exch sin amp3 mul dr const mul dup cos radius1 mul exch sin radius1
mul curveto } if stroke grestore } def

 /dasharrowdoubleline{ gsw normalizeline /dr ed /dsize ed /linesep
ed /flip ed garrow /linesep setabs /linewidth width def /y11 linesep
0.5 mul def /y22 linesep -0.5 mul def 0 y11 dr arrowpos mul y11 dashline
linesep 0 ne { 0 y22 dr arrowpos mul y22 dashline } if dr arrowpos
mul 0 translate /arrowspec load flip { -90 }{ 90 } ifelse arrow1 0
y11 dr 1 arrowpos sub mul y11 dashline linesep 0 ne { 0 y22 dr 1 arrowpos
sub mul y22 dashline } if grestore } def

 /arc2{ gsw normalizearc /darc ed /radius ed /dsize ed /linesep ed
/angdsize dsize radius div def /flip ed garrow /arcmid darc arrowpos
mul def dsize 0 eq { linesep 0 eq { 0 0 radius 0 darc dasharc } { 0
0 radius linesep 2 div add 0 darc dasharc 0 0 radius linesep -2 div
add 0 darc dasharc } ifelse } { linesep 0 eq { 0 0 radius 0 arcmid
dasharc 0 0 radius arcmid darc dasharc } { 0 0 radius linesep 2 div
add 0 arcmid dasharc 0 0 radius linesep -2 div add 0 arcmid dasharc
0 0 radius linesep 2 div add arcmid darc dasharc 0 0 radius linesep
-2 div add arcmid darc dasharc } ifelse } ifelse arcmid rotate radius
0 translate /arrowspec load flip { 0 } { 180 } ifelse arrow1 grestore
} def

 /vertex{ gs /dotsize ed translate newpath 0 0 dotsize 0 360 arc fill
stroke grestore } def

 /bcirc{ gsw /radius ed translate gsave 1 setgray newpath 0 0 radius
0 360 arc fill grestore newpath 0 0 radius 0 360 arc stroke grestore
} def

 /gcirc{ gsw /gcolor ed /radius ed translate 1 setgray newpath 0 0
radius 0 360 arc fill gcolor setgray newpath 0 0 radius 0 360 arc fill
0 setgray newpath 0 0 radius 0 360 arc stroke grestore } def

 /ccirc1{ gsw /radius ed translate newpath 0 0 radius 0 360 arc fill
grestore } def

 /ccirc2{ gsw /radius ed translate newpath 0 0 radius 0 360 arc stroke
grestore } def

 /box{ gsw p2 p1 abox stroke grestore } def

 /bbox{ gsw p2 p1 gsave 1 setgray abox fill grestore abox stroke grestore
} def

 /gbox{ gsw /gcolor ed p2 p1 1 setgray abox fill gcolor setgray abox
fill 0 setgray abox stroke grestore } def

 /cbox1{ gsw p2 p1 abox fill grestore } def

 /cbox2{ gsw p2 p1 abox stroke grestore } def

 /triangle{ gsw p3 p2 p1 atriangle stroke grestore } def

 /btriangle{ gsw p3 p2 p1 gsave 1 setgray atriangle fill grestore atriangle
stroke grestore } def

 /gtriangle{ gsw /gcolor ed p3 p2 p1 1 setgray atriangle fill gcolor
setgray atriangle fill 0 setgray atriangle stroke grestore } def

 /ctriangle1{ gsw p3 p2 p1 atriangle fill grestore } def

 /ctriangle2{ gsw p3 p2 p1 atriangle stroke grestore } def

 /btext{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def gsave 1 setgray abox fill grestore
abox stroke hsize 2 div neg fsize 3 div neg moveto thetext show grestore
} def

 /b2text{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def gsave 1 setgray abox fill grestore abox stroke hsize1 2
div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /gtext{ gsw /fsize ed /thetext ed /graysc ed translate /hsize thetext
stringwidth pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul
3 div neg def /x2 x1 neg def /y2 y1 neg def graysc setgray abox fill
0 setgray abox stroke hsize 2 div neg fsize 3 div neg moveto thetext
show grestore } def

 /ctext1{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox fill grestore } def

 /ctext2{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox stroke hsize 2 div neg fsize
3 div neg moveto thetext show grestore } def

 /g2text{ gsw /fsize ed /text2 ed /text1 ed /graysc ed translate /hsize1
text1 stringwidth pop def /hsize2 text2 stringwidth pop def hsize1
hsize2 lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize
fsize add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def
/y2 y1 neg def graysc setgray abox fill 0 setgray abox stroke hsize1
2 div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /c2text1{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox fill grestore } def

 /c2text2{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox stroke hsize1 2 div neg fsize 6 div moveto text1 show
hsize2 2 div neg fsize 5 mul 6 div neg moveto text2 show grestore }
def

 /ptext{ gs /text ed /fsize ed /mode ed 3 1 roll translate rotate mode
3 lt { 0 fsize neg translate } { mode 6 lt { /mode mode 3 sub def 0
fsize 2 div neg translate } { /mode mode 6 sub def } ifelse } ifelse
/fsize text stringwidth pop def mode 1 eq { fsize 2 div neg 0 translate
} { mode 2 eq { fsize neg 0 translate } if } ifelse 0 0 moveto text
show grestore } def

 /goval{ gsw /gcolor ed /x1 ed /x2 ed /radius ed translate x1 rotate
x2 radius div 1.0 scale 1 setgray newpath 0 0 radius 0 360 arc fill
gcolor setgray newpath 0 0 radius 0 360 arc fill 0 setgray newpath
0 0 radius 0 360 arc stroke grestore } def

 /coval1{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc fill grestore } def

 /coval2{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /oval{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /docurve{ x1 2 mul x2 add 3 div y1 y0 sub x1 x0 sub div x2 x0 sub
mul y2 y0 sub x2 x0 sub div x1 x0 sub mul add y1 add y0 2 mul add 3
div x1 x2 2 mul add 3 div y2 y3 sub x2 x3 sub div x1 x3 sub mul y1
y3 sub x1 x3 sub div x2 x3 sub mul add y2 add y3 2 mul add 3 div x2
y2 curveto } def

 /makecurve{ gsw /points ed /ss points length 2 idiv 2 mul def newpath
ss 4 gt { /x1 points 0 get def /y1 points 1 get def /x2 points 2 get
def /y2 points 3 get def /x3 points 4 get def /y3 points 5 get def
/x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div y2 y1 sub x2 x1
sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul y1 2 mul add
y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed /x0 points ii
get def /y0 points ii 1 add get def /x1 points ii 2 add get def /y1
points ii 3 add get def /x2 points ii 4 add get def /y2 points ii 5
add get def /x3 points ii 6 add get def /y3 points ii 7 add get def
docurve } for /x0 points ss 6 sub get def /y0 points ss 5 sub get def
/x1 points ss 4 sub get def /y1 points ss 3 sub get def /x2 points
ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul x1 sub def
/y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub 2 mul x2 x1
sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve } { ss
4 eq { points 0 get points 1 get moveto points 2 get points 3 get lineto
} if } ifelse stroke grestore } def

 /makedashcurve{ gsw /dsize ed /points ed /ss points length 2 idiv
2 mul def newpath ss 4 gt { /x1 points 0 get def /y1 points 1 get def
/x2 points 2 get def /y2 points 3 get def /x3 points 4 get def /y3
points 5 get def /x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div
y2 y1 sub x2 x1 sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul
y1 2 mul add y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed
/x0 points ii get def /y0 points ii 1 add get def /x1 points ii 2 add
get def /y1 points ii 3 add get def /x2 points ii 4 add get def /y2
points ii 5 add get def /x3 points ii 6 add get def /y3 points ii 7
add get def docurve } for /x0 points ss 6 sub get def /y0 points ss
5 sub get def /x1 points ss 4 sub get def /y1 points ss 3 sub get def
/x2 points ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul
x1 sub def /y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub
2 mul x2 x1 sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve
} { ss 4 eq { points 0 get points 1 get moveto points 2 get points
3 get lineto } if } ifelse centerdash stroke grestore } def

 /pathlength{ flattenpath /dist 0 def { /yfirst ed /xfirst ed /ymoveto
yfirst def /xmoveto xfirst def } { /ynext ed /xnext ed /dist dist ynext
yfirst sub dup mul xnext xfirst sub dup mul add sqrt add def /yfirst
ynext def /xfirst xnext def } {} {/ynext ymoveto def /xnext xmoveto
def /dist ynext yfirst sub dup mul xnext xfirst sub dup mul add sqrt
add def /yfirst ynext def /xfirst xnext def } pathforall dist } def

 /centerdash{ /pathlen pathlength def /jj pathlen dsize div 2.0 div
cvi def /ddsize pathlen jj 2.0 mul div def [ddsize] ddsize 2 div setdash
} def

 /logaxis{ gsw /offset ed /hashsize ed /nlogs ed normalizeline /rr
ed offset 0 ne { /offset offset ln 10 ln div def } if /offset offset
dup cvi sub def newpath 0 0 moveto rr 0 lineto /lsize rr nlogs div
def 0 1 nlogs { /x2 ed x2 offset ge { /y2 x2 offset sub lsize mul def
y2 rr le { y2 0 moveto y2 hashsize 1.2 mul lineto } if } if } for stroke
width 0.6 mul setlinewidth newpath 0 1 nlogs { /x2 ed 2 1 9 { ln 10
ln div x2 add /xx2 ed xx2 offset ge { /y2 xx2 offset sub lsize mul
def y2 rr le { y2 0 moveto y2 hashsize 0.8 mul lineto } if } if } for
} for stroke grestore } def

 /linaxis{ gsw /offset ed /hashsize ed /perdec ed /numdec ed normalizeline
/rr ed newpath 0 0 moveto rr 0 lineto /x1 rr numdec perdec mul div
def /y1 rr numdec div def /offset offset x1 mul def 0 1 numdec { y1
mul offset sub dup 0 ge { dup rr le { dup 0 moveto hashsize 1.2 mul
lineto } if } if } for stroke width 0.6 mul setlinewidth newpath offset
cvi 1 numdec perdec mul offset add { x1 mul offset sub dup 0 ge { dup
rr le { dup 0 moveto hashsize 0.8 mul lineto } if } if } for stroke
grestore } def

 /dashbezier{ gsw /dsize ed p4 p3 p2 p1 dsize 0 ne { [dsize dsize]
0 setdash } if abezier stroke grestore } def
 
@fedspecial end
%%BeginFont: TeXGyrePagella-Regular
%!PS-AdobeFont-1.0: TeXGyrePagella-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.
% Supported by CSTUG, DANTE eV, GUST, NTG, TUG, and TUG India.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% See the MANIFEST-TeX-Gyre-Pagella.txt and README-TeX-Gyre-Pagella.txt
% files for the details. For the most recent version of this license see
% http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt or
% http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt
% This work has the LPPL maintenance status "maintained".
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-TeX-Gyre-Pagella.txt file.
% ADL: 726 274 0
%%EndComments
FontDirectory/TeXGyrePagella-Regular known{/TeXGyrePagella-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2006-2009 for TeX Gyre extensions by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS). Vietnamese characters were added by Han The Thanh.)readonly def
/FullName(TeXGyrePagella-Regular)readonly def
/FamilyName(TeXGyrePagella)readonly def
/Weight(Regular)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /TeXGyrePagella-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-514 -283 1284 1098}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E69EBAE83C0CA39F01BA788A9A00FE96836E26
F08499E8C43F39E8BAE76ED0ECAFE0E5EA000CC288434C2DC7F6E8DAEA500479
F69AD579AE10A9466B201D560904708D60F99A9990A17F7A18E9F9577A0A3DD7
466BA14D72C5EF5605499701B317BEFDA980F94CFBEA6AFB3D77763016249167
A51E0B4A578644297B6FF155FDD5FE8409D4B4DB63485041A8A78D10E4B41033
B6BB55E5B18B6293A67B08B311A75240BF3C95F250FA9E9F8E8BCB3D0B78D66C
FDE041042C0864990FF303F28AD7549322181BC19522B07A66C4D22AE027B74A
CB8996380D3FC0C1B8380E3E1C61BFEC906A8C861F53FC79C7B5F3F8953C3C8B
E2E31FA1A419C5DAD14A1C616933F180DC3895436B2CD73C1EA399182D492BE4
E9A9077809D330A8E0D7DF459CD2FD4FE2B1CE7641EDE813C73413A1172212D9
D8CC95874D7F1388B6B717465604C08AA1550259C17F93F9905897F69BAA9DA6
174663348037496802184EC8CA6E0435AFB5C7BD6E67275E4EB1582CB601A5CA
FA2DDF83B543923C97BBBA3B07BBC5DA7EC8CE8A4FA31D7C0870455C5AD6A460
67A3DA5E93751FA3A865EEE499267046717131418AC10B44DB46E3ABB3A93BF4
1CC68AF68AA2A5A1617D0F09E13480C51DE6BF00F57BE1A6216E72EB32C83501
35286E6952207398775DC1ADD0A4E5535E4BF4589F969825FCEB6EF134C8C8BF
E361E01391D444139677075786531C61776B2159C19FF4D9C973A4CE6BE0FF6C
9AEA3540409C39A1E4E81FCCCA2182CD502AABE76165081AE499E7A0E7659254
F63BD9B241C58F194C140BE0A3B808FF59908F9FA0EDCCAC404B98FB7AF8EBDA
E63E8453CDB1A0FE06B568165AB37126B8A8508BEAD9A0A3F6309CA95A5181A5
5DE3EF1A115E5D0BE02B6AF28CB2BBD55A8CBB85149E27CDA501EB1A1DFB26CB
84EDB3AF401E6A5F63F496248A3BE7B42FC545726A930D73ED3CD797B91398B1
792D8778F669CA7524C037DE103173590DBB7B5603B8AF472A1EE7843E537E1F
460B1676AFE4479DE32CB1F9492C85DC2FD841CD56447631B2A26D70E7CB8767
7E02D47DB24D496790CD292ACA6F1090FCCDCE297A1E2DA99EB13C1848746130
D6CEB0514F292EAE51EBF50A7B4F21F4026AADC6C6AE72D42BE6DCF11C440EE8
1A9A555F19D9565043816BDF727FC16450E008B9A2A9C69D704164C36B9E9D43
C409CCB8EB531837396EB52D26949AB970857113BFC954E906513EE5F5413B11
FC9A0751C9864D727013B6AF798D3CD30A9E40FF7BC1C8059928ABE24544F415
69DAEB2409C556F99D6D0A7E6D0F72BA8FBA57162992D85CAD3B0B79A7504BBF
5BA6C59C6BE0B2BF3FBC7752850CB7085567F6AD3F4B37851566D69AA649F97C
022D14EF1B8897DF2D441935A0C19E7D67C5807A43C5315B46B7EBAF4D51258A
D07F49A868C4FFC45845D148D12AE567FF26A95D677617CAEE4CA4B282C8E1BE
B1EAE737051C55625AD1F9B8F9966E65A7C94A8804FD696B3F07019B87120BA7
E2FB7B0F59266719A1D3D3090901719F072158DF40AA7C78D128AF38AD368F94
E3A541677336CE9CB590A8ABE634D07B0846A0244BA3DD711DCA361EBF3DB4F6
F633CEBB85B1388B197E0A8EEB2A4D518DF5FE373DA1264FA065C0B2CD067224
3748F7A097529B9C4495A1F67111358F4298CB7EB449D87043C4686B22318C09
9EF458FC2B5CDD2591517766BE037BAFBC79F33E07B315ADF614ACAED323DDE3
05FC78DBBC7B2BA8D60FA49AEA76DE76DD9F7E1C19FE49600B28E6DE6DD56307
77328F56CEAD9766287080CBB9708B8666C5B4C87CDE7CF4A5D5D9B89D2073D8
B10856C476FBFA10D11E87A61DFE3103AF0DAF9056A6FFE6E3269C262DDCB65D
3619B06C872C0658E7A92A3A310D956421EB00D5E9FA2169518A8C7574099797
CEA95428844AD4E450427A92DBFB6061F8B2871A03711ACD7355594B80602145
9FB6F81F2408C094AB7B8FD6A0ADF7F65CD65BEB82695CDED1A9D574718B99D2
D61490B6E8CF001E06AC598CEAE5218EBDF7B90241CFD4039CF6F8DAC01BA256
DE73FCFFDA5EB3BB2E7863807FC36AB88C65647721766FF51819C4206CB45D26
D8D6A2071FFCBC9839261EF3EBA3EC08C56D322EE68808C145A650A0E70CD5AD
69A8574AA9C27E6FA70BA42807334E91D32F9D5DA2F10E46CF71C02C79BCE014
09FA599DB4EB07B23F2965672F9CD4FDFA838ABDF1AD7E645472E49931F5C433
BD821FCA5377013F33CCC9F0485CAF90627DC9C15DE95DB2A8BF9F1D9E6132B5
E89C52997A30D31C812A4DC7E6E66A1AC1339D085BF92634D01200566531B36A
C6458551951A5D5A1EE8C6C313F0544CEE42F1A0B83CB645BFCFE332E43EEA95
A09C7B64F4D835BC8D94785CE3956B26A04A41ED69F9AF5DFB92A3D4E10D3318
C11A741845FE977A7D225177BB19C72EFB4EA66BAF36B6369F719125AD920445
661E0B5AA0AC46415866C42793B52B6C65508434B3CF9D7BE8F37B6909E83D1B
4C852865F417EC0BAB16CB017386EB0C9E439927C0D60F21732CD77A27490184
762655252E4EA505D9FB5DBC4C88C8934ABD872CE49A752F6320F73D89572776
DB192167B518DBF919ACEC8D5987FFE19B92C3747DDA9DC6806E9B95A4865262
2D8DEA411D22EC13D6CD3D48CCC17A169FF3C53E435F8619E2561262B261E5A2
D9EAB0E9797836CA0B1D5F2F210BA43830B823E31313CC9108D8616C91C95824
E00E0D4FA553D6C6E030FDFA52A4A0DD9F257A9C5A6427DBF5A61565D2CA084B
9F140268A119523E6B184E1293F5E245E294E058F3B1FB5B84C6A79F08857AB0
29E6C75123EDF2D9B5F50E40FD7D66721D7BA7DE4888A35FB883943D8D811986
9167F327D58731A241E11468BBA16BA3494A4E80FF120A4D0440D13DCA3AB0CD
17E5DAE88D33AC9465A5B55115DE0DA8F40992ED9BCE277024155EE3A67C4316
F9A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E842AF43D57F70718498F
D85E7A99EAB7423DAA511AA971CDE9629C0B16424CF3609285DAEB0115E4A952
785CED7E829F5B18B621B99B494EBA7C404280919F04C898AEE1CA2D6ED5112A
7E67D718A1691F6A9FAF91FBFDBF163B51D39167A93E61FD9B41053DB67FC7C9
A305ECC299FBD9A74AC0CD41EFED2D2CC5A310EEC51114475E9EE4972E9524DC
3EB093A2793D553475BF4871314D5D009BEC8C5951422C3492BE918862A65797
13735FA47174630C757411E78EE7E862E8A7BF78F890210A54F7FEED45331ADA
0E610827DAF899F1EACBDC8A87EC94DB4BBBB4DE6B4C3AEE414049212B3F0ED9
A6A38BB39CA02A3504FEB9ECF4787CF3CCC369221759F4F1124070141F4CD019
14C01DBBD3B52077B16B4C3933695839961674CE2B5AEF26AFE67C9CE3D85424
3B2D272CF5C16F0AAD1815A417E043709884EB8115BFB080B2E1309092997810
5673588C1C8E49780E6AD8333F289DDC7A499304DCD9A5B9FAAAE614CBECA6C2
E7E0A6FDC0D15A6913B9819B3642F2B042B7C649F8CCDB28BD192CAF5EACC12D
2733C29383B40161092DB8C5BFD39EF98F57FD30FD13579494E5D83CD8447B92
6452AFF608EE55FE5E327737A97AB5844362B0652A6345C6EC83DFEFE0994552
32455F7F716170C5EA7DB77612DF679C0906D77AB2144E873962249BA7031D4D
97DE2280C10756DAC422F0B742F1AE7D390F878368BF418BFC665172859FA935
BE5662C2CF29F74199D60E0EDEC2BF9E3D71D369639D13E64A8B4AE46E1C2BDE
A679FF899B2E62D89D132862108C488F11D9AEF8DBAB34EE26443381C8DB3FA8
E6A18717955DD0CB5C9B7DBCAFD9B53928CB0BB93466BBAC6D1C1C7CF6BEF070
0968D7CF74E2B3586C8CB8079F2DFD5420F6D2453D8A30572DD2A12550B2D611
6BBA98CF908FCD532F97CED47ED2F24D460DB6E4324536590BCE1D420F1B6DB7
2361A82EC811DD60CFDB954489A4A227F60027459721E0E7D5BEC1C0E35C42AA
5C4F7B414A39B0EEA406FA1978FAAAC9543651A011BF427E51D901EE474FC82E
AF8FDCC119B80A5ECF579B594ABD65472705FDFD994C874BA8127BCDC2256364
87656C1A822C24636E6FD8026C79AC276D5AF1C3962F47DB109EA3EEDE1877A0
6CDD5DDDDB891B374B4CE7F52144B2D4AA133851EC30082831A2881601AB92A2
C4F2837527124582DBF9B81EB3B2C7642AF0912B531FCAB29F4C8E7D591AE049
4A4BF14767F03C24BAA32F2A94D9355ECCF69B6298116DF61E57434E78517090
BE92D4EDC366D10C640E2BEEA25168B07153EABF5BE3A36153EA88A797296F2F
E302F23663D5ACEAD802B02FD1CB0AEF453014EC03F79919F839FB49CF296116
0C191D76693FBC62A5184C4BF062EC5F4829E4F9EA0EEA68DEAD0613A62C3000
C037092ED0A93F8486FDD39CFCD0E8A6224BFA03E8C6D73F4B8F480327701262
285C527828E5E203F328AD955AB433987B229534C53061C3350047FB20E3887F
514B5897FDF225685D18D67999974BE93A89999F153727432CFA9D0FEB17D073
C904F5426F7148BB8FA709AF1344271173529372ACDD21882003FDC5DA687CFA
43C0D1856C461F97C7AEDE1308C661A0312C0A930453867D1BDA0D5AE27DE839
43B84072FB99578B809358856E4E99B28E138E2DB585CAA3CC5056C324BAA2C7
919C7E116629E963F00FB88D12C7B187FC10B4C71E24BCFED96E689908E9D864
BE3DDF19BB3922F86224D004E35AB8A8F503F391632AB92FE41DB9E794630D67
4AC5510E1A233D02A00DAF51B816178B4A639FCABFF4EC3BCC994CE1FD48E705
F80B009ACC13C7DF2EDF2C3F52D34947E0964D0E8E89F6043C0D2C9A4ADF9422
879682A8D0D249CDBAB31345F45FCE242025991536E174784D21CA938B31D812
7B9B6462C898A3A3E77B061E721B992A9FC9C9E460A62C80FC2A395F302DF323
95A029F7CFAEC61194397D4F36743FDA257F5BC8DC009E94281EE90448387DC6
5F1B6E5D964834D39F64F6D869729A22714A5F0E7DB43CE31215A0DEACBB95D7
D86174295CB49AC66E224B32478EEF14B427BAEE583F82C3B8E6D1DCB67230EF
F3F206ECA7D35A79B6D617CD92A1702B10B0E40E16407433FC9A216DC7AFCE1C
5C7B2113AB956A672678F2EAAA8CFFB30F5DCC23DF406FA615795375478B6886
5970DAC97B0963E96D04B6E9D31C378DD7902FC0E967F6DECA7277FCA73E8417
37D9AE82F1DEA902493E1600B69EAF1217B9DF2607B0397165BB432ADDE87C26
088D33E097B393724A08324ED1CE78B2B9D1A629D536AC5FEC2823BCD487BFE8
E77B170959309CD98BCC98001B381FF0A1224CBD05F6F7703414FACC244DFED7
A30C3CEE434832D290AAAFB6CA80087E8425118B26305B0A8476187101E35055
6D777258A7BC21444D54CE9CEB8E517F95A53659AA649A966ACF3A2EA33B3EF8
E7838601709849377A17A996F6CAE997608D0CF5E2082FC4949E9D7C1D19CF97
6D0581EAAAEB4173E16F40779264257FFA0AFA05C2842C534A411593D10A734C
397EBC88C3F36121DE0957AD1610C7FFED2F5728DAA13D069214BEBFEED880C0
B57EC099D813172E3F55331D5970DBDDB43739D05EECE15112FADEAFA8DF7BB6
1DFB934FB2784C9E13F0795427324E80C175BC99140171AF2548C6C6CA77370B
A3C979D11C72BE4807BA88A859124727ADF4CB0646C18AF378060B81122B0D79
5956893BEE7A2F623C81E17B3CCEE92C80310F76CB845EB46D2A58782334244B
767EB7651FF0B70681E8AFCB58655A8B8148B6413766DDE50E614E2022AFC909
284A4D43B0C78AF52ECAEA85FFD7C022053AB5E774464120A2090684AED87911
8BE4F2D2F5B4D6D5A90B188505175088F0FFB3A0113472B8A6F11886174A37BB
8BC122F8F3D7E69DA60496CD8D787202F8B55AF2922B6C713C2AE046ABC34273
DB8EA36A61BB73ADE94DFF249763950EC9D475760C6492CB0ACF13DA5AB57954
B914ECA637ED4A18EAE559FA4F5EA4FF63763A313D33638C065EF056061AFE5F
86FC2C330B4F75B2FB0D5A087CE736B14E6BB73F491F2E41A0B8BB6958FCAAE5
2C970D9CBE799A76206DA5CFC56BA8988B30444C01F6B9196CE303564392765B
EB8986751B41F348377A602A2D5CEE4A409E83188D1E6E9E1995259923B996D5
28A128B0598F6598EBCCC8663962D5CE25C8082DBE1386640593BA465B81FABE
9FC9A1374A20F1FE41200FB3C4A04F78A0399AD1358F5C8A814CB377C8FA4482
B83311F52DF100F64925BADF978576254930567A877E6C7E7B34824A7D11DCD5
168A7A13539C7C8DDB7BB4960CA62ADBB4BD729A2F49DCCDD5C058073F7AFFAC
C517935C69D4A92801AF9E1B1675357FAD583F6C69AAC1891C2E8F150CF2A6A2
0E81D81903331AF2EA0A248016BB2613A115ECFB15B40092DC0D71B8C221F564
E3B93CE7A6FA2CD1C5811F86578F44E5BEB7F997758232B7EFE5779F963436F1
B526B5A4CF3AD27EA5CAC1BE4E5AD2BA12B7DEEB358015D82061EE67F3FA4770
B91AE7D909E2CABDF61077B30ED892FE8D7940DE0F7D05AEC38EE03F4346171B
8AF167A7725902F93ACDDBFFE2385270883A4BC2F15A585958034D9F9D42E0DD
B54971C0AE4C07FE276E90C0E44F8236F55938C3CE5A9EEAA8379EE7D87A8562
08C78EF0F3BC496247F83C055002B4160B2C8A32823344E80F8777A6B186C8FD
3838F5B823E14F44F36F387EE012A4ED81A8493B153CEC0FAFAAED622EF1906A
5BD384A39B2F6BC16D2D9F44B625E04A753B82978F6E1F1386DC53F8FA85EF54
E973862BFDABFAB60376DE3B447145515C3A3831E5B5172880FD66C321DAC422
2BAE32F080136F3A2C060587C6798E098A1D4AEEFA5457E6BAFDED79EEDD6FD3
B6613D855D5E17D6020D27DC30DA784DF0E31D8D407BF78624E191DBC2C225A3
D3AF1E99165F2ABE4754AE3929983BA6E0A977889F923426DCAACAA1BA58A039
9B8E5845A4C3F0939E28CC5154BE59A62A91055D1F1BDC06C89A7EF1AB04C8E0
875032E159EA042EF446F7D525A2E897FE7FFCBF8C9968EAF96E73473AFAA917
906A30A7667D7C591B61DA5CD1229D99F82D5EFE0C19E72FC8AE9D835BE39DF7
65ADAAA523C72A679E9CA34B24F711FF571E75403D111C5EFE83AB5351D5C8F5
024BC23065C4640FC87709086E4A434207F479B979EE1AAB44ED4B4F457EFD4B
9B0BBED34041206F8F2F027E8452CD70A67A06DC1EB3F2B3C58FBD1B8C370983
3C68B45A2972D906C53B7C1E0B5F7006777AD11B356768887CDDAE52D1D9781C
C6A9EA0E89FFF22F9EEC3DEF3F408B120CCE1C66F5489890731D895BC4215406
A872563EE2C7AEFE726FD3303189FBB23B25B8BD6276ADADE78D20932280BC55
2ECD04E2C33B76A0F6172098AA751FB20648FAD40756621200E43834B0CCA285
32BB1E7EB36E9E8518074632F6BB0639E2AA1DBBF34708FDB8092BAE388D0521
522008CC7E3AB92D3244762ED374AA78CBDC9AEDFF832696F5CA0D4BD71FC54A
1D783BF1258C56D2858159DDF19EC5D9BD286173EF785037A4B619487B6B138E
C1501C46CB5B5152192E8D337A77D60A3BC09C3045CFC13D346DED4E5C41BA28
ED0B2D4F7D552B0D645485EF78B1D0F72CE3FE6E475E5D061105933646FCD0EE
7F75AF8CEAE50D32464FA36AEE0F3896A254B122AA8680FE26A1E6314ACB088F
4DDF2EF2810260236760DDC7E4491930A1D4B662BC21C5C6FC7B5E1BFF8F5A23
9C30143A1574FC22CEDBDF325F5F3D4E773B8D621B25C96A1998A08ADEB2B51F
D97C947F3CAF4A17CA0F8BE1376788FADC94A77124E291CB27BF10E4EFC417FD
B11EDFB10E7066DE7A307BF33C3021A3C3D207F5AE931B8529C6995F888953CD
4B6449B07D5BFB94EB5B568EAE380CD872C8387BC8E9C7F62398D9888FC47F9F
A03C6C49439FDB7197A9152E517EF0F65FC96F998CBF98917D84554B20DF80DB
1BF5E73B33A29B7B447820B08DFDE19EBEF2B4B911C17FB2929D3E12A8967364
952081AC22A36F9C3B60E1F257C77A72CD8C5D0C8A1AE705A62A18A32FBAA298
B9084BBC0CB1E5DE954EE5ED85BF929E901B37FDD22DCC6CAD9D6A335B2BCFA6
D000A7C579EA6EFAE3F0C185CD6EDA68951673D6384E6CD12944F86D17885C8C
164FD2016CC43256A16EA86B4045C16068D8B27C56488D3809A6BD6549A52A6A
E38C80AFB8C867AF2D68C6E31ECF0F89A85BC37B8C10FF3F7C0A84FB8D0F4A7B
240C3573D61FA865EBB3E287937147C9BE9926DAAAE4C272FAF2B50A51B1A4E6
4F58210DECF59C716CCB290AB2D613BBB42CE83E4546F0351CDD77032774ED6D
B52FD47D792EE1B00CE037E54B6EBE4A725144D8941A967740086ADAED535A8E
130B46D3C97F4DE0BF14EF07EEC3819809E15CB4DF774A63C6E75A7426A7632B
8B4797AC69C760B6DD4513C1F1A45F3CD7BA00458FA7A17EB94FC9260501E201
53395D1F42AC25F006DF4A90311E65E6B937759266FC5EBF0B1C1C89EF020B7A
66D628BDEC02AA2DE4E54041F97A726D2708EDE5A1513CEE9710990BE7988D29
EB8FCDA4F0323901508EC6D0D3A034E32073FC4DA35CC169AFD69C818410A1E9
5B3BA4EE2ED540CD250B0D25C567A69429EA3D1E7FCCF0E3330146F527C15CF2
8E0BD7E996BACCB15686CDC206BAEEF6E6430D27ACF532103480163422D6F9CC
A70EAEC1D37A6200BB11FABC7B58334F98D78901B2EE7D582D640F8E39492565
9322F9AE5702DCF489B585F5190F9ABABC6BA8BF0A904C5F51C8EFC7CEA6075F
E46A0725A98DAF86117A339D3FD79C9AFBAD362573965B49F0F6D5BB19657EB6
8AB701B4A04DA6593C846B1FB75433B24AF1F6CE1270429B2D2ABC4240CDC4A3
0790A98F2ED8F648FE2285E3198A5B083FC721D2AB878551E230E37FE21382B8
9450EF7B01F403DDF0F46C7CA67023CE052E3296ADB222FE21529CA483264251
DE61694597FD026472CBF13D266D599FA50F54EB62ADD591C2D666E5767F69D9
40B0DB71B88508DCAB682381245DC37D8E95406B91B7CB06AF224E917F99F9F9
29C0FF50BA7D6D0E964143A0906762197B8B0A5D903700E456F6ECE4D25E13A1
FE5E1284DF66C11ACE97D2802E32C10DCBCCA358C9A301777283C08EE118778D
F47AA03593193376AB667F09513B075F85976F9F491AB2E26F003B87D9FBDCA3
8A8D117CA119BCF0331B41D7774358540133AACEEE3A8DFFB3FC12DA2D13F4B9
AB1DC38D36DBC927B1ADC31A3AC9695E984ECEA0E37C402B2A225C03F5286017
88EEBDAD19B56392AA3BFD245EA0E7C86504CA41D3562F89437CA7CE8267C80C
7AC5C6043F70CA48DAB3AEB92F8E68EDDE18506E73B4E391F4671EE1F45A328D
4D4CEA17E02BAE7A41A8435066149FA5743E8296350CA4382200124B7C22AD75
592BE8CA24C3A3A326B77B817ADBF1E5A669A87C3886435AD5198F533314EBDF
74EC146BDEFC01AF39249F47283B9821539583F6AD6320CBFD44AEDF807280DB
07957C96CE5745BC6D313032C031B298E84EA6F33C2AD3AC042AE926540F6ADE
17A52A09061F578841058F3FAE9DDA4237FDD12815ED76FFD70142E86EC22651
34BAFF2BF705AEB625E40E8CDAD78E42F9D49AE24D11B9B064801D47F418AC92
FF253B71544CA367127BF697A26E8C3183CB829C13F5C5282908CA315F95A1A8
2145D774FB3508D01F3A40A04DC07A7026EBE9E2D290B1EEDFE0322838AAD2F1
7A0D52325904149416BC5E7F6CC39A8288A88398390811A7C6121734E6AD6B29
C94491A94CFA9B4380D32A79C7FDEAC9E499BF4794FA3293666AF2774FCABCE0
14D199126303DF6A79C301E00600AB38A00EEA61310B34A43FC20421A0A59116
948B1C5D105C70F57C53A8F04B51E97326F94B7F4A00706240637B9CC0720467
E68E2CC488E83CE475C4CBC8EC0A76FC971E927451DBABCF75BB4110366FD9AB
35CEFAE60FC97C6B9EF843CD60CE8C69D5098B5EEAD8E0241A38E993C5466FA1
0496515D1B2C6C2D58766E5744E5F40A0F5DBA2A66F682D4AA923DC8ED57F1DE
2CBBB2F3B2D3F3B7005E9F83E783452A7DD0CE5879B5224D3BB7D31681D75354
427E16368E1BF92239EAB23B07EE7D9EBB4B4121CE793F3E7941CCEBD1DE658C
7A513E691E7BBA08FAA6A7164425E9A6A9F68CAE5C2CA3CD41B29EE521879E4F
E07A9BE5700C1367B3D816B20190201C3829DB22E0317D73DB9E2CEEA0F1FAB1
ED0E7D1883C61EF0334681CCACC5D024F39309DDAE7176231203840F037B4146
F2BAB25A95E1B0429A0F9DCBF6B818C5F2D8168C9EE225B6AEE9581D5E83747F
36CDC7E293F6C8EFA3CB01B31B63E3DE2D592079B66CFBFE29CF97D47608E12E
15E4A069800228BAE3E6D4040A1C2286346040BBF8AE8E79C861287E39335277
EF2294376B5508AB2A1C6CC7D2EAA3011876153D44ED68415B0FEDB4D7102CFA
11FECE107BBD8ADE967101D476F63193B7ED45A2ED6C77763127B0725900DD92
FEAB15171D2102D6BDB7835E97EB66928F45EA8146164441267E541E0F9B218D
3B32A636FB671E4EDD08ACB06E6C5B432D1383C366F3B78C18DA0320065A0DB9
3B732BD6317212E8B598352488345BCA78F87907F1E6E32DE2FECF6C0E4784E1
93F73C7A6506BC917B840F304A2C9A9D22859D1594DAF734EB854BE550341FD8
148EBCF4482E9D9773843552E256891ABBAB7980B1B1B4711FB26D09C83B0875
DD66CA420943F7F3276BCE104716347CBBB915B41853B452217E6B32B7016537
42F669F54657753742042E9B8AE238F0EC679E1C63E8243807390B2D12C84419
356B166B9151B44EDDC1EF185F6D79C4D91D269C6E4A2F617AB25461241002CC
42F60DAA610BB3944222C01F0BA9D8BEC64D85B6442F844F2FD7D0B9789D902A
8634AC0FD0C2F7987DF550AAB54D47E20A906B02B3B7A72894879A9EA6F9648E
DD54A1BE9C8AA189A7E4BD7932F7B743F98B52043093DBCC03FC0A022D504EF4
95A6B5D5A019C08E08279AD9208BDCF859CA4F3A080EA998A8B3D64594CBB6B4
1CAC835A14B1FA3C5919589CC2B5DC72244F4D6E8FE9E88278D6B1082E18664E
2333A6BB929B7D26D0B9101D5CF9C3E937B85CF8E1D4F8804C7EE832FEE278F0
3139EA35AB802943B5628BC95CEC4FBB62C5383C28D3DB8453CCFADA24266BE7
3CA1B36B4B2F2784D24EDCEF61A0C239F01DCC55940A347AF0D0EDBF29C1E6D9
39299B6376843D91DA00229226A37259CFB0AD3BC261DBEDD4C245CF768BAB03
DC70130158933F88571D558A4A15A84E1779CADECE0C75A70B6E70154AB80C5A
40BBB9B3FF3F8981A8ED13D504E6BA0733BAF9BA931D25551CBFBC735D9E7226
D2B353CC752EFEC2E91DF8E2DC6418F6FF20C2C04DFC9F36C8253C4346DBC11A
9D851DA50836F73FDB3AE7876D6AA879FC83AD23F0BE39AE8EA536096B6DF076
09B047450F38572C60BB4C4565531425CF39190D6AB9269E1FFD3D6432231D47
B3729F7F9F81AB438FD60D1E9B8A9DFD05C44C457C2669807F31630FFB77396A
9E0C75F5F4AF235A76B190B7C820DD8F5FDB95A4A87352E69E4370442D6CA86D
083E18D9F88CF845DEB23598392F103306F731AE6E2AEEA36696E017DE1E3A5E
CF6211D6F89B3F9D78E0A2FD3FA71C28EDFC157DF29233EE84CEC0ED22BEB736
BDEB0F3BC878FC55C33BE11D1E8AF54803847BC15E9B1C1C9CC76581A50B6A65
46A0ABAD8BDF3E922245BAA2CF9289D68DEF6706FF9C1ECB124A2929C3989106
57C35047F319DF546D864BA3D3EF66F5383FC4539D3C5601350E11027DBFE465
9DEFCF98D533F1948A36F07F2E642E6FEE5FD39DCBF8FF3A678E39E2045D5794
5A929B28A9AA2C21E05D767DB0D97F225E1239FA44736247CBAAD5B856D7BD6E
5E186ACFF654615F5C4576F6EF44CBFBC583BEABA6A577651BFB7318DFECE6C9
A7CEA474FA9151DA64C5A488EFD0D6F2059341F9FE05CF14F606B403F1E87CC6
7D20E51721CF6FBA62DEF89CE32FC2649522985C27941C58E4F50B973080237D
67F4E6D9031F874AC47BEB4E84870290E8B305027861DD577C9C65D7561AC753
6C61F215557C0D835CCC77FAC71FD55A5490C89142F2844CB7E6352B01A071AA
524CD65D4404D0323445D7B0D148E1843D354DED04EF320786C536C7CBB69186
0B26161029D105F1282254097CF7864A73195645D5071137F882C019B8B8539B
EF3A84C97FA6FD2DE5B292D97D0335BFC690BCDC1C208E1FA5ED3DC91E5E50CE
59BF04C72EB674E5C394D0D8D8EDCE3C6C420F53DD1BA44D239C4AE71B9046CA
D648186D2000AE4AA5B339C187F52630B52309834F266D7020344F9C65C30DE7
93F4A68EF039BE787A32CE4179F065BC5C2BD2B2188B0E51975F6E3E04F4B21A
FAB6EDAE86BF82DB56A88D5400C8D857738570EB8036B255BF4A5A2B41A0B8BB
6958FCAAE52C970D9CBE799A76206DA7A121E8A707179011BD1716C6763544EF
3D5D6E29CA1533A7EAD802B02FD1CB0AEF453014EC03F79919F839F9EAAE2F46
B49774F8273B5E98BD87426D2BDDD57353564D3554FACD12B5C689DBE39D73BA
8C9C093FF36C008E46AC03B02978574DDEAEB650F4AAB904D4645BF52AA00CBC
AF9F9428E3695E72C64B3C2EF23BE1C2A88F617F17C38DB12F3951CA19DCE0F3
992DCE431A289C140344E5091A8638431CE2A93113031EB40F0EACF90949369C
DA8135588B794EF9FE03CDD26508432F9ACEEC0C86CE843CE4121441ED02D5DA
83B1A7FEC5FA6E23A2EB8934E2010BD574848C85BCB7F3D74FE0BAABA30A31E9
D2391B9DE528720E5C8231DD6D7ED8FA5D2C953BD8BDC13DBAF63D7483F24ABC
0D95B1C6A9DB9E8F2A487794284C746BCFCC8E1D5988003939B48CA8DF173730
01D829ED69D18B90A55077C7300F05F1B24073ED052F37A3183A21577601F30C
7FF2B337B41232EC7CC4F97EA379535288DBC12771C6D0E14A141A52D9465223
B3ED9E26A5DF6979374D96BDAF0BD36479D9E9468E90DBC423710365268897FC
ABFBDC68C6EB5DA286DA3420805F6205E009477B28644C3FBC75583A7943ED88
2DC2C6ABDAF38CAD45D6727BFCAAD955DAEF48CAE860C4E1AC06A1EF46702522
3FA7BD5DCFEC68DCAC374CC58F53516ECD13D636D6EEAB815137395B44EFCEFA
299D8ED3336348ECC3B28E1C151BD82968B0B15A5FFB4EA63944C6C33736FAF5
8B9194F97602A69B85F86AEC6253DA395A55DED911796DADF226547BBBF35F04
915D9D269A840CCDDEA5AC5CC0BA9BE5948D3AE141749B470B52A16BEE3D3FD7
ABC0FC40547CB0F59386340C9F9ACF9B1510282836EE37AF7731B00E56976889
98D4B8689B5638004350A9746BCB81F187B76F89E628D75CB834F24C4ABF95BF
80FBAC65D9DECA63954C0858B48FAAC42A030D7CAEEB66D566CFFDC171BE6471
D9A26F35F91D61E598A65D89426DFA2F5D64AD89A20BF4AD5D1F100C46FDD79F
50310F2547A79A9C5D8A6FE5AD98E068521B11E8C5F92EE500D81CB6B2FD84EF
8EF077BBE3DF6AFFCEC2E902D0EEF3A1E7428E98C977DB63923B3E9E3686BE4D
0A0FFFC4007EB13EFF2464FF4A4CFFE6523711EBC228DF8E8A2B6BA0A9695AFA
1199475736F64D826CB143751A16BABE343635FBD719ADD9022532938E68FC8E
A33DADC242482FBEAD4031D9AB6265FB6BB647FD9FD95E0A202A5C36F4A5E94C
0430A0400E3EDDCCE5BE60B3AEF9BEC9E5548B37019825227FD74D17B8E54FAF
294389E3822E82E48446027A7574E504F98DB9D52D84304ED2773B77BE17B2B9
FA9DBD3AF93F3941CC55363250F71F3C51F1D0C0CC72F52D8F279E4959BCB2AF
9EFBBFCE77154B273112ED78B7415374AD07575B2A05E4D3E10656D67E6394DC
8452D0F3C5AF89D64754D9F00DB8B4F16252C724EA3D79B7E604C912EA7DAC8E
354F1CEA9C76D10F5215A6454EF08A25B6B242E36DAAF1DE150D2674F35244D4
1039CD650B2CEBB80EB68DBC5D82F253F83F6295803581C9484A18CBF2788133
19FAAF6C66177F200389C5AC05D396FB0630AE944938B0FF61097B8C98ADDF18
6280563AFA59C4B1D26C6EAE8E4E226211219C690F3E76BC132FCEC9B7C23EE0
2FD19C327134B56197C411E3E475E4D16CAD30ED18B6F832E45704E5A2A51FC3
99E819704EBA832436D1EC34DAE7D9BF5033533583821D40C6DD702B70B2B343
DA5EBB67D9941E9310F38C1F6ECCD99446678D1699826FE8A7CA7FE321AA9799
4FA366628A09ABB65431BC00CFE36F7D766262DA08729C46C85121032F58A731
1E9C2FF30C70EAA56294D98BE6A5293EBBE6BE2A76A177E4C9629776782C4D11
EFF6063FD1B74CF058C592E7F48CB331B971E3B6080AEDB45B1AD955417765B0
665764B326446A071B6F2F362D222A5CEB4FEC748CBEBB427E01E60CCE30B0F2
B691E3A8C1DD510CAB64E93CB1AFA9A96D3518E5AD9ED32CDFF084D1C0E48788
706DADD0814370DD82648DCC7C5D049D0E9A984A2C780161694C99C244A6C28A
B016CF6063D0B8D2C5B93C08FD4663FFAADF916E228A077CB3F8ABE7FCF57A38
E0608C100FF516E0C93259F7DE3BF4B2B5FFC4C87D544EA3B9B993111FEF3873
3C3527515538016F8BA6AD48DC594A0D1BDE3D32EC7DD98AC6F7061D9C3DF3C8
DE35F566E33510E5180B59AD5C1B12A1E790F7809EB1DD88710D27569A5283A5
57A996D0EA15A6C8815A66967B759682F0B59313804D6960AA6F0C136BBED6E0
20CA50ECC3E2806104DFDA236D8D4E7B48130E59DA01E46A79ADAE20A8E16965
289FE28186AFEEC45CF8F5AB034EDF79DEA0B37767CD4A16107CD330609D20AC
2CD1754FC84C0A8E44EB67966E9B6F104FDDFF62E82B16CBE3D401AAFF4EBBFD
E4BA8F6F2AC2615C55249640B3121AC66E9886C199DEADFADFC8BCE85D2A7E4C
F939DDC479252D945045F47A55F5A474C9B7F27903B59C8328CDFA38D00DD688
769850E1A9B91CCB3EB15C6BC666101BAD394692F3CC505613CDE40BDA790115
7A5FE0D7C76E8BA15289E8CDC40D9D7B2192E831AB2793012576B6C7D43D95AD
D2153032A0F08DC7B007337B680C9E0CF3E5440B37DFEB52B494F73B5E091A7C
7480ABD73CBB882068CCE35AC1E7C6BC21D9C251BDF71BAD45A7796DC14E05E2
1ABCA4461116A90F3B8A854B7EF90FA0DFA208E4C47AEE282249ABDF6D983D1E
4A85C06190EF3A270698F6B9230D2CEF11807CD210AFD2C02131258DABAA1CD0
8127A538F1AEE56BD275BF88D7E1F8FF373ED07D33E42FF9C37B2BBD3C5A4540
A35CF347DAD4613F91AEE64B11F62A03FF99B791F10EE359EA6416D91C6242C4
360EBB285D67AB3A81119D2B31A94BF39948D4B3688E588AEAE48E2D6BD5882B
FD699DCB7D2970392C6F89F147044E661C8F986B8C7109EE7FEC5717253DBAD1
2A62242B2C89B101EC1B668FE6FAE9DD4BDC294CE721205167C587E11403A21D
BF3B7F8CB2AC285FB6C61BA621A9CE7262FAB9D050888C29DEB04482D5C898B5
63C04F0F6459B0DE51EE0B346EBBB899F1F5DD71FFA94B4E72EE284C44A9C294
B2B18D9A2E50D90E736CA7155A9563A3B3009F37E856E1E39ADD6AB74B4A183D
2B0360A20360880286CF5A98C68FB3334814C8AEB3DF8A03EFF3CE10683BEA98
EB2B7C1F4E93E0147DBA1D936A8E18E1838F4BD242BC436914F8C55BBCB42754
74395684BD9484F2D6B94F12E4EA3A9BDB285BED832620C7825BC78C601A18AF
F7605F9C0F5FBFF0300C0F87BDDB4FAA83436E8FDA7FF9F0ED52EA5C3C8CAC52
787FE81080C18D2882EEF4B698BB172BACC6A13B3F4BC9F8763E5516AAE69C60
7F4A63052F7FFED6B1E1E7D569D54A0BE7CDDC9F29A635C430AD4F5D4B8EFEB9
09844D6CC0BE47A832B8508D862F987725C6B20913705C8B63AFD94CC26A1BB6
9E1872CDB27D6B56D0EAAC7C7C7F3AB7AA70C37462134CBA469EFF52B99E6C1F
4B010F70EA7B61DABB252EF91EE58963B8AC0BDA1089A33322DDAF7FD77CB534
E74F590AC18F55EAF42B6D05A7D0B4A65215C9F425C048AEC1C929FDAB375F3B
47EC34E4DB269F0EF8128B32C7F3555B2CCD2A3970A8BCAA0AF4B0DE0BE4665D
8C4432AFFCBFB794CDD91541D1188A856920DFF650EAE91D6A9660FA68C2E425
FA248D4D789C63BE65EEA988393542E931E39FDEC59B18F5A6A01CFCEE7D8062
D3505AB61F20BF46C76888F43C6B35BE7BA0685A08F9008DEC1B17399962E0B0
1C58F4A284B53AD78A8A6FB59D58C1E794FCBBD27B060EDDFF32CE5C9001F9E7
A0149021BE5A65DB754E14D890F42E9C3C2A6E03DA735F5DEF39A01E9C18183C
34B5BC8203D7BDED06C1CB188FA1FDDDACA9B869567B7E0DACCE418E5C1B3331
DFA06E332B681A450A2957916CC7BB09376F4C297FF9C638105CA4DA0F8986EB
1AED17F3C26A54DC1DDD04E44AD3FD17A2C6A56854206D95098E2356FF03259C
56C31EF2B8E056CDAE4935075FCB35CCF79466D90BF634E2E96A083378107344
FDEC2A1324ED7813B5EA6E00840C6D8B1E72BB83B1FA8BCF37ADD8ED5D768798
8C3497C382B1FBBDD8DCC67CF1CABC23E8D3B4E237DF80B1BA961C260C49AE68
2759A64C9182C0C62D486705E1721FF9208B83993A7A94F4CE76A3393A4A0E10
6EA6A8C515DA46E6F5B46AAF58BD34E3F96162C38027B9760CAEA6518E1086D9
6197148AC15B123DE7B8DA034C57C9B48BBC21FCA932F2389255B0491050DADB
610AD600F9E8DCF29FBAB913FC133D751551E44AD94462D6403E3B41787E1449
587E28093E66A9837BB892531DF64E73CF532923E209E8F48A84A163CFEC2CE7
7AA0E2139716A8B8BCE22870B2A8AE0361A40FACAAD24D4088E27861E466EF78
AB158F3D371257512495CD7ECBD87020402FF8E0B391AF827DAB714D59E44C0E
285478C8A90042399F46A27F8E97095273476B11F3538E875ADE0817AEEC11C8
E1544DA74B369425D80E2A4707E6D3198765EBCD0BD1C62E95F659D68F0D69B8
5BA188CD2C7F0625170F3F9DECEC62F2E7186C23BFD0F22C779440F7324F1EDA
91976CABB8D2D9ACC9B93C575C363FAB92A47159C81527B9512C40DDC92C489A
E31BC9A983B6BCB43B79B89DE7E561195C6853D22BF99D85992FEAD42D67289F
0C2133C543BCB734F552B860C295991CB995C6EE13A4D07728245BAE9EAAEDC6
00B0EF658DD1A4DDB40AAC77FA44C3B89C7255A4F118846B7570803990A8B2DF
7A41D2F69B4CB22412ED01BDAC0BE83554A4BEA20786905F6824592D05C21DB7
30478CED9292843AEEA4F68D7727EC1FCE4CCE8C1370012B655C013DDA26E8CF
769EE60EA498309BD9EF487733FAD3B703CCF8812EE467DA84C2BE19FDF1BF03
737057D22C125EECC5B6161C651D57E6DF36D3705E771E93F9232FEB35A8AC6C
C6C89637D3D8F28B38AE222BA56673DEAC2DFDA9F9A9635FF17E7884B8BD7016
B83FC3997DFEA159A40DE56AB52A4948F01D2B6FFBD4E372B3B85E00C10EB6B5
399326CE0C73F9987CDE0CDC2FDD22CD6B398AA1961747130174637615DF4D1F
F6EE52C5F11631B618E21BED49379B96D21AB9A9EEF06246AD16C49F7F42E402
C7ED645BF2925529D32CC1A9236C755FAD2A399D82AE6CB6848B1E4087A7A3C2
C3DE8DAE8B11DE198A94BBBB38E4E442353E78EB75D5BFE77D17A651DFD7BFC5
FC1ED41BCEAA7BC90CD779F458E7BE99F8D8D67CE49B563FDCAE33888C05218D
CD8124F8E93E24F05AB2FA84A4AC4589CF86E287DE2443F8EF01D255DC5C45C2
8FD9F66E5ADD324D471A4D7A6449D75188F3F600D5FE70576EA427EFC2E05406
4B3E173C14293A79645C7F3E359DE5E3A441F28C3397DF6052EF6435BCC52F1F
278910A7453E1C91C383B0C2426B358A2CD7AD380EFAC172D225FB2073AE4A9A
69B75DCB34FEC581E5FD8846A45307AC3C6AC39A26B2FB06B460C7D466780615
F3B8F03D5199A7107784226EC37BD89C5CF33F50F0BAF05732C17FFB56DB5B6A
3225DD02815C5B5497FD0900D4AA012C2CD5E4CADB246A0665EC4D51F066B1F2
98D3C704753B3C6D974AA5F8BD4F3978555B71A403A9D158BD1DA47E8FCC0901
7BBFAD9662331286D7A7FD7541166F9414B6B9DFED001B67EE08AA6043403EF0
142253D1BDBCCCC899EBA81175526D2DD96D712E62BFCEC187156BCB0B93C351
BCDB705B0820E139D55D686C7E96E70D5680825F9C769CD611F343C793DEDEFB
0A2B19553C10D22BE793916EB99386C52368B2B661E85FAFD0906ADCE2D64BED
64FFDDC683B50F16A3AACED2042AFB7CBCC6E8FB81180032E66BB8024EDB83A7
E8799479C0B57A21A5AA4BDFCD19886D6B2B421F7C057DB10F0445DCD03A8473
6CDCCBE2C4599CFE10A6A87789BA984F105C5F0B39C1FF8694298FF8A5AFE94A
066340F20A782776BD4EB7F64D6A0AEB2C3DDAB25909FEF00778D7003A85E41A
AB773DEA4B7B16AA04828FE0AF7B24D330C4609305EB99D66B763DE8C7AFEB43
00E08AD45260C6B0D9E8311BD62B6194746E9BCD5BCD567EE89C3AC890A7807A
EEF5E483707A570EFE7674E67BAC6DB40250576839B87708D30261A45ED8C77C
60D7FD136F67417FDD31302D990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
224A7C08A12DDDA2501C6655411A4DF2DF658F42D355F3C49AE6BBE6D10EF493
49387EA298200DE19882B5A301D5537B8DAF584E040F89694E7E797797528296
2120BD3612F1F8FAC9AAB39662E6D137560A8363F8D0B481C7158374F19CAB46
BEE6168EAED2B0EC9606F6300D6B16F2A0F3B4D813FC292A572B4E353E1733AB
CA492B04D316BA6D30AE540AD4662F8457859B8DBA51655025FA17F635ADD914
0716CBF1C5624422FB5D2B891586DBA34F8846EF3A42571D128FD0EAFFB955EB
75BD8C8B15B69580563953C9E6175726468D9F4E79D6FACBC3E324A8EEE27B3C
9BA08A087D28C9FFD6BC993137C87A7B37139BBA18C441E4160DDE659F85ACB1
F058AB549FBEAEF52B550F33248ACFD8C6C575339D65D36A050755346351BC35
E1C3763C1CC5F8EE61FF07245DE131EA6611B00C48E29BB59909E9423004FE6A
5544AB42BA09EC388381BFA3981BBFF678ABDBF14DAFA6148A099D9887875A15
206F1D421002C15F4B17EF8024D66C3F3044A96FEC0981B36CDC119C94B849F8
2D6854A3B03F739D17445BCBB0C6A78484738AC04F961E031197898406776F93
F69C855F726C19246C2049BF5338E9AC90FEC178B948104127A22B60F093223A
64804E46E6C653F1DD765A0A8592C49F5A97EF2EC09D42FD75CE5CC9DA962EC6
AE415CE7AF5AC0FFC6BFD118722A55A1584C9A1D19633FA842B9DF64946EF1D1
E5BAF7B08E642CC94D8835F1D868D003A49EED898B2D1F54D3C22296B898E883
22164D58548C7A3EC82A56957617AB1A451E8BB7F2498C641B8181BC1E8FF0C3
D790FC1E8DFDD25223604AF01B5F46C739DDC81B47978F0BDBD03D55C232D7FC
1564A39987B28E2EEB041DE92DD0AB7317D9FFFE53F7656E408CDD8A3C8215D5
94C6B911EBCF869B5B52A902B67DD4B87DB69A0EC158650745F3F23F7E77D038
B3D9F60F63119EC9FA765E6E318CA3DBEB2772F647F2D15D0E8C5B0F468202AA
4098D9842E436A070D4D37D700763162739CFF1D7DC9971ACB19EA3371BB0207
4F636B58F6B6D5650492B14476C98EDE61F1DFEC2DCA0CD082A5F66C3CEAC5D2
D7334976E5A1AB4E8928F5DD9E900D3D5BDEE4A3399614A94CEBDF033C8CEAE0
B961D0A4E5E26B7C0C539D8E148DDCF04D0CC48AD18547D0D96C4A92B5611B98
C2C16815C2F5602528D4E69B65E0181D69369E3D57B428623FD1E621555BBCA2
6C986ACA69714EE28758BC71F6A70B1DBD9977A5F4C7222ACD319A272BAAF294
3FEEC260F168D94D7C9F88A7CB7B4422306B9D87C0623150576466D992808836
05E7E336356C287583E0B338E10769A3F3D6A25AC823DF21A5EEBA2F54AD10E6
C52BCD44A4F9A2E41B30E5C948FAB0C8D1C7D8E4FCFB1E1F43E822EE2721E984
E4FFF861E8489077BBC893F210B495B3DE7C70854B3BFF083A22D936D63531C0
2C73697EB452E0EAC3A4727E4071C660682B4DD23C08C273C60CD13D202DA617
05B849E7CB351ECBF0A7E22BC5D710A006458A52B68E70DCD151A0CAD0517C93
9696D8404AFD33648AA2979A650C2F3603EDCA407CDD01AB94F2F676EAA8CAE5
B59FAE457F8C9B445E26D321E6A670AB814B49D0EC4DDE1F87A09E5B532BF9F9
1C7EBE72EAA2A9EA3245230A08110FE297AD4F48955FE377C69B0037461BD360
D2D3A2CF436CCA8F5DE4CBA318052DEFF17F648F76D3347EFE165DAFD471B677
009B860E4D935429CC99B6A1051D63F6CEEBFCAAB9F2E527373DAF483D0CECDA
8EF1A082C93DD1C4EFA85111B083E17AA5F20F50789D3B48E824D87506B97CE8
94621158C22F176B30163607970B04647E765BF9497E324D3D0624F94540BB17
EE50DE7F287C29FD4732EE0FE15878D53394C0C7D5771B0E9E6859B0E65795CB
CEE4FC15EFF6D20269A6F4463B12C214D99E68F115A44C5B3387CC896ADF7ABA
61FC71A4841BC9EA8A8E7A2C4405328F470074E8775AE6FACFC8F1DEEDD149E7
EFF7D215F7618FF21EE6384ECAF44BD7703E2745BD993322D1B28BEE5E71772C
8921D69D11ACDDE095D43077D284839F0B71A41ED28DC1039C6B0B0135266566
1FBD6E7BD8C2EAAE014C26BF75ADEA293858333FAD8A5DF5D36B7F79F910B174
AF933326ABB47935AC900487A2273F6DC764D93B3C247EBC526C2F6C8B93EF2E
8025EFB028AA399C205C00D78E6E21B6D3722008F40245D72882BB2B22877C80
FFE810F076D00710C302B4E5E8AD40D6C3DE9156D7837D8F9A6060FBCBB8298E
CBDB5E6259038F3070D9DA98CD07113C4269F06F393AB1B9A7929619046AC78B
3633EA38CBF518502AC8CD193BEC00B2566847E44E4D50946422EC475D4AD481
27FF71759655667CAB0D464D4C5D347FE5A52A03043DA4739AC1DCB7226525C0
493203037CF354FB455C41740DC01E529CB689B48CEFB85094854BA3BAFE46C8
339FB858F9DF9FFC2B423322A0AE12786688C1D5C8740F766D91918D4322F459
6B941EEE41F2B753588999185585F81C99C76F289B557663D53DE4C578F6993F
C10789AC6FA67D54DFCC1BB1EE4DD1AA03DFC8ACC8BFD0FCCA75F4FC8D5EC240
FDB69362996B1553EBD742F260009449B6284FE6B281B3C938D07FC7C5964290
76AF0E8834E0A9D16E2B846C7FC5A1A8A411A597335E6BCB62888AC8539B342A
F2CA712FADC6FD33E9B0E6F4977566D227C89956CB0EF529D2BDD5E78B2833CE
36458A6868587A364E5DE44E299DEDFC2C3D1C14EC30CBF83E5729F1C074D4F1
6215D9DA70174FD46DA36BEAC07DF24404E050CDB6C3D08B6C27A57DF0B4CC9D
118666C78DD383D722EC2C9124B15D0BDB6A833969FB57320155CB1B5B586E2C
8AB304FCB8A8DB9C099B73ACAAF2F2106069D58578B215A964A294972B8F4DFD
4FCDAA1BB09720C0DDDDF3EFAB051EAFA0A4BB7B3EC68B932CED8C170C93B650
8CF9AFA3BE9ACF1219563BADF2CCA50EBB691FE3A66334F85FAFB2E901E345E7
CBA12017897EACD1FB64C1F829392A430FA7471748A1B0981AFE60C32A16F01A
66276ED33A96B92C07259C56C31EF2B8E056CDAE4935075FCB35CCF796DD238A
AE385AD7B587A7E8E59EF92E6CC1D2BC815E1532D62B1428E6EA1FBF971CCAE4
0BB965CAFD6DF99B50EE8338989E1732A4B0219BA86AD21A4354DE7BB80C3576
5C403ABC37224FB58892AAB7E1735BFAEFD1FB329090DC59354FBA9F22B23A04
BA1F3E668B0082724961CDD8AB05CEAD3153918F8DFC0C7BA115D3388CD49E15
D50DF45AB5BE76376F40BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C23DCF
CFBC094FA2D39A046F77E82A8479D36538B1ABCDC72ECD3F734C6F09BC60B67F
1268D2C877ED5AFAC1C7C9949D68F0A361467D0F4BDD305BC5921D78D9466996
542D33E0B3BF67975601BEBFF252DA8C953BC75F23B7237C9FC0BA0384A141A1
CE2EFDA897594095146CA2AB058C20F4C3ECD7CC083D70252227836371FF8380
778AA3B00C9278BB0428971CC9818FC947D8975301E2AD707F387F1D4C2912B3
FE793C6BC40C82F3A7EBD9524D784E90371976C5FAE1625D62879E4B5A7F1037
8A9D5AA8C9FCC9DA54ACCFEDFF8348445629F196BF16836533F8469EF0B85800
ADD0A308C5B83AEB4164DB120EA6A248F98E4C6E81DE8EFBBDD3C355E73E38FF
48F0FC3E706E7B6F424CC20A98FBB384FA3452AAAE1AF13B49281FBC944146B3
B7D9CA452453C825B92E606247E509FE6A73D78F851D34B6EECC77D163847E63
D3C9AA412D1708E028E2E96E73CD01019E64A01054E5E94ABF52DD9EF8A58020
551168A47ED789C2AD9AB8C8FB7EA2F8C7D3290B5719FFC45010EEEBE12BACE3
6A13BEE331237AA2DEDC56C9DF95B90D45EA22620C2FA7D7521D7D4B3FC5CD71
172E2CA9514B84DC676A2EDEB6AF1FAFF4E98D27C7E09AF972C6029233FD26B2
6081901277A14D6C77058CF65B153DE73B5AFA62C6E671BFA6CFFBAC0CA1E1FF
90937BF19773B66A92B751F8427D4AC3CE5993E1767326EA14C8330087D781F8
9AAEE65768260F32987C3D9CF8EF77F25004E7BBF5D14982D974DF682AC54E1C
416AC3DC1E61D6FBF0894C659A61F005C6FCE1A0E97003611632426DF9562D02
1B182BA2924AA1DD4DAFE4CA472EDA6220B2AC0BC79B34B48930980213FA0E2C
36D1BC79C1BE56EE588AA8EA7222305158759D3D702A85311C733D9520CE60D2
18A8996ECDDC6138478B29F1588ECD6433E3F2B48CF2FFECC694D26D54D22CC0
42E184BCC24E4250A6379CE74AD419B077F1AE8D169BC18FDFB2EB5F80DF2A56
E4CEC34D583169C4918F791067417FDD3133BE58D0F58074C2F7CFD6306262CE
03FB181CF1ED3A086EEFFAC30CD882C2D90B88390AB7712AC342ED568846BAB5
7D73304B66C6BA835EBDDFC19E88CF11D2E7FBC0476ECA10420F989127A04BDE
01D71D3C32869196A7C487FDB1AFB1D8DCB2B603A43666989974543B3403BE42
1E787AD648B6017EE32386CCFD2D43283EDCAB61EB04E54351926CF3F0DC1CE2
0D4262847EB62ABE8AF75C2D936FD8EAC5711476373596FD03E57B1CA8E39FA9
95C3193738E38676AFCDE9AD568319DC6F85E6AF68ED6997E19687189DB76123
040AAC7E20D1151E8693DA446E9FCF79B505D8299B2AAA7A05FCEF74AADC754D
33163A48FCFE245870BEF74C9E4F13E53738592F3693928402EB1A8010EE7CCC
F06B3FE91D12AE88814DDFAA3503BFA63845C0B5F7B1FF17874AA7CC620939F3
BA8AA5ABC54270546A3537EC6DEDAF60D1723DF115C7FCDC57DBB596B796E309
EA2AF7D1E5EC95BA6DDBA393DBFA8C3C93D853BF06FEFC81EA3A88B4024C64A7
9740384D09CD8FCAB9760CCACAE3F78F40E9A45653BBAF2A5DCA560DB5BB5EED
14CFA31029F8E45D5A2095DD40AE0EA50D270567EBBF29E2E9BD012ACAEAD854
C136E1C0552DF07AE8D2CD8BEE69CFA9549BB81C81882876B173FE9669F35AAC
2B6FAFA20FE86DF13E7C83431A4CEE4425C40ED537AEC8B4E0D324279612DA5A
E02BAD64FECF383AB03CD1134A1FEB0F94AEB1E311381ACC86D0856C90A91D90
4C942B3CD904B7FFBB8A539A5A7870C9521A69E792093D1C0A8F08215E85023D
0B7359E0EBB5F06D010E6BF1D35CCC1DA6711C1164328D3D72B03A8D6902B2DC
12DAC3E8953BDCE3BFE23BEAF3F65E5AF8BDC03BD3086AC12A919B5A62B6DCFC
453DEFA99DF6B76D0987DC232178A07AB1B973734418A4A802B852FCD1E62A7C
503538F9EB6BEC12F414303479632E105CB504A8568F31A10AD01DE74135670E
7C5D5B06BEDA9990729C75B5BA3DFD65E2AAB6BC2F2E8840F8D2AEC81319FFEC
EFF0B5C6F445770AFC7C73ED2DFE552E96EAE73E7AD80E3341EF23D94DCBBD96
047A69D9A3FBAE9FFF93696892D3356959DB61E265F185986E868A53B43FC51E
84820FEA672BDB5BA9A55E1F1CBE57A799DC6042F339AB93A7432453B6534ABE
9449DD8BCA175C6B403D486712D6978C27F2801FB8B2BEF22066D6F8D2701298
CC9FDA7928F99CA135B6980A0235D0977F61D836C0BB1FA3D448B363C36F9830
029E469DAC88474448B26091BF6EAB240A5A85971093E11555AFE5F1199B3D73
FA940D5283A76BF2C44C86E2EFF0C76BA5AC5B5FCF3A211021A15A328C151D55
98D5C19C3771E3FFCEFE1D9D56A1660DAE90B755958197A3351067CBC0316237
5AEF5BBD6BC3B250625E4B5C2B2BF98349C68B7A3D9546AE17060A9DA3A3FC07
1E413DDEC853B3C4227DB52D3E7748E7BC0B19A3C64DB376D4861E87C48C3AA1
918277F6EE607C917954B87F2738E49E191ACBD544EFBFFCCAF634AE7A1D21B6
52818AABE247C5D072D5AB9AEAA6C3C33ADEBB543EA93D2D21D077C8403DB914
3A27305874D4AEC967043DBCF9275F027D92A0AFD05A43D6E82DCD40E8CD287A
BE7FF1C9476D3540344B018E64B0EE8062E5913D4EFD3C02AE2124E7FDBDDD69
D454160837044D708A71172F6F4C4E052AA09CD44EF1A9F6A43A74AD0D12926D
48FA5CCB66B9D3BF598A13257E2415596166E303FD2376DB5DFD458E4EBCB96C
E67468ED160438641E71D673717BDE92CD40430507B2814046F5F211E16EACD3
89622F0C6D38E4A77353823CC67E36721E6AF0AFD9EBAB73776E7E422420F2DA
B3612678BF24A2450F6E99DE896F7F3E412DA2C3E0FE565DDBD45AE467A78272
5D8B3E30CF07912780D2559750B2FC25423470B9D3B0C902A7D952D8E60E25D7
3C67B9F516DF05CB1C0D2451E712783BF12589CB5A9E8E7D682220859C957D0B
3EBA515857F48CBDE7B9DD855B94061E5C2BA282CD60C0CB64CF47D2A09904D4
229F797E7939FCB76FEFB4C4B82001A8B4E7DF01CAE49DE944C25FE6233F9892
46A3833D50F1C7E4A8E5E5D0846017DDF49336434469F390804B9039E21F1AFC
9380F26571E3B2C0971E311AE3ED3B060EA6EEA5B735D0D62E41842C07B1E54D
362B00E9728B7CF7F5E85673E4B8C4F424D594FC4411CB4B01156666C7005ED5
40FEB0DFD0661D9FD2F99D5C5AA47898560ED80F8F7DDFBC965018949FD9BF67
5C936D6F2508D429C62585777EB9E6E9DFCA889F03CBE66ABB29E62F63CD6986
5AF20185F2A4E41502D87F6268745E0CB819D77C3417EFE0A296938DBBD076DE
76A585CC2F1D51B9F56D75393A665BC35F1E515F6BA570464F63E2AAFF3FC810
9064F1B79385F1F09F222B545B1E00A91B3C7D426CA5597BEAFE42535A8C88F9
F1937BFB87FC8AF0A89B2E531E7DBCC773CDAA6FE10486B53E5C74A64CC27444
2557689B9103528A7183858CBEF8F5DB1F798603092C983335D6F25B0215755A
67136A9150E66BF94BF4D58EB65331B9E7EC901725E190598A31E0BA4C800DC0
E7BF899C23CCB7AEBB5D60F011E319A23D2D54576AA756D7EBFA9023144D99A7
1EDBB90FB84380ACDDA68AD7F87D1F7478509623114B059BDE45E06DBAAB8396
B475D9B1C34F0B14225AF2D9D93E25BBEA3F95D00B096DC0B93138E2040E429B
59000BA012AEB09790C43C27E56C217558CA7DF095AF5AA8B406DA88B061B5FD
137A0A6074DAE8B7CF619E85FD43E3BF06EB320BC9B919A212FD2CE0C9076225
CEEEED76D619B0F3264E153925BAEFE5948A2B5B970CC74AE8A08E28A3804934
FFA3EF4A16931AB4899E1A8F4CF9FF67EE19B4FCB61AA4463C5F063EC434765A
6E35825C99CB7AFE5A873340B50AEE34371EA318B735C050E3F02A9636E89EF7
95734A43944A72234E92554C874914892CF60002DE1A4B18DE71F20FCD1C44B2
6EF464630E2E55C20F500DCDE8D0D4050278151D20526F131B71830D84172E7C
D7C05B2585A53C7CB0DC30E617942F71F70C30735423F6F13DC7F5015DA90439
8DD79DF971790CFAD5F5B21FE2D0E497DF6E457E2D5B28757A0D9295A2108EEA
1D138B90B1C8957CF8003564827B455420B15B31C0EB8C910767C395ECB870DC
D89408C1BABB452DF2ECC9744C9C500556EF9EB6764B4F82E7EFC822E7774D2E
36B7DC679E91F344E2181C9631F308CBB2F25B4DB3DD55D05668578E76736FB8
59EA249C256B3011B666F4148991C353852B4CD283018EB513BF85F772ADCD61
96E6FDF82F6D92A3F11C7EA1FEE81E086FC4014750C3EFA20150F9AF0A5BCC8D
D9C7DD53434D5C015AE218BDA0F2689E835B35F39423F17044E243D9249C3B8C
716219F361B301D438C34FB06A30A734962984C7FE400CCC31A3FE7F38132B7E
187B4F875CDC2D0810206BBE5A3743661BB6DAF3174A09E363E92AB00D5A811E
8B019F436CB07699FB5EFA47F1A31E9EF8A23B8030EFF7FA96EB61F444122614
3C399862046476ADED15087DA8D19A2C3B7260FB620EF168CE01220662CB6FC9
D8585FE53E837723E7EC88DDB9A93EAFC8C3F6C7F21AC95E4E1EE0FCF636F66C
BA5EDB8E6795B99114BBCE1D482BAF8BFF2365B5F760FC9320FE11B2A16ADF49
E8066ADF911D83972DECD70AA8A7617B87DC5E29F67B1B4948E94C60F443A1AE
067DCC816D37A13055210C8B3E2DFAAD1456FA4CE7A5EA03B207EF83F892E2E0
6346538797F403FC28E7B9D79496C05FB0B0B73FC9948A7F7F1709B773D90518
7F0816BB0E2C389C573585238C1DB7CC651322C627E29C0593FE137A7FE2E74E
6740E3DD5790CDB0AE61C0EDB35298DA896ECFFB9944EBDEA9C4907DFD929753
4B0AED0115E98A8BEADAE4AE0A6544B792D7F9F082CA8A5D2CD369563FFF8250
3EFD930A9EBFBD4B13E9AE4A9F6A19650CD9B9E32DA117B3D47DBDC939EB4525
3B40220E4C154C91DFA906D991648FB0D499B192BC57ABF277720B6D08458C7F
3C126DE412CBABD620867648F15B66C640B114BEBBD9E517EBDF74EC146BDEFC
A1099CB751333AD65581B1202EB9E53ADDBA054CA76665FD06A598BE6421894F
6732F785AE8FC85DE4198DBDA697937022DD7C0598D45D21BB6FFBF5F869E7D7
EFD553D7EF92F2E2A572DF5C291F56826C639EBF8203D82BA5229E9F8D23BB2C
62BF94674146E74AC1DCDF325A4404E33C9D5B4D60459F1ED253CFFD2C28722A
7A4FE02C147D9786F579A082A8AFEBB8E005813F5A33AFB8F8D1F14A0DC07F02
527EB440E00AE8B9E770FA802BC877896AC51D99516B2F8353562162C635B56D
527F7585636D135C58C98D74239906528C72DA1C1B91B2DA70908A2A049F27AE
04608E543BEDB38D0718BE1C2C94D6B23A5823F092ED37FE42940097CB152B61
9542D7342893877E879DA345938C6F5C88D54008472552BB39EA64DAD7608C53
C45EC23AEAF0A6411097E561CC13B193D5F88BB31C79CFCC61AA8A28FE38A74B
00439D74661A65B9E77993CB5243A79E7F81B929C2956F944E4A07E7618853B3
66A82EFE254436F6935DF0A23B519BBD5AE72FB9CAC0DEC47725F419AB214D53
38EE10A05004CEB038E714063A1D8572B57D85D82A56CEF5D56FD29348DBB80B
7301D2878B1995D1F29C34339A95AFE14B5DF2B25AF98EF04FD9A4B0B5F31A4C
30DB5C85C6DE1941D5039D70F1535B89A4DAD61B7E6CBD667A980022CD8AA681
D444F1F93848F64407C727745BE910EF2471A514FC82D5D241E0D201DB55606A
181AA1E8D213115EBB1AB54DA77F7266B56DC65B02340BB8AF97A39D256FF87D
4FD057BF55D19EDA1E968D4AA2F4FF4033AFFC6A6F06A6AE8EC9BC92D4D5E043
7623280223F0AA0151CAD6ACD67F2A8ED3CE303268D8145D1A17B643
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
51E90E6B486A56AEE781DEE294415E7836ED20F9AFEF2592832E8F5BD0C1FF95
E5623F95933C1BAD394692F64A5B8133647AC37770F136BECE156F7FCD7A4D9F
18FE05E87D7469C4FF0FC927501E9028FCD5593D6546A9D962C3C1F75CA1B396
70A44E6D901AF532FEA512C3F0506676C569901E11D25D8A78F34E8EF7EB59F0
4585E2A6ACCDF4356F831A160FBD1B6EE530E332938BC6B31E4AD86C3C9EB719
8F9741A9D0BC2B89D59C24055ECEEE4E80904F1CF854FE240328F6493A6A242F
62EF32CA81A2041BE6C4F8150CA36D0B37F7BA284A49E4DF9B196E9B6C6FA4B7
723A49B38400688391B2E31986D385BA0DCD0C6AFCECA423C805F0966D3F5699
085080E8FC9A14ED7F8ABBF3825CAC6293DFF6BAD81B5A0A6F29AD6694ADEFBD
2DFF96610C8526C17A44CDD63239F48042FE9D02470FA6CD9AB6071AAD222394
672BD29820B119078ABB982AF1FA32FB2D221D9716AC3D4CE0439AD51CA05D02
8B8FFB7043853688E3AA3162D4B534249B0DCBDF763DCBEA0791D837DAC94609
57708625D0FEC72EF0333EE774E0AA147C50B6DA14F53765437537177F30C804
FA9048731516E16044587A364E5DE399DB70162FFE24454D9EA6A16339FD6A95
C3F461EB2B133EE0E4027A34721EBF9426F0B6A0995FA30B50E6710A39D16712
1F2EE337BA85ED49D86A5B668EF6CB732ED31BF812A6D83A68683D07E37FE59E
6D8F4A95221FFA9FD3D5CCC67F835A307680719FBCC991C071AB039FA29165B5
38A8BDC93D400EC95660140B72936F085874E5F9340D25ED5EF2746D4D033400
9F8F71C4C90A6A0EDD35A1086B85406CC4B6AA0931F1F17FE0D882FB8C6330A3
0AFEA3906D8EC9017EA920E00A5BF781258F49FF48762D19151B8B93EB3E5A43
EF201EC086244B3925AC7ACD06CC4E0320152D56A72ECE235D0ADE725EBF15DF
1A7D74D8D0D03CFC7223A383D4EBE24EC20B368397FCF84BC0AF17078CC55DE4
2A06700D1AB8E72AB888E47391412407E10C4A4F9DE926385E9AA193A3486B5D
D4F26057EB4CD1DEC3545B8A2B482365A382E72FC967630971BC01DC56F7FE67
A29D8C7CB141921BA40B7A875CE9AC11FA54E490867BB9E14D3A618ABB0C3B5B
440DA51D1BC808BD295197548661341C849E2F4B935260E4D6114131410D5776
5892DA066B2F8E208D5E7F5F13B4126192FE55C8D16BFBC79C836E4CA03976B5
E5C6190A4935721A3A25F9B0D3EE73D6E82CE7F45E03015795FA9079A4462F3C
7A38C6FCFD622379319B671F56691C8299C8C9BA822F86979F67036C1B143FF9
2C26414F7F281366334C7EE09941F9ED7234137CCCEA65FA711EC7EDFC33391A
B62250D7F6E292731C7374214ED29C83C9A2AD2F2CBBD1A07E44DF4DCD65A884
1B6693C40A95C5061ABC597FFD50AC3F036BF0783A2D700AEF861619AF1B9FD8
46643CC18D86E3EB5D9A4E38C348201578146A03AA51CC215ADA37B4AC9272CC
BF81509A5C4F020EC37AE2049EA3D1235BB295028A8E8F27981F79D83EB8AE31
CE2CBCD287DE8A1592EB6D371130CBE4F748903150D0924765B1D2D2E33B4824
692E85E9000141EE5B103D0C988D21EFC3824FC072B203F4C7B939F46ACCC58C
AC5CAFD8154C3841165CE7E28798B4BB88F6740DB2B765F25FF073D73DB7EB75
2CCB57D81CFED2B0132FB0650C877E70C98200C028D1C9AB15C0174A089FC3F3
FE6FCB65E3182CB0579211330E46763D434576F03AD3BD8695B3C1D410415C7F
76106258B66550047169306D9A13605DED397905EFB38BB2978D9409CC6B2296
682F1C97A45A994617FC36249A0EF9D2EBAA6D7065140BF2AB6B6D3EDB65B9AA
2CE611834D7C7353F4D4ED067ED1FE2B0C171D274BA68326C440F76F7A42F87A
058BD0B80A46B73D18CAD622CDF57BED0818A0B4AA17D5072107EEB438CD6E45
140C3EC1AF2116B5BB4DAE4DBEFA9EB38D59DBA439F9EB9C333E2AA3CACFD7CE
E0797DF62C6B397AF6C9DAB66084EE2C523D029A6DACACA55421F9B611B86171
989ACFE75C5B9B46B798F9236E9F40554C55BAC65752D4D5474197DD76CD5EA9
9F28F6493A6A242F6CE6ED90A714794032AD2919F50628F2BC627789E28E84D1
E7384887EE721F64CA0E019E03AB3AE26A516D97F18B008469A4AFE99F2BD758
833A4EFA2E801F56A5BAA1DEB71A9FFD51157BEDD43A41ABF0D1B31DBC09DB32
6266B2D53D8C764A7A43966ED76376E07BAAF00EE2D09164047141C941F47D98
60B26FBF72F6F95E44F1307BA3A8F616A1BD6B4FC88101305A9279C839FD2276
760A49C43F022989DEF6E15BBE5AC52A446D883D561AA6A63C1AC13F5ACC9AB3
D1CF25D1922CEC0B0CFFAAFA085DF6E55B8A8F650BCE9FB54F9E181424038C89
884DF1DBD9F846930186251193D670F151AAA4FA7A54B4EAC73E8E6F08C2C2B9
A59D2E46A881BF3EB42976891B08F2C0C1C7499D175F392B45B93D969F1EB8FA
D34E05A48C650F43FF3340E3497D108D992D64649CAA492BBEB670981EBAC38C
0765EB319E4B2C1303C0A8AC18D67EB5029463DF5A45A97E9E199CB477FE4A2E
C13E515608CAA70AF94B4751047CF100CC3A9D7A88AF9F9EB80163EC4482C387
FE3D478EA4DB880D095A7ED4FB6D5A815184A99446E31C693B80A543D8B18EA8
64FA45EF73E59F27C3248B6BA752C168E01E7946DE575D259B0729DC064F3C70
733958AC9CFD38931E0742C642094F648AAFD00DE629FA237BDBAAB1EDCB2DD1
3B338C9F7961392FB21EDF5CFADB42DCB62B984D8391092D339FF5C8075F32AC
97BE9EE45BF4B257DA9992A34CAEC47A379FAE11D6EC221C2B401B2D5D46BAEA
D88FD6648452DA35B2569ADD49A96F554D602E22D221142CB302C5B96274280F
DBD6BFAFDA91624B1FE103D95ABAA502BC592C615E3DFA577358BFD7AD66A2DE
7DAE898315CEE464BFE6E17A4192F92541E013073FF9E2231591FA9F72FE07B6
BC17A2E25802F85118D419F24E7D6F595AE17C8724AB4F8590F1A4821D62D424
6CA0155A54A69A5710EA9A9B837D378BCF35E9579EC5E00C5A8748F8AB610487
4306AF12BA45A12C2890F8CC80467A0D2ED33B5F679F1FFEBC01C83C88179956
E369C41DBD15359F249C8845C0A7FF2E0CFBC0D6BB31A72853801F546E906300
AB550C45141390EE271D2BA5D8B4DF572DE345BE7A4FDB250372CF72ACB1484F
BC1F336DBD7AE0F8F893E9EBE22F3B9FE76C8D26215EA2638A668D17CAF55113
471F061C2E0E2A3BF369ED27F84D9840C299F3C1B02EA66BA63EF7BCFA351166
A325EA45DDA82195725CFCC84AA3BBB07B287EAE62CE1C5BA41D618224E6668F
B9ACCDFA109BDE4F85242FCEF6149736538BFFC5A421EEFE7838EC60A2413277
031FC7474486BFC17134D2308CDF8E5E176D10E70FB731C6C1733E89AC369070
B3EEC077613C7179F426C42913CB3A4DD4E415FD51353AA3FFF28ED73B01098B
13293289F8072D97CF60735246DDF4CC942F4B9FB3F2CA74B361CBB792A1257B
9FF5D9CEFCBA7605BB87D4D2166C35FB52308AE96C1F7316F32F9F6D891D18FC
19FC90EF8B6906B7EE0A734CA2B258558D55DCD4A1524F8E5B34146B9D507EE7
9DF50559C743C383DB3203609C00115392D4BCA495F44489624F7D704DC59404
CB9EC35F0C8E1A30BF278AA74CA233E2C25D646E5F3836602608FF5177BB7291
5FB719561D54AC9072AFA443D4E2232FE1FB923D3A8CDCF9F836D147A08F00AF
3461A1C651E27AF40D2CEA13ABB3BF00C2771B2620689FE1EDFD49E8901092CD
E3A0E93D890FB3CF6C8124481A9DE137AA064BD4EBD5E32C525FADB0C8E44919
4F984553B64057A6E9BF92C09593CAC845060F70655D8567804B5803FB9DFEED
BE86B8052D034724906735ABEB6417582B7D7BBC26102990E067BFAAF95A523A
884E222FA8EF0F6A03DB50C53E3D24EB84610616DBD12B0345E5D3AD7E32A072
FB59BCE7856F2BCB48C69E074B263DFB6FE5B486450C36C74B91685239CD82EE
7FC82ADA13FC44A1E5F556B5B7EE9C19CB1BB2F592878584A8ABDF1EBEF2C076
AB623053F147F136CB29865B538D351174F8D1DA9D11F02FC31B61998EABAE13
229F7B3ABA30675A0C25055F24C9C2E789852C349920CE6B42AAFBF0F90853AC
E5012EC0E75B6C1D44D7AFFD757B3CDC1B5F33685187943D27CBE7DCE9AF9D61
1382D96BE12062633A852FD83EB76031929A4FADEDE2D1599BF1907EC61DBB61
0C9FB926BD94E844FA7A9CB4335D6848BD2088A3EF03353C55A0D00F27C2EA71
CC5D2E2A26B47B59755CC64031FA696DDC7E38360B1A6C03DB713F617DB098BC
DF447CE5635C0596FEB71C68C4863E33FF9EC1DAE692E57CC61B4D225DC54529
103ED8D7F2FF0BCEE905BD224F31E5B9E83BE9CDFA1C1AFD3AF9350EACAAA8C5
76FEE7BF9EEE2FD8134707E2BECDD416F7AD733B0C246898089855E76F7DCB69
B1AC97BA6C33C080FAF8E7EB173B50921417F96BA017EB0178018466DB22AB82
91E0EE389EAA858A62BA34016CC28AACA1C46EDC6885189D1F460CE57CC25022
A20C1DF7794D74789429F3637E6008BE63C639695F3C1397D3A722E1DE065CA4
ECBD075A352A2CF2DB8831EAC3BBD518E584D21044A069D9B3A69032A953F121
F69F49EDA513D2FE16C8D447E75DAEAEE8D15DE7E19C4AD8F1767A4D969925E4
6C2E24AB3C9C29062266C1FE4458F3F4707A7A304F6076328CCE20183026D48B
5304F3BBD86B32486FB4023E98BCAA48A472001B732D761B67600808286648FD
0B36835D9A29058B2A4671C30E226B3FCFE1155E70C32A4FAD88841498F58914
F54313F10847EFEC086477B07284B2FFF95A8A625407A01A2ABC53F806DC6D58
1289E46F7DC91B5548C0891B14D994E3BC1EA78102960221E2C18D9ACEF28EB6
DDF2C2206976D8E14A92D63EB40454892CE41B4359C89C36A608B7A043FB6D39
D9B10A106F17B3A85ED8FAF19EF4A7ED90FA8A1C55D0447518D11B4CDDA6FE3E
AEDC5E25B26BE5C84554B4BD7791F969F3FF0727B94E23FE9C8D030BE0561561
796769BCF858F60444405DB6A522230CC4D3C5187D9E2B379969D61A34899F89
8B8191ADA1ADDF74D66DAA9042610473BDED23DB0D3AB9B2F4F240C93D5EE589
115090897424AA836C2B4F5DED82A6FF1315BEDC790316B120FA851C9AE4BA1B
9E0AE8C3DA8EDDDAC78D6DE2F606722BA6503EB0043729EFF1516AD269564FD4
E82BFB94935637F6D5E464B3DF572DE345BE7A4FDB250372CF72ACB1484FBC1F
341F73E07D263F076D4391E99DF3133C6D422A783BDF524F2C6655F5852E6F54
73FA9DFE90525DB68F984FBE45E7072DDD0CD5E02F0313BEDDB7334E238D984E
6B0968C2819FF6F958B74F4C18784F23A623FC9934C2CD92555A75377CA89ABD
1BEE0EB9208A27D9CBE1098066F338EE11522E42438EAC82BB19B020FF7BE6EA
079B0C0EEB1F4B4F23B1370C5B259D400B4B56501CF634396F4423313AD539AC
49010E8D91E533059AB6A4070266885DA751B6C9A85912AD77C5E8835253E44B
E8FDBBAF8A3FC55B7099C9C461BB0E2F6D922E3D46244F7E6090998A99BFE240
578D7CF10A37066E697ECF12569AD231954FB93FB7A210A8538F7BDBE2C157F7
7F1AEC8F8B63525AAF4BCF59D4689386FF80B68FA97A80A7649546B511494549
81FD0F0738902482F868EDACF57239AD483C233809F392156948951A5EE64ACD
54392512B07ACCCCD0CECA5DD42B63726AA85E994A7681A44C98405CCF54EC17
B8674D2233953BE5A70883AD0E4C0FC0338BDA6031E445F889CB28EE78D64A36
F3205356746638CDEB3BABBAB53F489071D11CAD7D62C98AC233A6E65D660832
4ED1CE78B8692DB449F324F88CE442026AA0AD16BBC6FC1C6C11D51D09631214
49C6B55ECDFCAB195E947D18B6608FA0642E4992D71ACDB86500AE72658EC1D6
DE2E5486395E4AF35B875A037944087CB2E70F6C7F85853F10786514FB51C951
74DF4AE9067EF60DCF5A4F60AFCF5E31AD13581A4627B7762216038173C494C1
BBBD7E31E113240270FC502A8DBF8D95A978BEB35D372D390CF4EDC6BCFC2113
C538E707C15C259AEC31E56227D928EA61B8403198354DC5C16A97FDFD3DAC5A
6E0283147D85FF47F7D853D4E937E808C26B9F11A277808EF55952370D4353B5
0C9B2DC9484C5FDBA2CAAC2CEC47FBE495AED6C10980A09DB37C7A96309E02D3
67B77B5E22390FCA6B04844C8C220FD46131B9284B3BD23DC133884CB32F2DC2
60434681E92D2E498E8E9456F870A10E27C2BD60B7E11C35FDFE0770F1CBC0AB
48001A3FBB43911B96C587E65FE2D318B5FA421DC7EC1605F5B596D20EB63AEE
F38FB9A89B45C068ED296A82B87A7CF1A9A578B3BC9DB5F96847EFDD657308DB
6239FC6D8B528E7F851C7566888A5254BD7D6FA7B95E377D3251FF85459A658E
F498EB271C57922CFFD2D7731E55A0FEA3B8C3CEBCE2D1433C3B4D9FF79F749E
6DDFC0AA6D0C4684879CE4E71CE84BAD177FF328EEE764A6B74EDEE2FF215159
4EBD224163344574A0347896A1A605661E646D817397AE47CD1B4DA2F11B66B0
50C76D03A185E2276EA27973FF22A0D0A0D44359114634263AC31D77C4F7553B
862CBF5A0747668C0F2B081EF44E73F928869372595475660D1AF8F1DAAECA2B
F499DA89CF6F9FBFAC917E30F41CE95C2BF295A929196B9CAF6DB91BF6FA7A00
EA629EE2D8BF2C6B7ADA45FE033E677C43E84BEB539470C7635B953C5F726479
832D4E8D4CCE33E083D18DF56F31B1A4E3C6A18267334D9A8BEA502B5328054B
3D7DDACFC82631E4893982180ECCCC77586E0BFB7367DD9F70A0951C26B12F89
126F2E1EA686D75B2B068BE0633658867D600C827C0987F49395F92155D48F76
8640F45E5A03104F730B6C801C993E8901E1933EEF1CF286A784046CCA5E4794
EC19C3EC32AA430C1CACD44D331DB52A70B203BEBD302832DA3B0478E79CDB17
26E149CE3D65D81C8E45B0D7F97ACB230D53EF75A00DC6444645F3BBB484AE4B
083210967CAD62E5D8454B7953B985D88E32E7D6EAE22AB0E455D1D51825A03F
B6E7DA3170AEE20C2FF867C9172FDBC82DF0FFC60A7E2AB73B8797C45818999D
24CBA38F35D8E8739A9CF51A1DD46538009CC444B69158F279F7379325FB25EB
3026B1B7D86E69B37091B34004BD188F380E533129023D8B93CFE2394EAD52C3
59AEFA5A2DAEE1C2B9A1F603DB446FF704B82ECA120724D0776567E48DD8EBD6
094DD7117ECCB7B99D09F9AA65B4D2BCF58254854EE4E5537AB0A76A5E74E57D
A1B6DC83141250729CCBD175F000EF5EBE52FACF5AFD35BD506B2B226001ABD2
C65921BF44DEBDB19438A735324501AE0F98321437608A09A90C65DFB96D2FA4
494449C69B415BB872A22295C9BC7D50AF7684972FA1902F53E42BCE26BD9364
4E4C21AEDFC6D8E83B39075B4328C7038EC0B948D18F1DBABE7B0821B76C710B
FCF4137E1E6106EBC17D1CBD6FE3820C8F449EE68EA8D251C15DAF4CE72F457C
792D4973B66A51972EBF4F4990126CB37244E4B9C2709B81A226D4DF11FC1FFE
67269CA02D9EED1925724424CC994AAD341CD8FBFF1C35B22AB5195667C3EB5A
80575604C001A548A930A46D8D08C2925DEC6119195A10C45C290B8331410F1D
CFAC752200BAA22720C2DF2E6C47FCBDA5A093F493F52946522A5801B10BD635
FAE9A31648AA56435A4BFC6500FECB672870999B944DB5BD4670CDAED2B8334C
E40A576EDAEB52D256FAFF43071057F2513D0B43652C4C66A390662535DA1C9D
6FB22653AD78B986088C72DB626A96BF8C170B8D82752DF19FCAF29D00C325FD
B904223713697FDA8EF83926C44264CE7065B5AB994F553280E5E12A27F13F81
33ADCE4E3B9815B8D3B779AC82C2CCA52D195DE9D59A0F4449868B4D0F0587F2
9C1EA248E14E5C4801FB768C61BAFB497EAAA77A84EAE5B5EF9480ADE0B18E8D
FDE7B7211985D09A3C6CD3E9A94140145C0822AD4ACC38949F357F7F55A77EA2
5AC660FF67C2502E459B18ED2B28C6D74015EE6FDB7D2667BA13E6DCF11C448E
AB9E0E630978C45EE0847A3590B58E38DE02740BBC0A616BFFDAC039A0E973B6
D0E880E3EB09ACA94FDA9F1EAE6A2152CEDC40036200C38854296EC17A85F9B1
B386F9551287AD49F6A5BCEC2019A802A795C55247334D2600FA8EC36BA0E331
072F45FA57D34BF8E3C444B64495CC5C6F48E911D1926137956FB033A46162A0
51A33F465602123F186B7555AEF49A3D4F22D2836D831AA514A2E3EFEDE15091
54A47B6B18BF00013486B770DA4FDAA0D2DAC29A030BD6D3F9F1E0D7C79CF00C
8B478D27D14F008E134F92DDDDF27B0F07A5629E8518785CD8C10A0389EAC46B
F95B5ACFEF157C574436F44561F7D3AA4123426FE675E18B3418B534DCA073E5
2D0399E0CF10C6196005AFA5269D435ECA847D3605F4911DF85561DF48DAF6EC
080E933810B9A4C9415466C7C089D72B14CD8F55C139FF3A8FB262A98D238951
3ED0D5C7AFB6F5BDBF3A16F449E61A678E1D505130D0FD048042A0DE224CB112
8E44B213280091F25327DB81FAFE20139D158B9CA2F8E5D03CEBED8BB03DE02F
1CEFD0BD43555041C9F914E4DE727FB43859826EFE3D651E033303A2AD9E74B2
DFA5D3F03847C3FF0687C7FBC70895019522376DD54AE56D584A8CD7A24E1396
33A0AF9AF670BA5FDBFCFC240D998343F0066BC706083378F5E57DC8F688D228
B1EB98926C1CF73D1CB7518F204732B5003F5D1EAE56A05E48462F4B13F64268
A18EBC3518950F8F7330216AD276246C9F749658F1F5C0D10B3D25692D2A02AD
9381F5965362D63BC05E6D3B85C56227FB920DE6F65EF74340C382F2F0E836EA
E7FED1F8372CE4D562571D671CA66551ED1E5D6BC829A4A2BEAEF10F2F6A31D3
70B6AE09AD23131C5C3503CD939D507144926D3B2C0357DBD8D8273B4FD9F1E8
E5E19F3DD28A41208CBD907C4E93EF32D5541C36130671C916D6697E53A43CA0
6760C066E99037A3ACFBBA005CE5CE88D17D4C30647742211B3B1426C291810D
E035F35B9B1CCD7695895C62B1610F5F1B6250DAFA3D85D2A77636909871C68F
26AC7491331707A805221A03E2BEC959F88C7C2613AFEDEA27383D79CDA613B8
B414EA9AA5461BF9E7F491BA1BDF1ED89B6B462950D2CEB485259EA076AFC1E0
6A69CB188BDCF859CA4F3A3ABA18DF3377ABCFF087073E19C9F90B60F6BE9F4D
6EF9DD539E1EB28E5F1C2273112220F830043BB192D479D654E76FAFC31BD5EC
2889DBFA4233527F3EAE53442D211F8E0EEA8B2AAB2938F7B02AAE4EFD5888EF
29C2C6710FF61D766E9B01C06304B71258F80EC729A9C765933BD426559E2E36
901309F7790AD2198D75E97F125D9CA8418A52D581640CEA66481A0F588799D4
9C3064B4818B7001A4A3F99C8690A48E486AA54A7D53A67520052AB51A571FC8
8B25C65C46861430544D48FD3A9267F986D59C627979906E7215775E279BC3B0
D28FA005EE01DE4649A7ABB75A726F1EF2469085BCC3A0E460F5AA72B3B77F51
EA0E4B30B8E911C0F4084D1A0E90EDCE7A3AF354D84EFBDB14785F6BBF58F942
28342617ABB13A9B5525411C60E46D92E59A16C092D029CB7002CEFCCA066BF7
61E9DB78180BFF20B29778828DCCC9F3927A25535D6842BBFCAA661D2DD29EF9
41F20AE37AE6B1BF6980C133597BEECAF4A45D6417150C47C28A090611375A71
3C4D43B79677A2701944FED261579C2C592913CFAF4296DD7A4248BB8425A5F9
C8C21FCB1072F5EFA837748771CD538E7F57DE66A9BEC99FEB3435C14F33FA3F
D91C8D6977F0E8D21158FF93374B1C7F40B46818A604DF2410780F7FF8981C87
B7A8C644DE588BAA1AB7A2D6F721BF71A9FF2F8DFC0209EFB60C1FACBA5827A2
1D85FBDB8295B01C077024B33DE798EF7E01ACD78C222F66F9D9A6769FF83922
EB9FF705514491B35C8D73286B89B94075B5311EFA227745EE53092A27A5AE85
B3B11255EBCE120094BF1B3D209FD6869A0C67906B55C1DC6C093EAE99B5BA3F
A0FC5BB9760219E59DD6207E06197C506E97A0B7F8AEBF68A6005BD8C4203897
CA375620BBA4F024067C7F67FD1FF0DB90FF2EC2C243D31908078F5A68A6FA84
2125360BC1316BC6EEB5C6D24411BF6D29E0587BA20E0CCADFFB63E0F9026E2B
46180A239464DF5DE0BE2B368F469CC7D0E542327625652195A29F26680B92A9
8FDD9A99FCE68B369DDEAFAD022C5D46212D922641ADBEDE0A0782BEF6721823
A3F7D8ECCB4710733325A804B43781C7FBDDC7AB0016989AFE7F6091B484C4F3
ECCEB8F91CB93CBF1814C666F6AFA65D196D5B66457EAC28B5C5911BB0B0E135
6D5BD93BED47778E81A1A6EE68BE13E67669EB4A51FD613802C1A87DD8051000
4711C217C17F074E0E29CB87F380D79640D68ADD854FCE1D3B81A2968A26013A
C84FE9650579DC143D1782D70C622CFEAE7F4AD5860D5DA595CBB3CB2FADA229
D6A841E5ED4DBBC7001A78D554F14D83AB50C331321F551D1B7ED85A41600716
E17F6830C3ED97ED8196837AD76ACB78009E599996E5EBE36C28A0A13E318FE0
017CF63C63502E8A19486FB4C1D32C959A62CACF5EFAC719E96E1E460CB7B9F6
406285E5D0CA8F2F54C754DE7AF19810223605626B70FCD6E8370F3F71E5D054
BAAC3D8C58EDA6D539C11187DE4ADFB2C258B6D7755D30E50B9145B62ECB4EDD
7544CF5D08322098F17620A6AFC525BA13984E0E177E9C41D5762189E8BB9DFE
BB758250D6039BB1EDC5273840BC0B9DC3B32315B66B81847DF84B9A09AFF4DE
C725BF2828D9F185D29BFE1D68B6052D163B80F6126EC1E2AFB41CDFFE97970A
C8DEBEF6852C945EA76BF981A44BE2A8C9BD056B74BE9148B3681372353A8354
D40F06E5FB37F78C46D061D0A56EC326786CF632E4B4577A3AD56D2AD601F464
677136DD6CF53F85E7A7D9C77A5A78024B81C9CCB6C2998F9AEF8BFF30FF7225
735224A644B81DD0C0DE8937011B9EC68F651EDFE660CB9C707E036CBEB8240F
C81BA1BEC7E4C3309EB9B2692C44A1C2851DA7208942B6BE9D3BF75ADB07E318
719E3B0B85CAABF108A1BCE83997D2C2DCD9BDAB347157B38DAF1F87B706EC2D
7FF43408B9DD1F7F8BB593256658012B378CE6C1E21DA7E588FD62A81FAB2F75
C340464D151BB6C90F8E4034F2345A7407A23B86215A12346D79DE882E80DE8E
9EB0D3F542C08F78D863A38BE220C351F77F03710BE6516DA5E967046952377A
F860AEF04363C38EBC7A8AED52D0BC8A974048D8AFF66AFC420BBF2E7C21E443
2E0CFF52CDF69730297281C97B64FA7841B6A8CBF1EB353E42735EC1B92151A6
5063163CDFF1384B86EB9DC5ACBC199C28E36A99EA93FB3F8DCFA1752AE6D1A2
68637CEA664908D2457011BA653A75034EC17E222998CA14F658FDE5C4245687
FA5F85B6975C43835339DB186B81192A0ECC43D90BC16A606988EDE6D42DC8A7
C04C6840B4ED3FD37FBC42C29D3AC00B70636A575F88B3E280E2A28D5DFBF1FD
B05BBE005FB49A5B445F3AB8B0A374C3018F170A9C23656C0C91B640CDCFDBD8
808626D78451824C7D4D0CFC4649044B2AC48E78EB9E6828DCB7EFFFA8F7CF10
796A608B50A6FD7FB65FA89CD325C82FFAEB6498CFDFCA374B6E630D9AFD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851481
69CB61D11320610B870B20DB21E3F8FAB6E08842ACE360F89AA43C3B3DEE6939
9C38FE3B5117B32C326B2F30758EAB6F08A4B681E3E9F89C62B56FE9364998A2
FEBC5DC99B084EF1C937809E869545645278097E479EE8192B0ECD233D80E523
1808639A070D2CD5CF4B80D6513A44E08E02EE1368EB8203D04359FB3E57B550
8DDBEDCB26F100E2D4823D2A84E52BAD191AA381748F13772D51BA8E86AEE850
B52BF245507C14FA08CFD4179F30D011CA63B68C91CF361F1E6576DDC0576D0D
32B9E9CC634D83A8812A02C1A6250D264ECA6966F8A799C6A6B935958BB2E102
BDF16F3C3AEF099D50628BDDB72CA48650B12B73617E5F411536CFEF082BBE76
F983AB01D75E712D89ECF2E51D5F737616A85210E229694B60EDF4D4B12EEE85
F53E83A881C69E1910EFD6D8A56A155DB128F5E22E9828E4BB12F68ADD42D25B
DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (test.dvi)
@start /Fa 138[50 2[33 1[50 45 48 73 24 2[24 1[46 2[51
2[42 31[65 65[{ encqec ReEncodeFont }12 83.022 /TeXGyrePagella-Regular
rf /Fb 149[18 18 39[36 65[{ TeXBase1Encoding ReEncodeFont }3
58.049 /Utopia-Italic rf /Fd 139[26 1[31 7[24 24 39[48
65[{ TeXBase1Encoding ReEncodeFont }5 76.3802 /Utopia-Italic
rf /Fe 208[35 47[{ TeXBase1Encoding ReEncodeFont }1 76.3802
/Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop  0 TeXcolorgray  Black 0 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0
0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 0 a 0 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 1 TeXcolorgray 1 TeXcolorgray
1120 883 1520 881 v 1 TeXcolorgray 0 TeXcolorgray 361
-453 a @beginspecial @setspecial
Black  {  1 2 5 0.2  arrowVTriangle  } 0.5   false 0 0 true 28 -0 -180
182 0 add -110 0 add 1.0 1.0 arc2
 
@endspecial @beginspecial
@setspecial
Black  {  1 2 5 0.2  arrowVTriangle  } 0.5   false 0 0 true 28 -180
-360 182 0 add -110 0 add 1.0 1.0 arc2
 
@endspecial @beginspecial @setspecial
Black 210 0 add -110 0 add 252 0 add -110 0 add 5 3 0 1.0 1.0 doublegluon
 
@endspecial
@beginspecial @setspecial
Black 112 0 add -110 0 add 154 0 add -110 0 add 5 3 0 1.0 1.0 doublegluon
 
@endspecial Black 2431 370
a Fd(A)p 0 TeXcolorgray Black -1211 w(A)p 0 TeXcolorgray
Black 1716 473 a(t)1754 443 y Fb(A)1744 503 y(i)12 b(j)p
0 TeXcolorgray Black 1940 473 a Fd(t)1978 443 y Fb(A)1974
503 y(j)c(i)p 0 TeXcolorgray Black 1792 138 a Fd(i)18
b Fe(/)8 b Fd(i)i(r)p 0 TeXcolorgray Black 1792 827 a(j)18
b Fe(/)e Fd(j)10 b(r)p 0 TeXcolorgray 1 TeXcolorgray
1 TeXcolorgray 1117 3 1526 4 v 1117 885 4 884 v 2640
885 V 1117 887 1526 4 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 635 1808 a @beginspecial @setspecial
Red 5 8 0 false 40 0 18 0 150 0 add 50 0 add 0.5 1.0 doublegluearc
 
@endspecial
@beginspecial @setspecial
Green 5 8 0 false 40 180  360 150 0 add 50 0 add 0.5 1.0 doublegluearc
 
@endspecial @beginspecial
@setspecial
Blue 50 0 add 50 0 add 110 0 add 50 0 add 5 4 0 0.5 1.0 doublegluon
 
@endspecial @beginspecial @setspecial
Blue 110 0 add 50 0 add 2 1.0 vertex
 
@endspecial
@beginspecial @setspecial
Blue 190 0 add 50 0 add 250 0 add 50 0 add 5  4 0 0.5 1.0 doublegluon
 
@endspecial @beginspecial
@setspecial
Blue 190 0 add 50 0 add 2 1.0 vertex
 
@endspecial 1472 1908 a Fa(A)21 b(gluon)h(loop)f(diag)q(r)
o(am)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
